<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>User talk:Zzo38/Mapper H</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>User talk:Zzo38/Mapper H</h1><div class="article">
<h3><span class="mw-headline" id="Status">Status</span></h3>
<p>This can't be fully finished yet... the following things don't make sense:
</p>
<ul><li> Why PPU A8…A11 == b'0000'? That's the first sixteen patterns in the both pattern tables and the top eight rows of the top-left-most nametable.</li>
<li> Why latch PPU A8 and A9 when PPU A8…A11 already == b'0000' ?</li>
<li> Why latch PPU A12 and A13? They're rather difficult to control in a useful fashion.</li></ul>
<p>—<a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> (<a href="User_talk_Lidnariq.xhtml" title="User talk:Lidnariq">talk</a>) 23:15, 13 September 2014 (MDT)
</p>
<dl><dd>That first one is a mistake; it should be only A10 and A11. Thank you for notifying me. --<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 20:32, 18 September 2014 (MDT)</dd></dl>
<p><br/>
That doesn't really help.
Let's try a simple cycle-by-cycle description of what's going on.
Assuming for the moment that scrollX=scrollY=0, and MODE=SCROLL=COLOR=0 at the very start.
</p>
<ul><li> Fetch $2000, data=VV ; MODE←$80 ; COLOR←V&amp;3</li>
<li> Fetch $23C0, data=COLOR*85 ; MODE←$BC</li>
<li> Fetch $0VV0, data=PP ; actual fetch comes from ROM at $16VV4 ; SCROLL←0 ; COLOR←P&amp;3</li>
<li> Fetch $0VV8, data=QQ ; actual fetch comes from ROM at $16VVC ; SCROLL←0 ; COLOR←Q&amp;3</li>
<li> Fetch $2001, data=WW ; MODE←$80 ; COLOR←W&amp;3</li>
<li> Fetch $23C0, data=COLOR*85 ; MODE←$BC</li>
<li> Fetch $0WW0, data=RR ; actual fetch comes from ROM at $16WW4; SCROLL←0 ; COLOR←R&amp;3</li></ul>
<p>So that pretty clearly shows that since the attribute table fetches interfere with MODE, we can't usefully control MODE when PPU A13 = 1. The value will ALWAYS be between $BC and $BF, producing normal display for the top 64 scanlines, and weird aliasing for the following 176. Furthermore, there is thus NO way to get values from $80 through $BB or $C0 through $FF.
</p><p>What if we prevented attribute table fetches from updating MODE? It's both a little better and a bit worse. There's still no way to select values from $C0 through $FF, because the PPU normal fetch order never fetches from $3xxx. On the other hand, every scanline will flip between MODE&amp;0xFE and MODE|1, left and right: fairly hard to compensate for. AND to no real benefit.
</p><p>So let's set scrollX=256 and scrollY=240, so that MODE is only ever updated during the pattern table fetches.
</p>
<ul><li> For brevity's sake, ignore fetches from $2C00 and $2FC0, it only affects COLOR</li>
<li> Fetch $0VV0. If VV&lt;64, then set MODE=VV ... Wait, why didn't we just latch VV on the nametable fetch in the first place ? Also, COLOR = VV&amp;3 = which also = MODE&amp;3. If the user flipped between left and right pattern tables, flipping PPU A12, flipping SCROLL D6, that effectively ties CHR A12 to CHR A15: the only way to fetch tiles where CHR A12 != CHR A15 is by raster effects, changing the tables mid-screen, after MODE is set.</li></ul>
<p>This is entirely ignoring the dummy nametable fetches during sprite fetch. Those will clobber MODE, although it should usually be 0. It does keep the user from using a quarter of the sprite tables, because the values fetched will cause weird internal scrolling.
</p><p><br/>
Here's something that will provides the same meat, but is far more predictable:
</p>
<ul><li> On nametable (but not attribute table) fetches, latch the two LSB of the byte fetched. That's COLOR.</li>
<li> On nametable (but not attribute table) fetches, IF the MSB is CLEAR, latch the remaining five bits. That's MODE.</li>
<li> CHR-ROM is not connected to PPU A11. i.e. both $45 and $C5 fetch the same tile: the former just has a side effect.</li>
<li> The four LSB of MODE and SCROLL have the same effect as before.</li>
<li> The MSB and final bit of MODE selects between 8 KiB banks of CHR. There just aren't enough variables to provide any more.</li></ul>
<p>—<a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> (<a href="User_talk_Lidnariq.xhtml" title="User talk:Lidnariq">talk</a>) 23:58, 19 September 2014 (MDT)
</p>
<dl><dd>Thank you, although my intention was that you would not use the $2000-$23FF nametable at all, and that it would include tiles to switch the mode, at the beginning of each row and possibly also later in the row. Thank you for writing all of this stuff anyways though (maybe it can still help)! --<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 20:28, 20 September 2014 (MDT)</dd></dl>

<!-- 
NewPP limit report
CPU time usage: 0.025 seconds
Real time usage: 0.026 seconds
Preprocessor visited node count: 2/1000000
Preprocessor generated node count: 8/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1398-1!*!0!*!*!*!* and timestamp 20160208230130 and revision id 9087
 -->
</div></body></html>
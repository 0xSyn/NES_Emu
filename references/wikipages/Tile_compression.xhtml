<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Tile compression</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Tile compression</h1><div class="article">
<p><b>Tile compression</b> refers to techniques that allow fitting more graphics data into a smaller space.
Programs using <a href="CHR_ROM_vs__CHR_RAM.xhtml" title="CHR ROM vs. CHR RAM">CHR ROM</a> cannot use compressed tiles, as their tile data must be stored in the PPU's native format.
But programs using CHR RAM can process tile data while copying it from PRG ROM to CHR RAM, and this processing allows storing more tiles in the same space.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Run-length_encoding"><span class="tocnumber">1</span> <span class="toctext"><span>Run-length encoding</span></span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#PCX"><span class="tocnumber">1.1</span> <span class="toctext">PCX</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#PackBits"><span class="tocnumber">1.2</span> <span class="toctext">PackBits</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Konami_RLE"><span class="tocnumber">1.3</span> <span class="toctext">Konami RLE</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#GBA_RLUnComp"><span class="tocnumber">1.4</span> <span class="toctext">GBA RLUnComp</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#PB53"><span class="tocnumber">1.5</span> <span class="toctext">PB53</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#RLEINC"><span class="tocnumber">1.6</span> <span class="toctext">RLEINC</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Bit-based_RLE"><span class="tocnumber">1.7</span> <span class="toctext">Bit-based RLE</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#NES_Stripe_Image_RLE"><span class="tocnumber">1.8</span> <span class="toctext">NES Stripe Image RLE</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#SNES_Stripe_Image_RLE"><span class="tocnumber">1.9</span> <span class="toctext">SNES Stripe Image RLE</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#Pixel_based"><span class="tocnumber">2</span> <span class="toctext">Pixel based</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#Codemasters"><span class="tocnumber">2.1</span> <span class="toctext">Codemasters</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="#Tokumaru"><span class="tocnumber">2.1.1</span> <span class="toctext"><span>Tokumaru</span></span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-14"><a href="#Common_byte"><span class="tocnumber">3</span> <span class="toctext">Common byte</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="#Oracle_common_byte"><span class="tocnumber">3.1</span> <span class="toctext">Oracle common byte</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#LZSS"><span class="tocnumber">4</span> <span class="toctext">LZSS</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#LZ77UnComp"><span class="tocnumber">4.1</span> <span class="toctext">LZ77UnComp</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Oracle_LZ"><span class="tocnumber">4.2</span> <span class="toctext">Oracle LZ</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Pok.C3.A9mon_LZ"><span class="tocnumber">4.3</span> <span class="toctext">Pok√©mon LZ</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#Chrono_Trigger_LZ"><span class="tocnumber">4.4</span> <span class="toctext">Chrono Trigger LZ</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-21"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Run-length_encoding"><span id="RLE">Run-length encoding</span></span></h2>
<p><a class="extiw" href="https://en.wikipedia.org/wiki/Run-length_encoding" title="wikipedia:Run-length encoding">Run-length encoding</a> transforms runs of identical bytes into a shorter sequence of bytes that specifies the length of the run.
</p><p>In NES tile data, byte-level run-length encoding works well when a row of 8 pixels in a tile is identical to the row above it.
It also works well for <a class="mw-redirect" href="PPU_nametables.xhtml" title="Nametable">nametable</a> data because a horizontal run of blank tiles becomes a single tile.
</p><p>Pixel-level run-length encoding is much slower but can achieve impressive results within a tile.
</p><p>There are several different RLE data formats.
</p>
<h3><span class="mw-headline" id="PCX">PCX</span></h3>
<p>The <a class="extiw" href="https://en.wikipedia.org/wiki/PCX" title="wikipedia:PCX">PCX</a> image format became popular on PC.
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-BF </td>
<td> Write this byte to the output.
</td></tr>
<tr>
<td> C0-FF </td>
<td> Read another byte, and write it to the output <i>n</i> - 192 times.
</td></tr></table>
<h3><span class="mw-headline" id="PackBits">PackBits</span></h3>
<p>The <a class="extiw" href="https://en.wikipedia.org/wiki/PackBits" title="wikipedia:PackBits">PackBits</a> format was invented by Apple for MacPaint.
It is also used in TIFF files and a few homebrew releases by <a href="User_Tepples.xhtml" title="User:Tepples">Damian Yerrick</a>.
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-7F </td>
<td> Copy <i>n</i> + 1 bytes from input to output.
</td></tr>
<tr>
<td> 80 </td>
<td> No operation
</td></tr>
<tr>
<td> 81-FF </td>
<td> Read another byte, and write it to the output 257 - <i>n</i> times.
</td></tr></table>
<h3><span class="mw-headline" id="Konami_RLE">Konami RLE</span></h3>
<p>This format is used in <i>Blades of Steel</i>, the U.S. version of <i>Contra</i>, and the Japanese version of <i>Simon's Quest</i>.
It can be decoded and encoded with the Python program <a class="external text" href="http://thefox.aspekt.fi/graveduck.py" rel="nofollow">GraveyardDuck</a>.
Compression ratio is more or less identical to PackBits.
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-80 </td>
<td> Read another byte, and write it to the output <i>n</i> times.
</td></tr>
<tr>
<td> 81-FE </td>
<td> Copy <i>n</i> - 128 bytes from input to output.
</td></tr>
<tr>
<td> FF </td>
<td> End of compressed data
</td></tr></table>
<h3><span class="mw-headline" id="GBA_RLUnComp">GBA RLUnComp</span></h3>
<p>The BIOS of the Game Boy Advance and Nintendo DS contains a decompressor for an RLE format very similar to PackBits and Konami.
As described in <a class="external text" href="http://problemkaputt.de/gbatek.htm#biosdecompressionfunctions" rel="nofollow">GBATEK</a>, it has a 4-byte size header followed by this:
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-7F </td>
<td> Copy <i>n</i> + 1 bytes from input to output.
</td></tr>
<tr>
<td> 80-FF </td>
<td> Read one byte from input and write it to output <i>n</i> - 125 times.
</td></tr></table>
<h3><span class="mw-headline" id="PB53">PB53</span></h3>
<p>This codec was conceived by Damian Yerrick as an alternative to PackBits for the <a href="Action_53.xhtml" title="Action 53">Action 53</a> multicart, and a Python packer and 6502 unpacker are included in the Action 53 menu distribution.
Unlike freeform RLE formats such as Konami and PackBits, PB53 operates on 16-byte units, making it easy to divide the decompressed data into fixed-size packets to be sent to the PPU during vblank while rendering is turned on.
Like <a class="extiw" href="https://en.wikipedia.org/wiki/LZSS" title="wikipedia:LZSS">LZSS</a>, PB53 uses <a class="extiw" href="https://en.wikipedia.org/wiki/unary_coding" title="wikipedia:unary coding">unary coding</a> on the lengths of literal runs to save on overhead from switching between literal and run modes.
This means that like LZSS, it has a worst case expansion of 12.5%, but it works fairly well on real tile data and OK on nametable data, which have shorter runs than the high-resolution files for which PackBits was designed.
It also has a special mode to accommodate the layout of Shiru's NROM games <i>LAN Master</i>, <i>Lawn Mower</i>, and <i>Chase</i>, which have many identical tiles between the two pattern tables to allow tile animation.
</p><p>Each tile consists of several 8-byte planes, two planes in the NES implementation.
For the first plane in a tile:
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-7F </td>
<td> Copy one byte from input to output. Then, for each bit from 6 to 0, if the bit is 1, repeat the previous byte; otherwise, copy another byte from the input. This is somewhat similar to how control bytes are formatted in LZSS.
</td></tr>
<tr>
<td> 80 </td>
<td> Write eight $00 bytes.
</td></tr>
<tr>
<td> 81 </td>
<td> Write eight $FF bytes.
</td></tr>
<tr>
<td> 82 </td>
<td> Copy one tile (16 bytes) starting one tile back. (Used for a repeated tile, such as the unused tiles in many games.)
</td></tr>
<tr>
<td> 83 </td>
<td> Copy one tile starting one segment back, usually 4096 bytes. (Used for pattern tables that share tiles, as seen in several Shiru games. The decoder switches between two instances one segment apart, each with its own input stream and output buffer.)
</td></tr>
<tr>
<td> 84 </td>
<td> Write sixteen $00 bytes. (Solid color 0)
</td></tr>
<tr>
<td> 85 </td>
<td> Write eight $FF bytes then eight $00 bytes. (Solid color 1)
</td></tr>
<tr>
<td> 86 </td>
<td> Write eight $00 bytes then eight $FF bytes. (Solid color 2)
</td></tr>
<tr>
<td> 87 </td>
<td> Write sixteen $FF bytes. (Solid color 3)
</td></tr></table>
<p>For other planes:
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-81 </td>
<td> Same as first plane
</td></tr>
<tr>
<td> 82 </td>
<td> Copy previous 8 bytes. (Used for 1-bit tiles with colors 0 and 3.)
</td></tr>
<tr>
<td> 83 </td>
<td> Copy previous 8 bytes, bit-inverted. (Used for 1-bit tiles with colors 1 and 2.)
</td></tr></table>
<h3><span class="mw-headline" id="RLEINC">RLEINC</span></h3>
<p>This RLE variant was used by Joel Yliluoma in the Simon's Quest retranslation project.
It is very efficient when compressing nametables, which often contain redundancy in more complex forms than simple runs of repeating bytes.
Examples include brick walls, which repeat two tiles, and complex graphics that is formed from an ascending series of successive tiles.
For bitmap compression, it is slightly inferior to simpler RLE methods.
</p>
<table class="wikitable">
<tr>
<th> Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00‚Äì3F </td>
<td> LIT: Copy (n+1) bytes from input to output <i>backwards</i>
</td></tr>
<tr>
<td> 40          </td>
<td> END: End of stream
</td></tr>
<tr>
<td> 41‚Äì7F </td>
<td> SEQ: Read next byte b. Put b, (n‚àí0x3F) times; add 1 to b after each iteration
</td></tr>
<tr>
<td> 80‚Äì9F </td>
<td> DBL: Read next byte b1, and next byte b2. Put b1, (n‚àí0x7D) times; swap b2 and b1 after each iteration
</td></tr>
<tr>
<td> A0‚ÄìFF </td>
<td> RUN: Read byte b. Put b, (0x101‚àín) times.
</td></tr></table>
<p>A compressor for this scheme can be found at <a class="external free" href="http://bisqwit.iki.fi/src/nes-ppu_rleinc_compress.php.txt" rel="nofollow">http://bisqwit.iki.fi/src/nes-ppu_rleinc_compress.php.txt</a> (PHP),
and a decompressor at <a class="external free" href="http://bisqwit.iki.fi/src/nes-ppu_rleinc_v2b.inc" rel="nofollow">http://bisqwit.iki.fi/src/nes-ppu_rleinc_v2b.inc</a> (CA65).
</p><p>JRoatch made <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=161617#p161617" rel="nofollow">PBJ</a>, which adds the PB8 mode from PB53 and a common-byte mode to a modified RLEINC.
</p>
<h3><span class="mw-headline" id="Bit-based_RLE">Bit-based RLE</span></h3>
<p>Most RLE schemes deal with whole bytes. There are also schemes where the compressed data forms a bitstream, that contains integers of different bit widths.
</p><p>When compressing the combined tile graphics of Super Mario Bros. and Kirby's Adventure, a simple reference RLE algorithm (PackBits) gets a 12% reduction in data size.
However, if the algorithm is modified as indicated below, a 21% reduction is achieved. For comparison, the graphics specialized algorithm in PB53 achieves 25% for that data set. Tokumaru compression manages to reduce the data by 41%.
</p>
<table class="wikitable">
<tr>
<th> Bit sequence  </th>
<th> Meaning
</th></tr>
<tr>
<td> 0000 </td>
<td> End of stream.
</td></tr>
<tr>
<td> 0nnn </td>
<td> Copy the next n√ó8 bits, i.e. <i>n</i> bytes, to the output.
</td></tr>
<tr>
<td> 1nnn </td>
<td> Read the next 8 bits, and output this byte n+2 times.
</td></tr></table>
<p>A possible reason why bit-based compression methods are not popular on the NES is that bit-shifts are cumbersome and slow with the 6502 CPU, as it can only shift one bit at a time.
The above algorithm is still relatively simple to implement, as it operates on units of 4 bits for the input and full bytes for the output.
Coincidentally, it also produced the best compression out of all bit-based RLE algorithms that were brute-force-tested for that dataset.
</p>
<h3><span class="mw-headline" id="NES_Stripe_Image_RLE">NES Stripe Image RLE</span></h3>
<p>A RLE format mostly used by Nintendo for use in thier Arcade ports as well as their Mario games, Also used in some homebrew games!
</p><p>Format: dest, len, data, end
</p><p>dest: PPU Destination: Two byte value for $2006 (write x 2)
</p><p>len: Length (Byte) of PPU Buffer Data:
</p>
<table class="wikitable">
<tr>
<th> Length Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 00-3F </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer
</td></tr>
<tr>
<td> 40-7F </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, with RLE
</td></tr>
<tr>
<td> 80-BF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, skip 32 Bytes
</td></tr>
<tr>
<td> C0-FF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, with RLE, skip 32 Bytes
</td></tr></table>
<p>data: PPU Data to display
</p><p>end: End of Data marker, The value must be $00
</p>
<h3><span class="mw-headline" id="SNES_Stripe_Image_RLE">SNES Stripe Image RLE</span></h3>
<p>Same RLE format used by Nintendo as above, but for SNES.
</p><p>Format: dest, len, data, end
</p><p>dest: PPU Destination: $2116 and $2117
</p><p>len: Length (Word) of PPU Buffer Data:
</p>
<table class="wikitable">
<tr>
<th> Length Value </th>
<th> Meaning
</th></tr>
<tr>
<td> 0000-3FFF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer
</td></tr>
<tr>
<td> 4000-7FFF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, with RLE
</td></tr>
<tr>
<td> 8000-BFFF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, skip 32 Bytes
</td></tr>
<tr>
<td> C000-FFFF </td>
<td> Copy <i>n</i> + 1 bytes to PPU buffer, with RLE, skip 32 Bytes
</td></tr></table>
<p>data: PPU Data to display in 2-byte increments (or word increments)
</p><p>end: Unlike the NES version, the end byte is $FF or $FFFF.
</p>
<h2><span class="mw-headline" id="Pixel_based">Pixel based</span></h2>
<h3><span class="mw-headline" id="Codemasters">Codemasters</span></h3>
<p>This is a Markov chain (predictive) algorithm that packs predictions in varying number of bits.
It works on packets measured in whole tiles, and compresses mostly pixel by pixel, making it slow.
<a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=48658#p48658" rel="nofollow">Explained on forum</a>.
</p>
<h4><span class="mw-headline" id="Tokumaru"><span id="Tokumaru">Tokumaru</span></span></h4>
<p>Tokumaru discovered an improvement to the way the frequency tables are changed in Codemasters algorithm,
and <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=54230#p54230" rel="nofollow">released</a> the compressor and decompressor as open source.
And open-source rewrite of the encoder and decoder with slightly better
performance can be downloaded at: <a class="external free" href="http://bisqwit.iki.fi/source/tokumaru.html" rel="nofollow">http://bisqwit.iki.fi/source/tokumaru.html</a>
</p><p>The compressed data begins with a byte that tells how many tiles it encodes. 256 is maximum.
Technically this byte can be ignored, if you already know how many tiles you are going to decode.
</p><p>After the byte, any number of blocks follows. Each block begins with a <i>color description table</i>.
This table tells how to encode transitions between colors in tiles belonging to this block.
</p><p>There are four elements in this table, from 3 to 0, for color <i>n</i>.
Each element begins with a two-bit integer <i>ncolors[n]</i>,
that tells how many different colors that may follow a pixel of this particular color.
After the number of colors, comes a pivot color <i>a</i> that is encoded as follows:
</p>
<table class="wikitable">
<tr>
<th> Value      </th>
<th> Applicable when  </th>
<th> Meaning
</th></tr>
<tr>
<td> nothing    </td>
<td> <i>ncolors[n]=0</i> </td>
<td> No pivot color
</td></tr>
<tr>
<td> 1 bit: 0   </td>
<td> <i>ncolors[n]&gt;0</i> </td>
<td> Pivot color <i>a</i> is 1 if <i>n &lt; 1</i>, 0 otherwise.
</td></tr>
<tr>
<td> 2 bits: 10 </td>
<td> <i>ncolors[n]&gt;0</i> </td>
<td> Pivot color <i>a</i> is 2 if <i>n &lt; 2</i>, 1 otherwise.
</td></tr>
<tr>
<td> 2 bits: 11 </td>
<td> <i>ncolors[n]&gt;0</i> </td>
<td> Pivot color <i>a</i> is 3 if <i>n &lt; 3</i>, 2 otherwise.
</td></tr></table>
<p>The table of transition colors is then calculated using <i>n</i>, <i>a</i>, and the number of colors <i>ncolors[n]</i>.
First, two other colors <i>b</i> and <i>c</i> are calculated. They are the first color indexes that are neither <i>n</i> nor <i>a</i>.
E.g. if <i>a=2</i> and <i>n=1</i>, <i>b</i> and <i>c</i> become 0 and 3 respectively.
</p>
<table class="wikitable">
<tr>
<th> When <i>ncolors[n]</i> is </th>
<th> Table of possible transition colors <i>next[n]</i> is
</th></tr>
<tr>
<td> 0 </td>
<td> []
</td></tr>
<tr>
<td> 1 </td>
<td> [a]
</td></tr>
<tr>
<td> 2 </td>
<td> [b,c]
</td></tr>
<tr>
<td> 3 </td>
<td> [a,b,c]
</td></tr></table>
<p>For compression purposes, ideally <i>ncolors[n]</i> should be chosen to be the numbers of distinct colors
that actually can follow the color <i>n</i>, based on measuring the tile data, and, if <i>ncolors[n]=3</i>,
the pivot color <i>a</i> should be the color that is transitioned into most often from color <i>n</i>.
This transition in tile data will be encoded in two bits, while the other transitions
are encoded in three bits. For other values of <i>ncolors[n]</i>, the choice of pivot color
is mandated by the actual possible colors.
</p><p>After the <i>color description table</i>, comes <i>tile data</i> encoding 16 bytes, or 8√ó8 pixels.
Each tile is comprised of eight <i>rows</i> of pixels.
Each pixel row begins with 1 bit, that tells whether the row is to be copied.
If the bit is set, the previously decoded row is duplicated,
and no other data is encoded for this pixel row.
At the start of the block, the &quot;previously decoded row&quot; is assumed to contain zero bytes.
The previous row is not reset between different tiles, unless a new block begins.
If the bit was clear, eight pixels follow for <i>x</i> coordinates 0 to 7.
Each pixel is encoded as follows, depending on the color <i>c</i> of the previous pixel:
</p>
<table class="wikitable">
<tr>
<th> Value       </th>
<th> Applicable when  </th>
<th> Meaning
</th></tr>
<tr>
<td> 2 bits      </td>
<td> <i>x = 0</i>        </td>
<td> The color of the first pixel <i>c</i> is encoded as a 2-bit integer.
</td></tr>
<tr>
<td> nothing     </td>
<td> <i>ncolors[c]=0</i> </td>
<td> <i>c</i> does not change, and nothing is encoded.
</td></tr>
<tr>
<td> 1 bit: 1    </td>
<td> <i>ncolors[c]&gt;0</i> </td>
<td> <i>c</i> does not change from previous pixel.
</td></tr>
<tr>
<td> 1 bit: 0    </td>
<td> <i>ncolors[c]=1</i> </td>
<td> <i>c</i> becomes <i>next[c][0]</i>.
</td></tr>
<tr>
<td> 2 bits: 00  </td>
<td> <i>ncolors[c]&gt;1</i> </td>
<td> <i>c</i> becomes <i>next[c][0]</i>.
</td></tr>
<tr>
<td> 2 bits: 01  </td>
<td> <i>ncolors[c]=2</i> </td>
<td> <i>c</i> becomes <i>next[c][1]</i>.
</td></tr>
<tr>
<td> 3 bits: 010 </td>
<td> <i>ncolors[c]=3</i> </td>
<td> <i>c</i> becomes <i>next[c][1]</i>.
</td></tr>
<tr>
<td> 3 bits: 011 </td>
<td> <i>ncolors[c]=3</i> </td>
<td> <i>c</i> becomes <i>next[c][2]</i>.
</td></tr></table>
<p>After each full tile, if there are still remaining tiles
to be decoded, comes one bit that tells what comes next.
Value 1 means a new block start, with a new <i>color description table</i>. Value 0 means that more <i>tile data</i> will follow.
</p>
<h2><span class="mw-headline" id="Common_byte">Common byte</span></h2>
<h3><span class="mw-headline" id="Oracle_common_byte">Oracle common byte</span></h3>
<p>This codec, used in <i>The Legend of Zelda: Oracle of Seasons</i> and <i>The Legend of Zelda: Oracle of Ages</i> according to <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=130355#p130355" rel="nofollow">Dwedit</a>, is roughly comparable to RLE in complexity.
For each 16-byte block, the compressor determines the most common byte in that block.
The compressed data for each block starts with a 2-byte mask, then the most common byte, then other bytes in order that aren't the most common.
</p><p>To decode a block: First read the two-byte mask. If the entire mask is zero, set the bit corresponding to the first byte to true. Then read the most common byte.
For each bit in the mask, if the bit is 1, write the most common byte to output; otherwise, copy one byte.
</p><p>Maximum expansion is 12.5% for any block that has 16 different bytes in it: two bytes of mask and 16 bytes of data.
</p>
<h2><span class="mw-headline" id="LZSS">LZSS</span></h2>
<p>A lot of games on platforms after the NES use <a class="extiw" href="https://en.wikipedia.org/wiki/LZ77" title="wikipedia:LZ77">LZ77</a> family compression methods such as <a class="extiw" href="https://en.wikipedia.org/wiki/LZSS" title="wikipedia:LZSS">LZSS</a>, which generalizes run-length encoding to allow copying data from several bytes ago, not just the previous byte.
Few NES games use LZ77 because the NES's limited work RAM and limited access to video memory make it difficult to resolve back references.
(Fewer still use LZW or any other LZ78-based method because of patents that subsisted through the NES, Super NES, and Nintendo 64 eras.)
</p><p>In LZSS, the mask contains 8 commands, each either to copy a literal byte or to copy a back reference. determines whether the next 8 things are literal bytes or back references.
Once all commands have been processed, read another mask.
</p>
<dl><dd>Read a mask byte from input.</dd>
<dd>For each bit in the mask byte:
<dl><dd>If the bit is 0, this is a literal:
<dl><dd>Copy one byte from input to output.</dd></dl></dd>
<dd>Otherwise, this is a back-reference:
<dl><dd>Read and decode a length and distance from input. These will be positive integers.</dd>
<dd>Copy <i>length</i> bytes from the previous output, <i>distance</i> bytes before now, to output.</dd></dl></dd></dl></dd></dl>
<p>LZSS flavors vary mainly in how they encode lengths and distances.
</p>
<h3><span class="mw-headline" id="LZ77UnComp">LZ77UnComp</span></h3>
<p>The BIOS of the Game Boy Advance and Nintendo DS has a built-in decompressor for a straightforward LZSS flavor with 3- to 18-byte references into the previous 4096 bytes of output.
The data format is described in <a class="external text" href="http://problemkaputt.de/gbatek.htm#biosdecompressionfunctions" rel="nofollow">Martin Korth's GBATEK</a>.
</p><p>Caution: In data intended for decompression directly to the GBA or DS video memory, the second byte of a 16-bit word cannot refer to the first byte of the same word.
So the encoder must not write a run with distance 1 that starts at an odd offset.
</p>
<h3><span class="mw-headline" id="Oracle_LZ">Oracle LZ</span></h3>
<p>This flavor of LZSS is used in <i>The Legend of Zelda: Oracle</i> games for Game Boy Color according to <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=130355#p130355" rel="nofollow">Dwedit</a>.
</p><p>An entire compressed block can be compressed with one of two subtypes of Oracle LZ: short word mode and long word mode.
Short words use references of 2 to 8 bytes into the previous 32 bytes of output, and long words use references of 3 to 33 bytes into the previous 2048 bytes.
(A length value of 0 means read an additional byte and use that as the length.)
Only short words would work very well on NES.
</p>
<h3><span class="mw-headline" id="Pok.C3.A9mon_LZ">Pok√©mon LZ</span></h3>
<p>This compression scheme is used in the first-generation Pok√©mon games on the Game Boy. It is used for bitmap compression.
</p><p>A byte n is read and split into two parts: code = n &gt;&gt; 5, and c = n &amp; 0x1F. Byte 0xFF marks the end of the stream.
Otherwise the <i>code</i> is interpreted as follows:
</p>
<table class="wikitable">
<tr>
<th> code  </th>
<th> Meaning
</th></tr>
<tr>
<td> 0 </td>
<td> Copy the next <i>c</i> + 1 bytes to the output.
</td></tr>
<tr>
<td> 1 </td>
<td> Read another byte, and write it to the output <i>c</i> + 1 times.
</td></tr>
<tr>
<td> 2 </td>
<td> Read another byte b1 and byte b2, and write byte b1 to the output <i>c</i> + 1 times, swapping b1 and b2 after each write.
</td></tr>
<tr>
<td> 3 </td>
<td> Write a zero byte (0x00) to the output <i>c</i> + 1 times.
</td></tr>
<tr>
<td> 4 </td>
<td> Read byte b. If b &lt; 0x80, then read byte b2; offset is b√ó256+b2 bytes from the output stream beginning. Else offset = b bytes <i>behind</i> from the current output stream end. Copy <i>c</i> + 1 bytes from the output stream at offset to the output.
</td></tr>
<tr>
<td> 5 </td>
<td> Read byte b. If b &lt; 0x80, then read byte b2; offset is b√ó256+b2 bytes from the output stream beginning. Else offset = b bytes <i>behind</i> from the current output stream end. Copy <i>c</i> + 1 bytes from the output stream at offset to the output, <i>reversing the bits in each byte</i>.
</td></tr>
<tr>
<td> 6 </td>
<td> Read byte b. If b &lt; 0x80, then read byte b2; offset is b√ó256+b2 bytes from the output stream beginning. Else offset = b bytes <i>behind</i> from the current output stream end. Copy <i>c</i> + 1 bytes from the output stream at offset to the output, <i>decrementing the read position after each write</i> (i.e. reverse the data).
</td></tr>
<tr>
<td> 7 </td>
<td> Read another byte b. Change code = (c &gt;&gt; 2), and change c = (c &amp; 3) √ó 256 + b. Re-interpret code according to this table.
</td></tr></table>
<h3><span class="mw-headline" id="Chrono_Trigger_LZ">Chrono Trigger LZ</span></h3>
<p>This compression scheme is used in Square‚Äòs Chrono Trigger for the SNES for compression of graphics and various data.
</p><p>The data consists of packets.
Each packet begins with a 16-bit offset, which gives the packet ending offset relative to the beginning of compressed data. At that offset, there is always a control byte.
The first control byte sets the size of offsets: If the byte is &lt; 0xC0, then <i>offsetsbits</i>=12. Else <i>offsetbits</i>=11. Interpreting the offsetbits is done only once.
The higher-order two bits in the control bytes of all other packets are ignored.
The <i>counter</i> is assigned a default value of 8.
</p><p>The decompression loop goes as follows:
</p>
<ol><li> If the packet end has been reached, a control byte is read, and <i>counter</i> is assigned the low 6 bits of that byte (i.e. <i>counter</i> = byte &amp; 0x3F). If the <i>counter</i> is zero, the decompression is complete and ends there. If the counter was nonzero, a new 16-bit packet end offset is read.</li>
<li> If the end of the packet has not yet been reached, a <i>mask</i> byte is read.
<ul><li> If the mask byte is zero, then next eight bytes are copied verbatim to the output. The counter is not affected.</li>
<li> If the mask byte was nonzero, its each <i>bit</i> is read, beginning from the lowest-order bit. The number of bits to be read is determined by <i>counter</i> (which is in range 1‚Äî63, i.e. it can be both smaller and greater than eight).
<ul><li> If the <i>bit</i> is zero, a single byte is copied verbatim to the output.</li>
<li> If the bit is nonzero, a 16-bit number is read from the input. <i>offset</i> becomes the lowest-order <i>offsetbits</i> from that number, and <i>length</i> is the rest of the bits plus 3. The decompressor copies <i>length</i> bytes from <i>offset</i> bytes behind to the output.</li>
<li> After all bits have been read, the <i>counter</i> is reset to the default value of 8, and the decompression loop continues.</li></ul></li></ul></li></ol>
<h2><span class="mw-headline" id="External_links">External links</span></h2>
<ul><li> <a class="external text" href="https://hbfs.wordpress.com/2009/04/14/ad-hoc-compression-methods-rle/" rel="nofollow">Ad Hoc Compression Methods: RLE</a> describes various pixel-level RLE methods applied to a drawing of a Pok√©mon</li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.137 seconds
Real time usage: 0.139 seconds
Preprocessor visited node count: 85/1000000
Preprocessor generated node count: 92/1000000
Post‚Äêexpand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1387-1!*!0!!en!*!* and timestamp 20160823013227 and revision id 12822
 -->
</div></body></html>
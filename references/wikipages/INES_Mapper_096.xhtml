<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>INES Mapper 096</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>INES Mapper 096</h1><div class="article">
<p><strong class="selflink">iNES Mapper 096</strong> was used with the two games that use the <a href="Oeka_Kids_tablet.xhtml" title="Oeka Kids tablet">Oeka Kids tablet</a>. It is specifically designed to turn the PPU into an all-points-addressable 2bpp bitmap without needing timed code, a scanline counter, or <a href="APU_DMC.xhtml#Usage_of_DMC_for_syncing_to_video" title="APU DMC">audio channel abuse</a>.
</p><p>Games:
</p>
<ul><li> <i>Oeka Kids: Anpanman no Hiragana Daisuki</i></li>
<li> <i>Oeka Kids: Anpanman to Oekaki Shiyou!!</i></li></ul>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Banks"><span class="tocnumber">2</span> <span class="toctext">Banks</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Registers"><span class="tocnumber">3</span> <span class="toctext">Registers</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Outer_Bank_Control_.28CPU_.248000-.24FFFF.29.2C_bus_conflicts"><span class="tocnumber">3.1</span> <span class="toctext">Outer Bank Control (CPU $8000-$FFFF), bus conflicts</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Inner_Bank_Control_.28PPU_.242000-.242FFF.29"><span class="tocnumber">3.2</span> <span class="toctext">Inner Bank Control (PPU $2000-$2FFF)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Hardware"><span class="tocnumber">4</span> <span class="toctext">Hardware</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Disch.27s_Notes"><span class="tocnumber">5</span> <span class="toctext">Disch's Notes</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<ul><li> PRG ROM size: 128 KiB</li>
<li> PRG ROM bank size: 32 KiB</li>
<li> PRG RAM: No</li>
<li> CHR capacity: 32 KiB RAM</li>
<li> CHR bank size: 4 KiB inner / 16 KiB outer</li>
<li> Nametable <a href="Mirroring.xhtml" title="Mirroring">mirroring</a>: Hardwired</li>
<li> Subject to <a href="Bus_conflict.xhtml" title="Bus conflict">bus conflicts</a>: partly</li></ul>
<h2><span class="mw-headline" id="Banks">Banks</span></h2>
<ul><li> CPU $8000-$FFFF: 32 KiB switchable PRG ROM bank</li>
<li> PPU $0000-$0FFF: 4 KiB switchable CHR RAM bank </li>
<li> PPU $1000-$1FFF: 4 KiB semi-fixed CHR RAM bank (banks 3 or 7 only)</li></ul>
<h2><span class="mw-headline" id="Registers">Registers</span></h2>
<h3><span class="mw-headline" id="Outer_Bank_Control_.28CPU_.248000-.24FFFF.29.2C_bus_conflicts">Outer Bank Control (CPU $8000-$FFFF), bus conflicts</span></h3>
<pre>7  bit  0
xxxx xCPP
      |||
      |++- Select 32KiB PRG bank
      +--- Select 16KiB outer CHR bank
</pre>
<h3><span class="mw-headline" id="Inner_Bank_Control_.28PPU_.242000-.242FFF.29">Inner Bank Control (PPU $2000-$2FFF)</span></h3>
<p>No bus conflicts:
</p>
<pre>
13  PPU address  0
 DD xxCC xxxx xxxx
 ||   ||
 ||   ++---------- Select 4 KiB inner CHR RAM bank for PPU $0000-$0FFF
 ++--------------- Latch CC bits when 'DD' changes from anything else to '10'
</pre>
<p>Note that this effect does not pay attention to the PPU read or write strobes; it reacts continuously to all changes of the PPU's address bus.
</p><p>Sprites fetched from PPU $0000-$0FFF will always come from banks 0 or 4 because the CC bits are clear for the sprite dummy nametable fetches.
</p>
<h2><span class="mw-headline" id="Hardware">Hardware</span></h2>
<p>The game uses a <a href="74161.xhtml" title="74161">74161</a>, <a href="7402.xhtml" title="7402">7402</a>, and <s>7474</s>. The 74161 is wired exactly the same as in all of Nintendo's discrete logic mappers, complete with bus conflicts.
</p><p>The 7402 generates the clock signal for the 7474 by calculating <tt>(PPU /A13) NOR (PPU A12)</tt>, which is equivalent to <tt>(PPU A13) AND (PPU /A12)</tt>. On a rising edge of this signal, the 7474 latches the value of <tt>PPU A9</tt> and <tt>PPU A8</tt>, i.e. when the PPU fetches the nametable after having fetched from the pattern tables. Because <tt>PPU /RD</tt> isn't involved and attribute fetches are immediately after nametable fetches, attribute fetches are ignored. Another two NOR gates take these two latched values and produce 4+4F CHR banking.
</p><p>Technically, this banking is NOR logic, not OR logic. This difference is invisible to the software, however. (This means that the fixed bank is actually bank 0 or 4, and that reading from $2000 actually selects bank 3 or 7. The outer bank is not inverted: mapping the 3 C bits above to what actually appears on the RAM's address lines provides the order 3,2,1,0,7,6,5,4)
</p><p>To rephrase: it is the act of changing the PPU address from $0xxx, $1xxx, or $3xxx <i>to</i> $2xxx that latches A9 and A8. There is no special logic that guarantees attribute fetches don't cause bankswitching, and Y scroll values greater than 240 will choose the same bank as reads from any of the rest of $23xx. It is only because of the PPU's fetch pattern that attribute fetches have no impact.
</p>
<h2><span class="mw-headline" id="Disch.27s_Notes">Disch's Notes</span></h2>
<pre> Excerpt from Disch's original notes:  
</pre>
<pre> Long story short:
 
   A nametable spans from $2000-$23BF   ($23C0-$23FF are the attribute table).
   The mapper breaks the NT up like so:
 
      $2000-20FF = use CHR page 0
      $2100-21FF = use CHR page 1
      $2200-22FF = use CHR page 2
      $2300-23BF = use CHR page 3
 
   the other nametables at $2400, $2800, $2C00 are broken up in the same fashion.
 
 
 
 
 Long story long:
 
   PPU Address lines are modified as the PPU fetches tiles, and also when the game manually changes the PPU
 address (via the second write to $2006 --- or by the increment after read/writing $2007).  The mapper
 monitors every change to the PPU Address lines, and when it lies within a certain range, it swaps the
 appropriate CHR page in.
 
   It will only swap CHR when the address falls between $2000-2FFF (or mirrored regions like $6000-6FFF,
 $A000-AFFF, $E000-EFFF).  $3xxx will not trigger a swap.
 
   When in that range, it checks to make sure the address is not attribute tables ((Addr AND $03FF) &lt; $03C0).
 Note I'm not 100% sure if the mapper really does this or not.  It's very possible that attribute fetches will
 also swap CHR... this would not really disrupt anything other than making the game be more careful about its
 PPU writes.
 
   When all that checks out, bits 8 and 9 (Addr AND $0300) select the 4k CHR page to swap in to $0000.
 
 
   Note that the mapper does not distinguish between PPU driven line changes and game driven line changes.
 This means that games can manually swap the CHR page by doing specific writes to $2006:
 
 
 LDA #$20
 STA $2006
 STA $2006   ; Addr set to $20xx -- CHR page 0 selected
 
 LDA #$21
 STA $2006
 STA $2006   ; Addr set to $21xx -- CHR page 1 selected
 
   And in fact, games would HAVE to do that to select CHR, since that's the only way to fill CHR RAM with the
 desired data.  So make sure your emu supports this.
</pre>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li> NES Mapper list by Disch <a class="external autonumber" href="http://www.romhacking.net/documents/362/" rel="nofollow">[1]</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.073 seconds
Real time usage: 0.176 seconds
Preprocessor visited node count: 42/1000000
Preprocessor generated node count: 64/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:682-1!*!0!!en!*!* and timestamp 20160614034023 and revision id 12634
 -->
<p class="categories">Categories: <a href="Category_Discrete_logic_mappers.xhtml">Discrete logic mappers</a>, <a href="Category_Mappers_with_CHR_RAM.xhtml">Mappers with CHR RAM</a>, <a href="Category_INES_Mappers.xhtml">INES Mappers</a>, <a href="Category_In_NesCartDB.xhtml">In NesCartDB</a></p></div></body></html>
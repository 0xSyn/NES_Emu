<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Serial Bootloader</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Serial Bootloader</h1><div class="article">
<p>This page specifies the protocol and behavior of a NES/Famicom bootloader that receives a 256-byte program via a <a href="Serial_Cable_Construction.xhtml" title="Serial Cable Construction"> serial cable</a> connected to a PC. A fully-conforming example implementation that can be tried out is available: <a class="external text" href="http://blargg.8bitalley.com/nes/bootloader-basic-2.zip" rel="nofollow">bootloader-basic-2.zip</a>. A robust, flexible library implementation and size-optimized variations is also available: <a class="external text" href="http://blargg.8bitalley.com/nes/bootloader-lib-0.2.0.zip" rel="nofollow">bootloader-lib-0.2.0.zip</a>.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Program_block_format"><span class="tocnumber">1</span> <span class="toctext">Program block format</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Bootloader_operation"><span class="tocnumber">2</span> <span class="toctext">Bootloader operation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Execution_environment"><span class="tocnumber">3</span> <span class="toctext">Execution environment</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Design_rationale"><span class="tocnumber">4</span> <span class="toctext">Design rationale</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Change_log"><span class="tocnumber">5</span> <span class="toctext">Change log</span></a></li>
</ul>
</div>

<h1><span class="mw-headline" id="Program_block_format">Program block format</span></h1>
<p>A program sent to the bootloader is contained in a single 256-byte program block, consisting of a signature, checksum, and code/data. 
</p>
<table class="tabular">

<tr>
<th> Offset	</th>
<th> Size	</th>
<th> Content
</th></tr>
<tr>
<td> +0		</td>
<td> 3	</td>
<td> Signature: <tt>$DC $4B $D2</tt>
</td></tr>
<tr>
<td> +3		</td>
<td> 1	</td>
<td> CRC (see below for calculation)
</td></tr>
<tr>
<td> +4		</td>
<td> 252	</td>
<td> User code/data, copied to $04-$FF in zero-page
</td></tr></table>
<p>Send program block to NES via serial cable at 57600 bits per second, 8 data bits, no parity, and 1 or 2 stop bits. If there might be other data sent before the block, send at least one $FF byte just before program block data. Hardware wiring is covered in <a href="Serial_Cable_Specification.xhtml" title="Serial Cable Specification">Serial Cable Specification</a>.
</p>
<h1><span class="mw-headline" id="Bootloader_operation">Bootloader operation</span></h1>
<p>The bootloader waits for the signature, receives the checksum and data, verifies the checksum, then executes the program.
</p>
<table class="tabular">

<tr>
<th> Action							</th>
<th> Bytes	</th>
<th> Details
</th></tr>
<tr>
<td> Wait for $DC						</td>
<td> n 		</td>
<td> This skips over any junk data before block
</td></tr>
<tr>
<td> Check for $4B $D2 (optional)		</td>
<td> 2		</td>
<td> If mismatch, go back to first step. This ensures it's a program block rather than a stray $DC. Avoid storing 3-byte signature in code, otherwise bootloader itself might be mistaken for program block when embedded in something being uploaded where the real header at the beginning was missed for some reason.
</td></tr>
<tr>
<td> Receive checksum					</td>
<td> 1		</td>
<td> Either save, ignore, or calculate checksum as data is received
</td></tr>
<tr>
<td> Receive user data					</td>
<td> 252		</td>
<td> Write to zero-page at $04-$FF
</td></tr>
<tr>
<td> Verify checksum (optional)		</td>
<td>			</td>
<td> If checksum is wrong, go back to first step. To verify checksum, clear 8-bit CRC to 0. Then for each of the 256 bytes in order: XOR byte into CRC, shift left 1 bit (with high bit going into carry), and add $99 and carry bit. CRC should equal 0 at end. Code can take up to 8700 cycles to verify CRC (33 per byte).
</td></tr>
<tr>
<td> A = 0 if NTSC						</td>
<td>			</td>
<td> If on NTSC system, clear A, otherwise set to any non-zero value
</td></tr>
<tr>
<td> Begin running program at $0004	</td>
<td> 			</td>
<td> No other register or memory initialization is necessary before running program. In particular, stack pointer and first 4 bytes of zero-page may be left uninitialized.
</td></tr></table>
<h1><span class="mw-headline" id="Execution_environment">Execution environment</span></h1>
<p>A received program begins executing at $04 in zero-page, with nothing initialized except its code/data loaded into $04-$FF, and register A.
</p>
<table class="tabular">

<tr>
<td> PC			</td>
<td> $0004
</td></tr>
<tr>
<td> A				</td>
<td> zero if NTSC, non-zero if PAL
</td></tr>
<tr>
<td> X, Y, P, S	</td>
<td> Uninitialized
</td></tr>
<tr>
<td> $00-$03		</td>
<td> Uninitialized
</td></tr>
<tr>
<td> $04-$FF		</td>
<td> User code/data
</td></tr>
<tr>
<td> $100-$7FF		</td>
<td> Uninitialized
</td></tr></table>
<p>Execution begins no more than 8700 cycles after last byte of program block is received.
</p>
<h1><span class="mw-headline" id="Design_rationale">Design rationale</span></h1>
<p>The design for the bootloader was come to by a fairly exhaustive study of the various forces at work and what they naturally converge to when combined.
</p><p><b>At least 256 bytes:</b> A loader needs to receive a good number of bytes, or else the received program won't be able to do anything useful. It could receive a small number, say 100, but there's no reason not to receive 256 bytes, given 6502 indexing.
</p><p><b>No more than 256 bytes:</b> Beyond 256 bytes, more code is needed on the 6502. This adds quite a few bytes to the loader code. It also leads to the inevitable desire for a custom address and size and support for multiple blocks of data to different regions of memory.
</p><p><b>Load into zero-page:</b> The received program is likely to be a loader itself, albeit more capable than the bootloader. This means that it shouldn't be in a region of memory where further code is loaded. Since most programs use zero-page for variables rather than code, that is an obvious choice. This also allows the received program to be self-modifying and use the more compact zero-page addressing to do so. Finally, the received program can be the first 256 bytes of a larger 512-byte program at 0-$1FF, with the first half receiving the rest of itself beginning at $100.
</p><p>The stack is a possible place to load program, since a PHA can be used to write each byte. But this makes it difficult to do if calling a serial receive routine, as it will overwrite some of the bytes on the stack. It doesn't even reduce code size, since the stack pointer has to be initialized. It also makes the code less clear.
</p><p><b>Checksum of data:</b> The loader must be able to verify that it received the program block without error, so that it doesn't execute corrupt data and produce unpredictable results. Even if the received program tried to checksum itself, the checksum code itself relies on not being corrupt because it otherwise might believe the checksum is correct even when it isn't.
</p><p><b>Signature at beginning:</b> A signature at the beginning allows a loader to ignore any other data it might receive before the program block. The checksum might seem able to handle this, and while it would prevent running the mal-formed block, it would result in the program block being ignored if it had even one extra byte before the beginning. With a signature, the loader can wait until it finds the signature, then receive the rest of the program block, and be able to handle junk data before it without ignoring the program block itself.
</p><p><b>Multi-byte signature:</b> The signature must consist of multiple bytes, not just a single one. This greatly reduces the possibility of random data containing the signature. A two-byte signature is still somewhat likely to occur, while a three-byte signature is extremely unlikely. The particular values for the signature have been chosen after scanning lots of NES code and data for the sequences least likely to occur. The subsets of the signature occur the indicated number of times in a scan of a few hundred megabytes of NES code/data: DC4B:106 times, 4BD2:129 times, DC4BD2:0 times. The least-likely two-byte sequence, D45B, occurred 105 times, but any combinations using it had a higher incidence of the other two-byte portions. The 106 and 129 counts of the byte pairs used are near the minimums.
</p><p><b>8-bit CRC:</b> PC communication with the NES has been very reliable, so a simple 8-bit CRC can be used. The chosen CRC has performance on par with more common LFSR-based ones, but is easier to implement with very little code. Technically it's a <i>non</i>-linear LFSR, since it uses ADC. It detects all one-bit errors, and only misses about one in 200 two-bit errors. Given that even one-bit errors are unlikely, the likelihood of an uncaught multi-bit error is insignificant. The CRC is still useful to catch implementation problems or data corruption by the PC before sending. Several variations on simple NLFSRs were tried, with $99 being the best value to add (a close second was $0C, with slightly better error detection if the data is all zeroes, but otherwise slightly worse than $99).
</p><p><b>Signature and checksum as part of 256 bytes, rather than separate:</b> Fundamentally, a loader must keep track of how many bytes it's received of the program block. If the block is larger than 256 bytes, it must use more than 8 bits to keep track of the position. Handling more than 8 bits requires more code, and prevents keeping the state in a single register. The signature and checksum are thus put into the 256-byte block, rather than added before and after it. This allows a minimal loader to receive exactly 256 bytes and then begin executing, without leaving any unread or having to skip it.
</p><p><b>Program begins at $04 in zero-page:</b> Since the signature and checksum are part of the 256-byte program block, the user code size is reduced below 256 bytes. If user code began at address 0, it wouldn't go all the way to the end of zero-page. So we load the user code at $04 in zero-page, so that it covers all bytes through the end of zero-page. User code can easily receive more code at $100 and have it connect seamlessly. It can then use $00-$03 for variables. A minimal loader can easily achieve this load address by writing the first byte of the program block to $00, so that the program data at offset 4 gets written to $04 in zero-page.
</p><p><b>Signature and checksum at beginning:</b> By putting the extra data at the beginning of the block, the user code/data is at the same offset in the block as it will be in zero-page. This simplifies thinking about loading, removing an unnecessary complication in implementation. It also eliminates the possibility that a bootloader could start executing the program before it's all been received, since the last byte of the block is part of the program rather than the checksum as before. This change didn't increase the size of any of the loaders, though it did require figuring out how to do a CRC calculation from end to beginning in order to calculate the value that would cancel out a normal beginning-to-end calculation to zero.
</p><p><b>Extra time to calculate checksum:</b> The loader is given extra time to calculate the checksum after receiving the data. I's possible for it to calculate the checksum as it's receiving a serial byte, but it's more involved. While this additional time means that the received code must re-synchronize with serial, it must do that <i>anyway</i>, since it already takes enough time to begin executing it that at least one serial byte will be partially lost. Synchronization is trivial: insert several $FF bytes after 256-byte program block, before following data, and then read until a non-$FF byte is received. No matter where the serial code begins waiting for bytes, it will always either miss the current $FF sync byte, or receive it as $FF, never any other value.
</p><p><b>Uninitialized registers on program entry:</b> Not specifying initial register values on entry to the received program means that it can't assume they are cleared. If it needed A, X, and Y clear, it would need four bytes of code to do so. In most causes it might need one cleared, which adds two bytes. Also, many programmers will still clear things at the beginning anyway, just to be more robust.
</p>
<h1><span class="mw-headline" id="Change_log">Change log</span></h1>
<ul><li> Added C code to build a program block in memory.</li>
<li> Added a few more design rationale.</li>
<li> Simplified program block layout, with checksums at beginning. Sorry for breaking it, but this had to be done.</li>
<li> 2010-11-14 Redid everything, in light of feedback and discussion, the need to handle multiple inputs for serial data, and the lack of any real uses bt anyone else. Now has simpler 3-byte signature, 1-byte CRC, and 252 bytes of user data (no more 16-bit CRC, which was way more than needed). Data is transmitted without any bit reversal or complementing.</li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.041 seconds
Real time usage: 0.044 seconds
Preprocessor visited node count: 19/1000000
Preprocessor generated node count: 24/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1287-1!*!0!!en!*!* and timestamp 20160208225826 and revision id 8206
 -->
</div></body></html>
<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Talk:Programming with unofficial opcodes</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Talk:Programming with unofficial opcodes</h1><div class="article">
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Stability_of_ATX"><span class="tocnumber">1</span> <span class="toctext">Stability of ATX</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#NOPs_that_discard_reads"><span class="tocnumber">2</span> <span class="toctext">NOPs that discard reads</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Bus_conflicts_serious_here.3F"><span class="tocnumber">3</span> <span class="toctext">Bus conflicts serious here?</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#ARR_and_AXS_instructions"><span class="tocnumber">4</span> <span class="toctext">ARR and AXS instructions</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Lot_check_for_unofficial_opcodes.3F"><span class="tocnumber">5</span> <span class="toctext">Lot check for unofficial opcodes?</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Stability_of_ATX">Stability of ATX</span></h2>
<p><a class="external text" href="http://anyplatform.net/media/guides/cpus/65xx%20Processor%20Data.txt" rel="nofollow">The reference I'm using</a> lists ATX as &quot;unstable&quot;; I made a point of leaving &quot;unstable&quot; instructions out of a reference for programmers. Furthermore, it states that its behavior might differ between machines. It cites two references agreeing with you but also cites <a class="external text" href="http://nesdev.com/extra_instructions.txt" rel="nofollow">Adam Vardy's document</a>, which calls the instruction &quot;OAL&quot;, claims that it includes ORA #$EE as one of the steps, and further claims that different machines use different values instead of $EE. It might actually be ORA &lt;line noise&gt; AND #i TAX, and predictable only if i = 0 (in which case it's no different from LAX #0). --<a href="User_Tepples.xhtml" title="User:Tepples">Tepples</a> 16:25, 8 February 2011 (UTC)
</p>
<dl><dd> On IRC, kevtris reported that he has seen a constant $FF as the value in the ORA step, which would put ATX with the LAXs. The difference between $EE and $FF might arise from the lack of decimal mode in the 2A03's ALU. But I'd still recommend against using this instruction because different NES consoles may still interpret it differently. --<a href="User_Tepples.xhtml" title="User:Tepples">Tepples</a> 04:05, 11 April 2011 (UTC)</dd></dl>
<p><a class="external free" href="http://visual6502.org/wiki/index.php?title=6502_Opcode_8B_%28XAA,_ANE%29" rel="nofollow">http://visual6502.org/wiki/index.php?title=6502_Opcode_8B_%28XAA,_ANE%29</a> strongly implies weirdness with the $10 and $01 bits on all unstable instructions are due to a different period of analog feedback inside the 6502. <a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> 18:59, 11 April 2011 (UTC)
</p>
<h2><span class="mw-headline" id="NOPs_that_discard_reads">NOPs that discard reads</span></h2>
<p><a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=60734#p60734" rel="nofollow">This was a thread in the forum</a> in the past, but maybe we might mention the side-effect reads (There, the monikers DLD (dummy load) and LDN (load no-op) were suggested, other random possibilities include &quot;LoaD and Discard&quot;). Could one use 'LDD $20FF,X' where X is some multiple of eight to discard two bytes from CHR-ROM, or would that tight of timing screw up the PPU's fetch FSM? —<a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> (<a href="User_talk_Lidnariq.xhtml" title="User talk:Lidnariq">talk</a>) 15:41, 24 August 2013 (MDT)
</p>
<dl><dt>LDD a ($0C aa aa; 4 cycles)</dt>
<dt>LDD a,X ($1C aa aa, $3C aa aa, $5C aa aa, $7C aa aa, $DC aa aa, $FC aa aa; 4 or 5 cycles)</dt>
<dt>LDD d ($04 dd, $44 dd, $64 dd; 3 cycles)</dt>
<dt>LDD d,X ($14 dd, $34 dd, $54 dd, $74 dd, $D4 dd, $F4 dd; 4 cycles)</dt>
<dd> Reads from memory at the specified address. Discards the result. Affects no register nor flags. Only useful for side effects (e.g. PPUADDR increment) so on the NES the zero-page versions are only useful for timing.</dd>
<dd> LDD d,X reads from both <tt>d</tt> and <tt>(d+X)&amp;255</tt>. LDD a,X additionally reads from <tt>a+X-256</tt> it crosses a page boundary (i.e. if <tt>((a &amp; 255) + X) &gt; 255</tt>)</dd>
<dd> Sometimes called TOP (triple-byte no-op), SKW (skip word), DOP (double-byte no-op), or SKB (skip byte).</dd></dl>
<p>Figured I'd format it. —<a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> (<a href="User_talk_Lidnariq.xhtml" title="User talk:Lidnariq">talk</a>) 20:35, 24 August 2013 (MDT)
</p>
<dl><dd>I'd call it IGN (ignore). --<a href="User_Tepples.xhtml" title="User:Tepples">Tepples</a> (<a href="User_talk_Tepples.xhtml" title="User talk:Tepples">talk</a>) 21:04, 24 August 2013 (MDT)</dd></dl>
<h2><span class="mw-headline" id="Bus_conflicts_serious_here.3F">Bus conflicts serious here?</span></h2>
<p>Some distinction should be made between &quot;bad&quot; bus conflicts, e.g. CMOS high versus anything else's low, and benign ones, like a pull-up resistor versus anything. Here it talks of bus conflicts in the unofficial opcodes, but from the sounds of it it's no different stress-wise than how a normal NMOS output works internally when outputting low, where its in &quot;conflict&quot; with the pull-up current source. I think people are (rightly) concerned about intentionally causing bus conflicts, and might be wary of using techniques that cause what they think are the same thing. Maybe calling them stressful bus conflicts and benign bus conflicts would make it clearer. <s>Blargg</s> (<a href="User_talk_Blargg.xhtml" title="User talk:Blargg">talk</a>) 21:36, 6 January 2014 (MST)
</p>
<dl><dd>Yes, I agree that it should be made clear about how potentially damaging it can be or not (but I don't know how it works with unofficial opcodes). If there are resistors then it isn't really a bus conflict but is a default logic. --<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 22:22, 6 January 2014 (MST)
<dl><dd>I have been told that the internal bus conflicts in the CPU aren't dangerous.--<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 22:58, 27 January 2014 (MST)</dd></dl></dd></dl>
<h2><span class="mw-headline" id="ARR_and_AXS_instructions">ARR and AXS instructions</span></h2>
<p>Are these descriptions for ARR and AXS instructions correct? VirtuaNES doesn't emulate them exactly this way nor does any other documentation I can find specify that they work quite this way either. One file says this: &quot;ARR: part of this command are some ADC mechanisms. following effects appear after AND but before ROR: the V-Flag is set according to (A and #{imm})+#{imm}, bit 0 does NOT go into carry, but bit 7 is exchanged with the carry.&quot; and &quot;AXS: performs CMP and DEX at the same time, so that the MINUS sets the flag like CMP, not SBC.&quot; --<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 22:58, 27 January 2014 (MST)
</p>
<dl><dd> The (only) reliable reference is Visual6502 and tests done on a physical NMOS 6502. With that it mind, I tested:</dd>
<dd>$6B(ARR): As far as I can tell, Visual6502 seems to be omitting the AND effect. The rest of the document here agrees with what Visual6502 is doing.</dd>
<dd>$CB(AXS): The document here agrees with what Visual6502 is doing.</dd>
<dd> For both, the writeups you've found are of dubious applicability. The former (ARR) is another way of phrasing the same claims on this page. The latter (AXS) doesn't actually describe the behavior at all, only what lines in the PAL are fired. —<a href="User_Lidnariq.xhtml" title="User:Lidnariq">Lidnariq</a> (<a href="User_talk_Lidnariq.xhtml" title="User talk:Lidnariq">talk</a>) 23:44, 27 January 2014 (MST)
<dl><dd>Of course, that is correct, that the physical NMOS 6502 is the best way to know what it is doing. Why is Visual6502 omitting the AND effect of the $6B instruction (is it a bug in Visual6502)? And you are correct, but I didn't realize it at first. I may have made some mistakes myself in trying it, but it is also possible that some emulators are also defective, or probably both. --<a href="User_Zzo38.xhtml" title="User:Zzo38">Zzo38</a> (<a href="User_talk_Zzo38.xhtml" title="User talk:Zzo38">talk</a>) 00:09, 28 January 2014 (MST)
<dl><dd>A lot of the AND behavior in unofficial instructions arises from bus conflicts, which in NMOS act as AND (lower voltage wins). Perhaps some simulators are less likely to handle bus-conflict ANDs correctly than AND gates made out of transistors. --<a href="User_Tepples.xhtml" title="User:Tepples">Tepples</a> (<a href="User_talk_Tepples.xhtml" title="User talk:Tepples">talk</a>) 16:43, 28 January 2014 (MST)</dd></dl></dd></dl></dd></dl>
<h2><span class="mw-headline" id="Lot_check_for_unofficial_opcodes.3F">Lot check for unofficial opcodes?</span></h2>
<p>&quot;Using the CPU's unofficial opcodes could get your game rejected from Nintendo lot check&quot;
What reason do we have to believe that this is true?
</p><p>I'm trying to imagine how this test would have been performed. Did they build a custom 2A03 CPU that generates an external signal on these opcodes? (Seems impractical.) Did they run your ROM on an emulator? (I doubt emulators at the time were suitable for testing an interactive game like this.) Did they require full source code disclosure? (That would be a highly unorthodox requirement.) I'm straining to think of a plausible method Nintendo would have tested for this. - <a href="User_Rainwarrior.xhtml" title="User:Rainwarrior">Rainwarrior</a> (<s>talk</s>) 08:14, 21 August 2014 (MDT)
</p><p>If you want to explain the dearth of unofficial opcodes in licensed NES games, I don't think you need any extra reason beyond them being largely unknown at the time, and officially discouraged. Even today lots of us avoid using them for the sake of emulator compatibility. The same concern existed then for future hardware revisions. - <a href="User_Rainwarrior.xhtml" title="User:Rainwarrior">Rainwarrior</a> (<s>talk</s>) 08:21, 21 August 2014 (MDT)
</p>
<dl><dd>I have no official evidence, but I do remember having read in <i>Nintendo Power</i> that Nintendo originally intended the Super Famicom to be backward compatible with Family Computer software. I was guessing that back when Nintendo still thought the Super Famicom was going to be backward compatible, it could have tested games with a 65802 (a 65816 in a 6502 pin-compatible package) instead of a 6502. --<a href="User_Tepples.xhtml" title="User:Tepples">Tepples</a> (<a href="User_talk_Tepples.xhtml" title="User talk:Tepples">talk</a>) 12:58, 21 August 2014 (MDT)</dd></dl>

<!-- 
NewPP limit report
CPU time usage: 0.113 seconds
Real time usage: 0.196 seconds
Preprocessor visited node count: 18/1000000
Preprocessor generated node count: 24/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:549-1!*!0!!en!*!* and timestamp 20160603204844 and revision id 12576
 -->
</div></body></html>
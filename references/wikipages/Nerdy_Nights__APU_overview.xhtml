<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Nerdy Nights: APU overview</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Nerdy Nights: APU overview</h1><div class="article">
<p>Music and sound effects on the NES are generated by the <a href="APU.xhtml" title="APU">APU</a> (Audio Processing Unit), the sound chip inside the CPU.
The CPU &quot;talks&quot; to the APU through a series of I/O ports, much like it does with the PPU and joypads.
</p>
<ul><li><a href="PPU_registers.xhtml" title="PPU registers">PPU</a>: $2000-$2007</li>
<li><a href="Standard_controller.xhtml" title="Standard controller">Joypads</a>: $4016-$4017</li>
<li>APU: $4000-$4015, $4017</li></ul>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Channels"><span class="tocnumber">1</span> <span class="toctext">Channels</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Square"><span class="tocnumber">1.1</span> <span class="toctext">Square</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Triangle"><span class="tocnumber">1.2</span> <span class="toctext">Triangle</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Noise"><span class="tocnumber">1.3</span> <span class="toctext">Noise</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#DMC"><span class="tocnumber">1.4</span> <span class="toctext">DMC</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Enabling_channels"><span class="tocnumber">2</span> <span class="toctext">Enabling channels</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Channels">Channels</span></h2>
<p>The APU has 5 channels: Square 1, Square 2, Triangle, Noise and DMC.  The first four play waves and are used in just about every game.  The DMC channel plays samples (pre-recorded sounds) and is used less often.
</p>
<h3><span class="mw-headline" id="Square">Square</span></h3>
<p>The <a href="APU_Pulse.xhtml" title="APU Pulse">square channels</a> produce square waveforms.  A square wave is named for its shape.  It looks like this:
</p>
<pre>+-----------+
|           |
|           |
|           |
|           |
| . . . . . | . . . . . |
            |           |
            |           |
            |           |
            |           |
            +-----------+
</pre>
<p>As you can see the wave transitions instantaneously from its high point to its low point (where the lines are vertical).  This gives it a hollow sound like a woodwind or an electric guitar.
</p>
<h3><span class="mw-headline" id="Triangle">Triangle</span></h3>
<p>The <a href="APU_Triangle.xhtml" title="APU Triangle">triangle channel</a> produces triangle waveforms.  A triangle wave is also named for its shape.  It looks like this:
</p>
<pre>    /\
   /  \
  /    \
 /      \
/ . . . .\ . . . ./
          \      /
           \    /
            \  /
             \/
</pre>
<p>The sound of a triangle wave is smoother and less harsh than a square wave. On the NES, the triangle channel is often used for bass lines (in low octaves) or a flute (in high octaves).  It can also be used for drums.
</p>
<h3><span class="mw-headline" id="Noise">Noise</span></h3>
<p>The <a href="APU_Noise.xhtml" title="APU Noise">noise channel</a> has a random generator, which makes the waves it produces sound like.. noise.  This channel is generally used for percussion and explosion sounds.
</p>
<h3><span class="mw-headline" id="DMC">DMC</span></h3>
<p>The <a href="APU_DMC.xhtml" title="APU DMC">delta modulation channel</a> plays samples, which are pre-recorded sounds.  It is often used to play voice recordings (&quot;Blades of Steel&quot;) and percussion samples.  Samples take up a lot of ROM space, so not many games make use of the DMC channel.
</p>
<h2><span class="mw-headline" id="Enabling_channels">Enabling channels</span></h2>
<p>Before you can use the channels to produce sounds, you need to enable them.  Channels are toggled on and off via port $4015:
</p>
<pre>
7654 3210  APUFLAGS ($4015)
   | ||||
   | |||+- Square 1 (0: disable; 1: enable)
   | ||+-- Square 2
   | |+--- Triangle
   | +---- Noise
   +------ DMC
</pre>
<p>Here are some code examples using $4015 to enable and disable channels:   
</p>
<pre>  lda #%00000001
  sta $4015 ;enable Square 1 channel, disable others

  lda #%00010110
  sta $4015 ;enable Square 2, Triangle and DMC channels.  Disable Square 1 and Noise.

  lda #$00
  sta $4015 ;disable all channels

  lda #$0F
  sta $4015 ;enable Square 1, Square 2, Triangle and Noise channels.  Disable DMC.
            ;this is the most common usage.
</pre>
<p>Try opening up some of your favorite games in FCEUXD SP and set a breakpoint on writes to $4015.  Take a look at what values are getting written there.  If you don't know how to do this, follow these steps:
</p>
<ol><li> Open FCEUXD SP</li>
<li> Load a ROM</li>
<li> Open up the Debugger by pressing F1 or going to Tools-&gt;Debugger</li>
<li> In the top right corner of the debugger, under &quot;BreakPoints&quot;, click the &quot;Add...&quot; button</li>
<li> Type &quot;4015&quot; in the first box after &quot;Address:&quot;</li>
<li> Check the checkbox next to &quot;Write&quot;</li>
<li> Set &quot;Memory&quot; to &quot;CPU Mem&quot;</li>
<li> Leave &quot;Condition&quot; and &quot;Name&quot; blank and click &quot;OK&quot;</li></ol>
<p>Now FCEUX will pause emulation and snap the debugger anytime your game makes a write (usually via STA) to $4015.  The debugger will tell you the contents of the registers at that moment, so you can check what value will be written to $4015.  Some games will write to $4015 every frame, and some only do so once at startup.  Try resetting the game if your debugger isn't snapping.
</p><p>What values are being written to $4015?  Can you tell what channels your game is using?
</p>
<!-- 
NewPP limit report
CPU time usage: 0.032 seconds
Real time usage: 0.034 seconds
Preprocessor visited node count: 26/1000000
Preprocessor generated node count: 48/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:514-1!*!0!!en!*!* and timestamp 20160208225704 and revision id 4233
 -->
<p class="categories">Categories: <a href="Category_APU.xhtml">APU</a></p></div></body></html>
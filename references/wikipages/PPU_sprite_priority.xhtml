<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>PPU sprite priority</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>PPU sprite priority</h1><div class="article">
<p>In the <a href="PPU.xhtml" title="PPU">NES PPU</a>, each sprite has two values that affect <b>priority</b>, or what appears behind what: the index of the sprite within <a href="PPU_OAM.xhtml" title="PPU OAM">OAM</a> (0 to 63), and the priority bit (<a class="mw-redirect" href="PPU.xhtml#Byte_2" title="NES PPU">attribute 2</a> bit 5, set to 0 for front or 1 for back).
</p><p>Putting a back-priority sprite at a lower OAM index than a front-priority sprite can cover up the the front-priority sprite and let the background show through.
<a href="Tricky_to_emulate_games.xhtml" title="Tricky-to-emulate games"><i>Super Mario Bros. 3</i> uses this</a> for power-ups sprouting from blocks, by putting a non-transparent back-priority sprite &quot;behind&quot; the block at a low index and putting the power-up at a higher index.
(You can see the corners of the back-priority sprite when Mario hits a note block in World 1-2, as the note block becomes more squared off.) The advantage of this approach is that the power-up can be hidden behind the block and still have front priority, meaning the area above the block doesn't have to be pure bg pixels like in Super Mario Bros.
</p><p>The Nintendo DS PPU handles priority the &quot;obvious&quot; way,<a class="external autonumber" href="http://problemkaputt.de/gbatek.htm#dsvideoobjs" rel="nofollow">[1]</a> and some NES emulator developers initially think the NES PPU handles it the same way:
</p>
<ol><li> Front priority sprites in front</li>
<li> The background plane in the middle</li>
<li> Back priority sprites in back </li></ol>
<p>What really happens in the NES PPU is conceptually more like this:
</p>
<ol><li> During <a href="PPU_sprite_evaluation.xhtml" title="PPU sprite evaluation">sprite evaluation</a> for each scanline (cycles 65 through 240), the PPU searches for the eight frontmost sprites on this line. Then during sprite pattern fetch (cycles 257 to 320), these eight sprites get drawn front (lower index) to back (higher index) into a buffer, taking only the first opaque pixel that matches each X coordinate. Priority does not affect ordering in this buffer but is saved with each pixel.</li>
<li> The background gets drawn to a separate buffer.</li>
<li> For each pixel in the background buffer, the corresponding sprite pixel replaces it only if the sprite pixel is opaque and front priority or if the background pixel is transparent.</li></ol>
<p>The buffers don't actually exist as full-scanline buffers inside the PPU but instead as a set of counters and shift registers. The above logic is implemented a pixel at a time, as <a href="PPU_rendering.xhtml" title="PPU rendering">PPU rendering</a> explains.
</p>
<h2><span class="mw-headline" id="Detailed_internals_of_the_sprite_priority_quirk">Detailed internals of the sprite priority quirk</span></h2>
<p>During sprite evaluation the PPU copies the sprites that are in y range from the primary to the secondary OAM, from which eight internal sprite output units are then initialized. These sprite output units are wired such that the lowest-numbered unit that outputs a non-transparent pixel always wins, regardless of front/back sprite priority and regardless of what the background pixel at the corresponding location is.
</p><p>Hence, when a back-priority sprite is hidden behind non-bg background pixels, it will still hide output from higher-numbered sprite output units wherever it has a non-transparent pixel.
</p>
<!-- 
NewPP limit report
CPU time usage: 0.030 seconds
Real time usage: 0.032 seconds
Preprocessor visited node count: 3/1000000
Preprocessor generated node count: 8/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:55-1!*!0!*!*!*!* and timestamp 20160622201004 and revision id 12667
 -->
</div></body></html>
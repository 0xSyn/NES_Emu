<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>APU</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>APU</h1><div class="article">
<p>The NES <b>APU</b> is the <b>audio processing unit</b> in the NES console which generates sound for games. It is implemented in the RP2A03 (NTSC) and RP2A07 (PAL) chips. Its <a href="APU_registers.xhtml" title="APU registers">registers</a> are mapped in the range $4000-$4013, $4015 and $4017.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Conditions_for_channel_output"><span class="tocnumber">1.1</span> <span class="toctext">Conditions for channel output</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Notes"><span class="tocnumber">1.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Specification"><span class="tocnumber">2</span> <span class="toctext">Specification</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Registers"><span class="tocnumber">2.1</span> <span class="toctext">Registers</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Pulse_.28.244000-4007.29"><span class="tocnumber">2.2</span> <span class="toctext">Pulse ($4000-4007)</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Triangle_.28.244008-400B.29"><span class="tocnumber">2.3</span> <span class="toctext">Triangle ($4008-400B)</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Noise_.28.24400C-400F.29"><span class="tocnumber">2.4</span> <span class="toctext">Noise ($400C-400F)</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#DMC_.28.244010-4013.29"><span class="tocnumber">2.5</span> <span class="toctext">DMC ($4010-4013)</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="#Other_Uses"><span class="tocnumber">2.5.1</span> <span class="toctext">Other Uses</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="#Status_.28.244015.29"><span class="tocnumber">2.6</span> <span class="toctext">Status ($4015)</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Frame_Counter_.28.244017.29"><span class="tocnumber">2.7</span> <span class="toctext">Frame Counter ($4017)</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="#Length_Counter"><span class="tocnumber">2.7.1</span> <span class="toctext">Length Counter</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="#Mixer"><span class="tocnumber">2.8</span> <span class="toctext">Mixer</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="#Glossary"><span class="tocnumber">3</span> <span class="toctext">Glossary</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>The APU has five channels: two pulse wave generators, a triangle wave, noise, and a delta modulation channel for playing DPCM samples.
</p><p>Each channel has a variable-rate timer clocking a waveform generator, and various modulators driven by low-frequency clocks from the <a href="#Frame_Counter_.28.244017.29">frame counter</a>. The <a href="#DMC_.28.244010-4013.29">DMC</a> plays samples while the other channels play waveforms. Each sub-unit of a channel generally runs independently and in parallel to other units, and modification of a channel's parameter usually affects only one sub-unit and doesn't take effect until that unit's next internal cycle begins.
</p><p>The read/write <a href="#Status_.28.244015.29">status register</a> allows channels to be enabled and disabled, and their current <a href="#Length_Counter">length counter status</a> to be queried.
</p><p>The outputs from all the channels are combined using a <a href="APU_Mixer.xhtml" title="APU Mixer">non-linear mixing</a> scheme.
</p>
<h3><span class="mw-headline" id="Conditions_for_channel_output">Conditions for channel output</span></h3>
<p>The pulse, triangle, and noise channels will play their corresponding waveforms (at either a constant volume or at a volume controlled by an <a href="APU_Envelope.xhtml" title="APU Envelope">envelope</a>) only when (and in the model given here, <i>precisely</i> when) their <a href="#Length_Counter">length counters</a> are all non-zero (this includes the linear counter for the triangle channel). There are two exceptions for the pulse channels, which can also be silenced either by having a frequency above a certain threshold (see below), or by a <a href="APU_Sweep.xhtml" title="APU Sweep">sweep</a> towards lower frequencies (longer periods) reaching the end of the range.
</p><p>The DMC channel always outputs the value of its counter, regardless of the status of the DMC enable bit; the enable bit only controls automatic playback of delta-encoded samples (which is done through counter updates).
</p>
<h3><span class="mw-headline" id="Notes">Notes</span></h3>
<ul><li> This reference describes the <i>abstract</i> operation of the APU. The <i>exact</i> hardware implementation is not necessarily relevant to an emulator, but the <a class="external text" href="http://www.qmtpro.com/~nes/chipimages/visual2a03/" rel="nofollow">Visual 2A03</a> project can be used to determine detailed information about the hardware implementation.</li></ul>
<ul><li> The <a href="Famicom.xhtml" title="Famicom">Famicom</a> had an audio return loop on its <a href="Cartridge_connector.xhtml" title="Cartridge connector">cartridge connector</a> allowing extra audio from individual cartridges. See <a href="Category_Expansion_audio.xhtml" title="Category:Expansion audio">Expansion audio</a> for details on the audio produced by various <a href="Mapper.xhtml" title="Mapper">mappers</a>.</li></ul>
<ul><li> For a basic usage guide to the APU, see <a href="APU_basics.xhtml" title="APU basics">APU basics</a>, or <a href="Nerdy_Nights__APU_overview.xhtml" title="Nerdy Nights: APU overview">Nerdy Nights: APU overview</a>.</li></ul>
<ul><li> The APU may have additional diagnostic features if CPU pin 30 is pulled high. See <a href="File_Apu_address_jpg.xhtml" title="File:Apu address.jpg">diagram by Quietust</a>.</li></ul>
<h2><span class="mw-headline" id="Specification">Specification</span></h2>
<h3><span class="mw-headline" id="Registers">Registers</span></h3>
<ul><li> See <a href="APU_registers.xhtml" title="APU registers">APU Registers</a> for a complete APU register diagram.</li></ul>
<table class="tabular">
<tr>
<th> Registers </th>
<th> Channel </th>
<th> Units
</th></tr>
<tr>
<th> $4000-$4003
</th>
<td> <a href="#Pulse_.28.244000-4007.29">Pulse 1</a> </td>
<td> Timer, <a href="#Length_Counter">length counter</a>, <a href="APU_Envelope.xhtml" title="APU Envelope">envelope</a>, <a href="APU_Sweep.xhtml" title="APU Sweep">sweep</a>
</td></tr>
<tr>
<th> $4004-$4007
</th>
<td> <a href="#Pulse_.28.244000-4007.29">Pulse 2</a> </td>
<td> Timer, <a href="#Length_Counter">length counter</a>, <a href="APU_Envelope.xhtml" title="APU Envelope">envelope</a>, <a href="APU_Sweep.xhtml" title="APU Sweep">sweep</a>
</td></tr>
<tr>
<th> $4008-$400B
</th>
<td> <a href="#Triangle_.28.244008-400B.29">Triangle</a> </td>
<td> Timer, <a href="#Length_Counter">length counter</a>, linear counter
</td></tr>
<tr>
<th> $400C-$400F
</th>
<td> <a href="#Noise_.28.24400C-400F.29">Noise</a> </td>
<td> Timer, <a href="#Length_Counter">length counter</a>, <a href="APU_Envelope.xhtml" title="APU Envelope">envelope</a>, linear feedback shift register
</td></tr>
<tr>
<th> $4010-$4013
</th>
<td> <a href="#DMC_.28.244010-4013.29">DMC</a> </td>
<td> Timer, memory reader, sample buffer, output unit
</td></tr>
<tr>
<th> $4015
</th>
<td> All </td>
<td> <a href="#Status_.28.244015.29">Channel enable and length counter status</a>
</td></tr>
<tr>
<th> $4017
</th>
<td> All </td>
<td> <a href="#Frame_Counter_.28.244017.29">Frame counter</a>
</td></tr></table>
<h3><span class="mw-headline" id="Pulse_.28.244000-4007.29">Pulse ($4000-4007)</span></h3>
<ul><li> See <a href="APU_Pulse.xhtml" title="APU Pulse">APU Pulse</a></li></ul>
<p>The pulse channels produce a variable-width pulse signal, controlled by volume, envelope, length, and sweep units.
</p>
<table class="tabular">
<tr>
<th> $4000 / $4004
</th>
<td> <tt>DDLC VVVV</tt> </td>
<td> Duty (D), envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)
</td></tr>
<tr>
<th> $4001 / $4005
</th>
<td> <tt>EPPP NSSS</tt> </td>
<td> Sweep unit: enabled (E), period (P), negate (N), shift (S)
</td></tr>
<tr>
<th> $4002 / $4006
</th>
<td> <tt>TTTT TTTT</tt> </td>
<td> Timer low (T)
</td></tr>
<tr>
<th> $4003 / $4007
</th>
<td> <tt>LLLL LTTT</tt> </td>
<td> Length counter load (L), timer high (T)
</td></tr></table>
<ul><li> The frequency of the pulse channels is a division of the <a href="Clock_rate.xhtml" title="Clock rate">CPU Clock</a> (1.789773MHz NTSC, 1.662607MHz PAL). The output frequency (f) of the generator can be determined by the 11-bit period value (t) written to $4002-4003/$4006-4007. If t &lt; 8, the corresponding pulse channel is silenced.</li></ul>
<pre>f = CPU / (16 * (t + 1))
t = (CPU / (16 * f)) - 1
</pre>
<ul><li> The width of the pulse is controlled by the duty bits in $4000/4004. See <a href="APU_Pulse.xhtml" title="APU Pulse">APU Pulse</a> for details.</li></ul>
<ul><li> The channel volume is a 4-bit value that is either constant, or controlled by an envelope (chosen by $4000/4004 bit 4). If using the envelope, the 4-bit value in $4000/4004 is the period of the envelope, otherwise it is the direct volume.</li></ul>
<ul><li> The length counter and envelope units are clocked by the <a href="#Frame_Counter">frame counter</a>. If the envelope is not looped, the length counter must be enabled (making it redundant if longer than the envelope). The length counter simply silences the channel when it counts down to 0. The envelope starts at a volume of 15 and decrements every time the unit is clocked, stopping at 0 if not looped.</li></ul>
<ul><li> Writing to $4003/4007 reloads the length counter, restarts the envelope, and resets the phase of the pulse generator. Because it resets phase, vibrato should only write the low timer register to avoid a phase reset click. At some pitches, particularly near A440, wide vibrato should normally be avoided (e.g. this flaw is heard throughout the Mega Man 2 ending).</li></ul>
<ul><li> Registers $4001/4005 control the sweep unit. Enabling the sweep causes the pitch to constantly rise or fall. When the frequency reaches the end of the generator's range of output the channel is silenced. See <a href="APU_Sweep.xhtml" title="APU Sweep">APU Sweep</a> for details.</li></ul>
<ul><li> The two pulse channels are combined in a nonlinear mix (see <a href="#Mixer">mixer</a> below).</li></ul>
<h3><span class="mw-headline" id="Triangle_.28.244008-400B.29">Triangle ($4008-400B)</span></h3>
<ul><li> See <a href="APU_Triangle.xhtml" title="APU Triangle">APU Triangle</a></li></ul>
<p>The triangle channel produces a quantized triangle wave. It has no volume control, but it has a length counter as well as a higher resolution linear counter control (called &quot;linear&quot; since it uses the 7-bit value written to $4008 directly instead of a lookup table like the length counter).
</p>
<table class="tabular">
<tr>
<th> $4008
</th>
<td> <tt>CRRR RRRR</tt> </td>
<td> Length counter halt / linear counter control (C), linear counter load (R)
</td></tr>
<tr>
<th> $4009
</th>
<td> <tt>---- ----</tt> </td>
<td> Unused
</td></tr>
<tr>
<th> $400A
</th>
<td> <tt>TTTT TTTT</tt> </td>
<td> Timer low (T)
</td></tr>
<tr>
<th> $400B
</th>
<td> <tt>LLLL LTTT</tt> </td>
<td> Length counter load (L), timer high (T)
</td></tr></table>
<ul><li> The triangle wave has 32 steps that output a 4-bit value.</li></ul>
<ul><li> The linear counter control will silence the channel after a specified time with a resolution of 240Hz in NTSC (see <a href="#Frame_Counter">frame counter</a> below). It shares a control bit with the length counter in $4008, which means that they are always enabled at the same time, and whichever is longer is redundant. See <a href="APU_Triangle.xhtml" title="APU Triangle">APU Triangle</a> for more linear counter details.</li></ul>
<ul><li> The pitch of the triangle channel is one octave below the pulse channels with an equivalent timer value (i.e. use the formula above but divide the resulting frequency by two).</li></ul>
<ul><li> Silencing the triangle channel merely halts it. It will continue to output its last value, rather than 0.</li></ul>
<ul><li> There is no way to reset the triangle channel's phase.</li></ul>
<h3><span class="mw-headline" id="Noise_.28.24400C-400F.29">Noise ($400C-400F)</span></h3>
<ul><li> See <a href="APU_Noise.xhtml" title="APU Noise">APU Noise</a></li></ul>
<p>The noise channel produces noise with a pseudo-random bit generator.
It has a volume, envelope, and length counter like the pulse channels.
</p>
<table class="tabular">
<tr>
<th> $400C
</th>
<td> <tt>--LC VVVV</tt> </td>
<td> Envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)
</td></tr>
<tr>
<th> $400D
</th>
<td> <tt>---- ----</tt> </td>
<td> Unused
</td></tr>
<tr>
<th> $400E
</th>
<td> <tt>L--- PPPP</tt> </td>
<td> Loop noise (L), noise period (P)
</td></tr>
<tr>
<th> $400F
</th>
<td> <tt>LLLL L---</tt> </td>
<td> Length counter load (L)
</td></tr></table>
<ul><li> The frequency of the noise is determined by a 4-bit value in $400E, which loads a period from a lookup table (see <a href="APU_Noise.xhtml" title="APU Noise">APU Noise</a>).</li></ul>
<ul><li> If bit 7 of $400E is set, the period of the random bit generation is drastically shortened, producing a buzzing tone (e.g. the metalic ding during Solstice's gameplay). The actual timbre produced depends on whatever bits happen to be in the generator when it is switched to periodic, and is somewhat random.</li></ul>
<h3><span class="mw-headline" id="DMC_.28.244010-4013.29">DMC ($4010-4013)</span></h3>
<ul><li> See <a href="APU_DMC.xhtml" title="APU DMC">APU DMC</a></li></ul>
<p>The delta modulation channel outputs a 7-bit PCM signal from a counter that can be driven by DPCM samples.
</p>
<table class="tabular">
<tr>
<th> $4010
</th>
<td> <tt>IL-- RRRR</tt> </td>
<td> IRQ enable (I), loop (L), frequency (R)
</td></tr>
<tr>
<th> $4011
</th>
<td> <tt>-DDD DDDD</tt> </td>
<td> Load counter (D)
</td></tr>
<tr>
<th> $4012
</th>
<td> <tt>AAAA AAAA</tt> </td>
<td> Sample address (A)
</td></tr>
<tr>
<th> $4013
</th>
<td> <tt>LLLL LLLL</tt> </td>
<td> Sample length (L)
</td></tr></table>
<ul><li> DPCM samples are stored as a stream of 1-bit deltas that control the 7-bit PCM counter that the channel outputs. A bit of 1 will increment the counter, 0 will decrement, and it will clamp rather than overflow if the 7-bit range is exceeded.</li></ul>
<ul><li> DPCM samples may loop if the loop flag in $4010 is set, and the DMC may be used to generate an IRQ when the end of the sample is reached if its IRQ flag is set.</li></ul>
<ul><li> The playback rate is controlled by register $4010 with a 4-bit frequency index value (see <a href="APU_DMC.xhtml" title="APU DMC">APU DMC</a> for frequency lookup tables).</li></ul>
<ul><li> DPCM samples must begin in the memory range $C000-FFFF at an address set by register $4012 (address = %11AAAAAA.AA000000).</li></ul>
<ul><li> The length of the sample in bytes is set by register $4013 (length = %LLLL.LLLL0001).</li></ul>
<h4><span class="mw-headline" id="Other_Uses">Other Uses</span></h4>
<ul><li> The $4011 register can be used to play PCM samples directly by setting the counter value at a high frequency. Because this requires intensive use of the CPU, when used in games all other gameplay is usually halted to facilitate this.</li></ul>
<ul><li> Because of the APU's <a href="#Mixer">nonlinear mixing</a>, a high value in the PCM counter reduces the volume of the triangle and noise channels. This is sometimes used to apply limited volume control to the triangle channel (e.g. Super Mario Bros. adjusts the counter between levels to accomplish this).</li></ul>
<ul><li> The DMC's IRQ can be used as an IRQ based timer when the <a href="Mapper.xhtml" title="Mapper">mapper</a> used does not have one available.</li></ul>
<h3><span class="mw-headline" id="Status_.28.244015.29">Status ($4015)</span></h3>
<p>The status register is used to enable and disable individual channels, control the DMC, and can
read the status of length counters and APU interrupts.
</p>
<table class="tabular">
<tr>
<th> $4015 write
</th>
<td> <tt>---D NT21</tt> </td>
<td> Enable DMC (D), noise (N), triangle (T), and pulse channels (2/1)
</td></tr></table>
<ul><li> Writing a zero to any of the channel enable bits will silence that channel and immediately set its length counter to 0.</li>
<li> If the DMC bit is clear, the DMC bytes remaining will be set to 0 and the DMC will silence when it empties.</li>
<li> If the DMC bit is set, the DMC sample will be restarted <i>only if</i> its bytes remaining is 0. If there are bits remaining in the 1-byte sample buffer, these will finish playing before the next sample is fetched.</li>
<li> Writing to this register clears the DMC interrupt flag.</li>
<li> <a href="CPU_power_up_state.xhtml" title="CPU power up state">Power-up and reset</a> have the effect of writing $00, silencing all channels.</li></ul>
<table class="tabular">
<tr>
<th> $4015 read
</th>
<td> <tt>IF-D NT21</tt> </td>
<td> DMC interrupt (I), frame interrupt (F), DMC active (D), length counter &gt; 0 (N/T/2/1)
</td></tr></table>
<ul><li> N/T/2/1 will read as 1 if the corresponding length counter is greater than 0. For the triangle channel, the status of the linear counter is irrelevant.</li>
<li> D will read as 1 if the DMC bytes remaining is more than 0.</li>
<li> Reading this register clears the frame interrupt flag (but not the DMC interrupt flag).</li>
<li> If an interrupt flag was set at the same moment of the read, it will read back as 1 but it will <i>not</i> be cleared.</li></ul>
<h3><span class="mw-headline" id="Frame_Counter_.28.244017.29">Frame Counter ($4017)</span></h3>
<ul><li> See <a href="APU_Frame_Counter.xhtml" title="APU Frame Counter">APU Frame Counter</a></li></ul>
<table class="tabular">
<tr>
<th> $4017
</th>
<td> <tt>MI-- ----</tt> </td>
<td> Mode (M, 0 = 4-step, 1 = 5-step), IRQ inhibit flag (I)
</td></tr></table>
<p>The frame counter is controlled by register $4017, and it drives the envelope, sweep, and length units on the pulse, triangle and noise channels. It ticks approximately 4 times per frame (240Hz NTSC), and executes either a 4 or 5 step sequence, depending how it is configured. It may optionally issue an <a href="IRQ.xhtml" title="IRQ">IRQ</a> on the last tick of the 4 step sequence.
</p><p>The following diagram illustrates the two modes, selected by bit 7 of $4017:
</p>
<pre>mode 0:    mode 1:       function
---------  -----------  -----------------------------
 - - - f    - - - - -    IRQ (if bit 6 is clear)
 - l - l    l - l - -    Length counter and sweep
 e e e e    e e e e -    Envelope and linear counter
</pre>
<p>Both the 4 and 5-step modes operate at the same rate, but because the 5-step mode has an extra step, the effective update rate for individual units is slower in that mode (total update taking ~60Hz vs ~48Hz in NTSC). Writing to $4017 will restart the sequence almost immediately (2 or 3 CPU cycles delay). Writing $4017 with bit 7 set will immediately clock all of its controlled units at the beginning of the 5-step sequence, but with bit 7 clear only the sequence is reset without clocking any of its units.
</p><p>Note that the frame counter is not exactly synchronized with the PPU <a href="NMI.xhtml" title="NMI">NMI</a>; it runs independently at a consistent rate which is approximately 240Hz (NTSC). Some games (e.g. Super Mario Bros., Zelda) manually synchronize it by writing $C0 or $FF to $4017 once per frame.
</p>
<h4><span class="mw-headline" id="Length_Counter">Length Counter</span></h4>
<ul><li> See <a href="APU_Length_Counter.xhtml" title="APU Length Counter">APU Length Counter</a></li></ul>
<p>The pulse, triangle, and noise channels each have their own length counter unit. It is clocked twice per sequence, and counts down to zero if enabled. When the length counter reaches zero the channel is silenced. It is reloaded by writing a 5-bit value to the appropriate channel's length counter register, which will load a value from a lookup table. (See <a href="APU_Length_Counter.xhtml" title="APU Length Counter">APU Length Counter</a> for the table.)
</p><p>The triangle channel has an additional <b>linear counter</b> unit which is clocked four times per sequence (like the envelope of the other channels). It functions independently of the length counter, and will also silence the triangle channel when it reaches zero.
</p>
<h3><span class="mw-headline" id="Mixer">Mixer</span></h3>
<ul><li> See <a href="APU_Mixer.xhtml" title="APU Mixer">APU Mixer</a></li></ul>
<p>The APU audio output signal comes from two separate components. The pulse channels are output on one pin, and the triangle/noise/DMC are output on another, after which they are combined. Each of these channels has its own nonlinear DAC. For details, see <a href="APU_Mixer.xhtml" title="APU Mixer">APU Mixer</a>.
</p><p>After combining the two output signals, the final signal may go through a lowpass and highpass filter. For instance, RF demodulation in televisions usually results in a strong lowpass. The NES' RCA output circuitry has a more mild lowpass filter.
</p>
<h2><span class="mw-headline" id="Glossary">Glossary</span></h2>
<ul><li> All <strong class="selflink">APU</strong> channels have some form of frequency control. The term <b>frequency</b> is used where larger register value(s) correspond with higher frequencies, and the term <b>period</b> is used where smaller register value(s) correspond with higher frequencies.</li></ul>
<ul><li> In the block diagrams, a <b>gate</b> takes the input on the left and outputs it on the right, unless the control input on top tells the gate to ignore the input and always output 0.</li></ul>
<ul><li> Some <strong class="selflink">APU</strong> units use one or more of the following building blocks:</li></ul>
<dl><dd><ul><li> A <b>divider</b> outputs a clock periodically. It contains a period reload value, P, and a counter, that starts at P. When the divider is clocked, if the counter is currently 0, it is reloaded with P and generates an output clock, otherwise the counter is decremented. In other words, the divider's period is P + 1.</li></ul></dd></dl>
<dl><dd><ul><li> A divider can also be forced to reload its counter immediately (counter = P), but this <i>does not</i> output a clock. Similarly, changing a divider's period reload value <i>does not</i> affect the counter.</li></ul></dd></dl>
<dl><dd><ul><li> A divider may be implemented as a down counter (5, 4, 3, ...) or as a <a class="extiw" href="http://en.wikipedia.org/wiki/linear_feedback_shift_register" title="wikipedia:linear feedback shift register">linear feedback shift register</a> (LFSR). The dividers in the pulse and triangle channels are linear down-counters. The dividers for noise, DMC, and the APU Frame Counter are implemented as LFSRs to save gates compared to the equivalent down counter.</li></ul></dd></dl>
<dl><dd><ul><li> A <b>sequencer</b> continuously loops over a sequence of values or events. When clocked, the next item in the sequence is generated.</li></ul></dd></dl>
<dl><dd><ul><li> A <b>timer</b> is used in each of the five channels to control the sound frequency. It contains a divider which is clocked by the <a href="CPU.xhtml" title="CPU">CPU</a> clock. The triangle channel's timer is clocked on every CPU cycle, but the pulse, noise, and DMC timers are clocked only on every second CPU cycle and thus produce only even periods.</li></ul></dd></dl>
<h2><span class="mw-headline" id="References">References</span></h2>
<ul><li> <a class="external text" href="http://nesdev.com/apu_ref.txt" rel="nofollow">Blargg's NES APU Reference</a>.</li>
<li> <a class="external text" href="http://nesdev.com/2A03%20technical%20reference.txt" rel="nofollow">Brad Taylor's 2A03 Technical Reference</a>.</li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.140 seconds
Real time usage: 0.145 seconds
Preprocessor visited node count: 63/1000000
Preprocessor generated node count: 68/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:174-1!*!0!!en!*!* and timestamp 20160208220107 and revision id 9571
 -->
<p class="categories">Categories: <a href="Category_APU.xhtml">APU</a></p></div></body></html>
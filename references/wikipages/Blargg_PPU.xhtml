<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Blargg PPU</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Blargg PPU</h1><div class="article">
<p><i>Just a rough attempt at striking the right detail level for the main PPU documentation. Posting here (rather than just previewing a local copy) in case someone wants to get an idea of what I'm trying.</i>
</p>
<h2><span class="mw-headline" id="Pattern_tables">Pattern tables</span></h2>
<p>The background and sprites are drawn using small 8x8 pixel images called tiles. There are 512 tiles total, arranged in two pattern tables, each holding 256 tiles. A tile takes 16 bytes of memory, with 2 bits per pixel. The pixels are stored as two bit planes, each 8 bytes. Each byte of a plane represents one row of the tile, with the most significant bit representing the left-hand pixel. The first plane specifies the least significant bit of each pixel. A pixel value of 0 is transparent, while 1, 2, and 3 specify a color from one of the sub-palettes.
</p>
<h2><span class="mw-headline" id="Palette">Palette</span></h2>
<p>The colors of bckground and sprite pixels are determined by the palette. It consists of 8 sub-palettes; the first four for the background and the remaining four for the sprites. Each sub-palette specifies the colors for tile pixel values of 1 to 3.
</p><p>The palette uses 32 bytes of VRAM starting at $3F00, with each sub-palette using 4 bytes. Normally the first entry of each sub-palette is ignored, except for the first entry of the first sub-palette, which specifies the backdrop color.
</p>
<table border="1" cellpadding="3" cellspacing="0">

<tr>
<td> $3F00<br/>Backdrop </td>
<td> $3F01<br/>Color 1 </td>
<td> $3F02<br/>Color 2 </td>
<td> $3F03<br/>Color 3 </td>
<td> Background sub-palette 0
</td></tr>
<tr>
<td> $3F04<br/>Unused </td>
<td> $3F05<br/>Color 1 </td>
<td> $3F06<br/>Color 2 </td>
<td> $3F07<br/>Color 3 </td>
<td> Background sub-palette 1
</td></tr>
<tr>
<td> $3F08<br/>Unused </td>
<td> $3F09<br/>Color 1 </td>
<td> $3F0A<br/>Color 2 </td>
<td> $3F0B<br/>Color 3 </td>
<td> Background sub-palette 2
</td></tr>
<tr>
<td> $3F0C<br/>Unused </td>
<td> $3F0D<br/>Color 1 </td>
<td> $3F0E<br/>Color 2 </td>
<td> $3F0F<br/>Color 3 </td>
<td> Background sub-palette 3
</td></tr>
<tr>
<td> $3F10<br/>Backdrop mirror </td>
<td> $3F11<br/>Color 1 </td>
<td> $3F12<br/>Color 1 </td>
<td> $3F13<br/>Color 1 </td>
<td> Sprite sub-palette 0
</td></tr>
<tr>
<td> $3F14<br/>Unused </td>
<td> $3F15<br/>Color 1 </td>
<td> $3F16<br/>Color 2 </td>
<td> $3F17<br/>Color 3 </td>
<td> Sprite sub-palette 1
</td></tr>
<tr>
<td> $3F18<br/>Unused </td>
<td> $3F19<br/>Color 1 </td>
<td> $3F1A<br/>Color 2 </td>
<td> $3F1B<br/>Color 3 </td>
<td> Sprite sub-palette 2
</td></tr>
<tr>
<td> $3F1C<br/>Unused </td>
<td> $3F1D<br/>Color 1 </td>
<td> $3F1E<br/>Color 2 </td>
<td> $3F1F<br/>Color 3 </td>
<td> Sprite sub-palette 3
</td></tr></table>
<p>Note that $3F00 and $3F10 both set the backdrop color; these two memory locations actually access the same byte of memory. This must be kept in mind when writing to sprite sub-palette 0.
</p><p>Each palette entry is only 6 bits. The upper 2 bits specify brightness, and the lower 4 hue:
</p>
<table border="1" cellpadding="3" cellspacing="0">

<tr>
<th>Palette entry
</th>
<td><tt>--BB HHHH</tt>
</td>
<th align="left"> Brightness and Hue
</th></tr>
<tr>
<td> bits 0-3 </td>
<td> <tt>---- HHHH</tt>
</td>
<td> Hue
</td></tr>
<tr>
<td> bits 4-5 </td>
<td> <tt>--BB ----</tt>
</td>
<td> Brightness
</td></tr></table>
<p>[palette goes here, which shows palette and hex values for each color]
</p><p>Note that a value of $0D should not be used (brightness=0, hue=13), as this results in a &quot;blacker than black&quot; color that causes stability problems on some televisions.
</p>
<h2><span class="mw-headline" id="Background">Background</span></h2>
<p>The background is composed of 64x60 tiles, divided into four 32x30 nametables. Each nametable is 960 bytes, with 8-bit tile indicies into one of the two pattern tables as selected by PPUCTRL. Each nametable also has a corresponding 64-byte attribute table, which breaks the tiles into blocks of 2x2 and specifies which background sub-palette to use for each.
</p><p>Normally there is only enough VRAM for two nametables and attribute tables; the other two are duplicates of these. Some mappers support other schemes, like having a single nametable duplicated in all four positions, or extra VRAM to allow four unique nametables. In the following table, A, B, C, and D refer to the underlying memory the nametables are stored in.
</p>
<table border="1" cellpadding="3" cellspacing="0">

<tr>
<th> Arrangement </th>
<th> Name
</th></tr>
<tr>
<td>
<p>A A<br/>
B B
</p>
</td>
<td> Horizontal
</td></tr>
<tr>
<td>
<p>A B<br/>
A B
</p>
</td>
<td> Vertical
</td></tr>
<tr>
<td>
<p>A A<br/>
A A
</p>
</td>
<td> One-screen
</td></tr>
<tr>
<td>
<p>A B<br/>
C D
</p>
</td>
<td> Four-screen
</td></tr></table>

<!-- 
NewPP limit report
CPU time usage: 0.051 seconds
Real time usage: 0.054 seconds
Preprocessor visited node count: 11/1000000
Preprocessor generated node count: 16/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:29-1!*!*!!*!*!* and timestamp 20160208224813 and revision id 87
 -->
</div></body></html>
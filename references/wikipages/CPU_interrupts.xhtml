<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>CPU interrupts</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>CPU interrupts</h1><div class="article">
<p>This page covers detailed interrupt behavior for the MOS 6502 CPU and assumes basic familiarity with 6502 interrupts. For a basic introduction to 6502 interrupts, see e.g. <a class="external text" href="http://users.telenet.be/kim1-6502/6502/proman.html" rel="nofollow">the MOS 6502 Programming Manual</a>.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Detailed_interrupt_behavior"><span class="tocnumber">1</span> <span class="toctext">Detailed interrupt behavior</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Delayed_IRQ_response_after_CLI.2C_SEI.2C_and_PLP"><span class="tocnumber">2</span> <span class="toctext">Delayed IRQ response after CLI, SEI, and PLP</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Branch_instructions_and_interrupts"><span class="tocnumber">3</span> <span class="toctext">Branch instructions and interrupts</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Interrupt_hijacking"><span class="tocnumber">4</span> <span class="toctext">Interrupt hijacking</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#IRQ_and_NMI_tick-by-tick_execution"><span class="tocnumber">4.1</span> <span class="toctext">IRQ and NMI tick-by-tick execution</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Notes"><span class="tocnumber">5</span> <span class="toctext">Notes</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Detailed_interrupt_behavior">Detailed interrupt behavior</span></h2>
<p>The NMI input is edge-sensitive (reacts to high-to-low transitions in the signal) while the IRQ input is level-sensitive (reacts to a low signal level). Both inputs are active low.
</p><p>The NMI input is connected to an <i>edge detector</i>. This edge detector polls the status of the NMI line during <a href="CPU_pin_out_and_signal_description.xhtml" title="CPU pin out and signal description">φ2</a> of each CPU cycle (i.e., during the second half of each cycle) and raises an internal signal if the input goes from being high during one cycle to being low during the next. The internal signal goes high during φ1 of the cycle that follows the one where the edge is detected, and stays high until the NMI has been handled.
</p><p>The IRQ input is connected to a <i>level detector</i>. If a low level is detected on the IRQ input during φ2 of a cycle, an internal signal is raised during φ1 the following cycle, remaining high for that cycle only (or put another way, remaining high as long as the IRQ input is low during the preceding cycle's φ2).
</p><p>The output from the edge detector and level detector are polled at certain points to detect pending interrupts. For most instructions, this polling happens during the final cycle of the instruction, before the opcode fetch for the next instruction. If the polling operation detects that an interrupt has been asserted, the next &quot;instruction&quot; executed is the interrupt sequence.
</p><p>Many references will claim that interrupts are polled during the last cycle of an instruction, but this is true only when talking about the output from the edge and level detectors. As can be deduced from above, it's really the status of the interrupt lines at the <i>end of the second-to-last cycle</i> that matters.
</p><p>If both an NMI and an IRQ are pending at the end of an instruction, the NMI will be handled and the pending status of the IRQ forgotten (though it's likely to be detected again during later polling).
</p><p>The interrupt sequences themselves do not perform interrupt polling, meaning at least one instruction from the interrupt handler will execute before another interrupt is serviced.
</p>
<h2><span class="mw-headline" id="Delayed_IRQ_response_after_CLI.2C_SEI.2C_and_PLP">Delayed IRQ response after CLI, SEI, and PLP</span></h2>
<p>The RTI instruction affects IRQ inhibition immediately. If an IRQ is pending and an RTI is executed that clears the <b>I</b> flag, the CPU will invoke the IRQ handler immediately after RTI finishes executing. This is due to RTI restoring the <b>I</b> flag from the stack before polling for interrupts.
</p><p>The CLI, SEI, and PLP instructions on the other hand change the <b>I</b> flag <i>after</i> polling for interrupts (like all two-cycle instructions they poll the interrupt lines at the end of the first cycle), meaning they can effectively delay an interrupt until after the next instruction. For example, if an interrupt is pending and the <b>I</b> flag is currently set, executing CLI will execute the next instruction before the CPU invokes the IRQ handler.
</p><p>Verification and testing of this behavior in emulators can be accomplished through <a href="Emulator_tests.xhtml#CPU" title="Emulator tests">test ROM images</a>.
</p>
<h2><span class="mw-headline" id="Branch_instructions_and_interrupts">Branch instructions and interrupts</span></h2>
<p>The branch instructions have more subtle interrupt polling behavior. Interrupts are always polled before the second CPU cycle (the operand fetch). Additionally, for taken branches that cross a page boundary, interrupts are polled before the PCH fixup cycle (see <a class="external autonumber" href="http://nesdev.com/6502_cpu.txt" rel="nofollow">[1]</a> for a tick-by-tick breakdown of the branch instructions). An interrupt being detected at either of these polling points (including only being detected at the first one) will trigger a CPU interrupt.
</p>
<h2><span class="mw-headline" id="Interrupt_hijacking">Interrupt hijacking</span></h2>
<p>The MOS 6502 and by extension the <a href="CPU.xhtml" title="CPU">2A03/2A07</a> has a quirk that can cause one type of interrupt to partially hijack another type if they occur very close to one another.
</p><p>For example, if NMI is asserted during the first four ticks of a BRK instruction, the BRK instruction will execute normally at first (PC increments will occur and the status word will be pushed with the <b>B</b> flag set), but execution will branch to the NMI vector instead of the IRQ/BRK vector:
</p>
<pre>
Each [] is a CPU tick. [...] is whatever tick precedes the BRK opcode fetch.

Asserting NMI during the interval marked with * causes a branch to the NMI routine instead of the IRQ/BRK routine:

     ********************
[...][BRK][BRK][BRK][BRK][BRK][BRK][BRK]
</pre>
<p>In a tick-by-tick breakdown of BRK, this looks like
</p>
<pre>
 #  address R/W description
--- ------- --- -----------------------------------------------
 1    PC     R  fetch opcode, increment PC
 2    PC     R  read next instruction byte (and throw it away),
                increment PC
 3  $0100,S  W  push PCH on stack, decrement S
 4  $0100,S  W  push PCL on stack, decrement S
*** At this point, the signal status determines which interrupt vector is used ***
 5  $0100,S  W  push P on stack (with B flag set), decrement S
 6   $FFFE   R  fetch PCL, set I flag
 7   $FFFF   R  fetch PCH
</pre>
<p>Similarly, an NMI can hijack an IRQ, and an IRQ can hijack a BRK (though it won't be as visible since they use the same interrupt vector). The tick-by-tick breakdown of all types of interrupts is essentially like that of BRK, save for whether the <b>B</b> bit is pushed as set and whether PC increments occur.
</p>
<h3><span class="mw-headline" id="IRQ_and_NMI_tick-by-tick_execution">IRQ and NMI tick-by-tick execution</span></h3>
<p>For exposition and to emphasize similarity with BRK, here's the tick-by-tick breakdown of IRQ and NMI (derived from <a class="external text" href="http://visual6502.org/" rel="nofollow">Visual 6502</a>). A reset also goes through the same sequence, but suppresses writes, decrementing the stack pointer thrice without modifying memory. This is why the <b>I</b> flag is always set on reset.
</p>
<pre>
 #  address R/W description
--- ------- --- -----------------------------------------------
 1    PC     R  fetch opcode (and discard it - $00 (BRK) is forced into the opcode register instead)
 2    PC     R  read next instruction byte (actually the same as above, since PC increment is suppressed. Also discarded.)
 3  $0100,S  W  push PCH on stack, decrement S
 4  $0100,S  W  push PCL on stack, decrement S
*** At this point, the signal status determines which interrupt vector is used ***
 5  $0100,S  W  push P on stack (with B flag *clear*), decrement S
 6   A       R  fetch PCL (A = FFFE for IRQ, A = FFFA for NMI), set I flag
 7   A       R  fetch PCH (A = FFFF for IRQ, A = FFFB for NMI)
</pre>
<h2><span class="mw-headline" id="Notes">Notes</span></h2>
<ul><li> The above interrupt hijacking and IRQ response behavior is tested by the <a href="Emulator_tests.xhtml" title="Emulator tests">cpu_interrupts_v2</a> test ROM.</li>
<li> For more quirky behavior related to VBlank NMI's from the PPU, see <a href="PPU_frame_timing.xhtml" title="PPU frame timing">PPU frame timing</a>.</li>
<li> The B status flag doesn't physically exist inside the CPU, and only appears as different values being pushed for bit 4 of the saved status bits by BRK and NMI/IRQ.</li>
<li> For a more technical description of what causes the hijacking behavior, see <a class="external text" href="http://visual6502.org/wiki/index.php?title=6502_BRK_and_B_bit" rel="nofollow">Visual6502's writeup</a>.</li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.038 seconds
Real time usage: 0.039 seconds
Preprocessor visited node count: 50/1000000
Preprocessor generated node count: 88/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1031-1!*!0!!en!*!* and timestamp 20160208220055 and revision id 7502
 -->
</div></body></html>
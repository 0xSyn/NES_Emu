<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>PPU OAM</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>PPU OAM</h1><div class="article">
<p>The OAM (Object Attribute Memory) is internal memory inside the PPU that contains a display list of up to 64 sprites, where each sprite's information occupies 4 bytes.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Byte_0"><span class="tocnumber">1</span> <span class="toctext">Byte 0</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Byte_1"><span class="tocnumber">2</span> <span class="toctext">Byte 1</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Byte_2"><span class="tocnumber">3</span> <span class="toctext">Byte 2</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Byte_3"><span class="tocnumber">4</span> <span class="toctext">Byte 3</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#DMA"><span class="tocnumber">5</span> <span class="toctext">DMA</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Sprite_zero_hits"><span class="tocnumber">6</span> <span class="toctext">Sprite zero hits</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Sprite_overlapping"><span class="tocnumber">7</span> <span class="toctext">Sprite overlapping</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Internal_operation"><span class="tocnumber">8</span> <span class="toctext">Internal operation</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h3><span class="mw-headline" id="Byte_0">Byte 0</span></h3>
<p>Y position of top of sprite
</p><p>Sprite data is delayed by one scanline; you must subtract 1 from the sprite's Y coordinate before writing it here.
Hide a sprite by writing any values in $EF-$FF here.
Sprites are never displayed on the first line of the picture, and it is impossible to place a sprite partially off the top of the screen.
</p>
<h3><span class="mw-headline" id="Byte_1">Byte 1</span></h3>
<p>Tile index number
</p><p>For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of <a class="mw-redirect" href="PPU_registers.xhtml" title="PPUCTRL">PPUCTRL</a> ($2000).
</p><p>For 8x16 sprites, the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
</p>
<pre>76543210
||||||||
|||||||+- Bank ($0000 or $1000) of tiles
+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
</pre>
<p>Thus, the pattern table memory map for 8x16 sprites looks like this:
</p>
<ul><li>$00: $0000-$001F</li>
<li>$01: $1000-$101F</li>
<li>$02: $0020-$003F</li>
<li>$03: $1020-$103F</li>
<li>$04: $0040-$005F<br/>[...]</li>
<li>$FE: $0FE0-$0FFF</li>
<li>$FF: $1FE0-$1FFF</li></ul>
<h3><span class="mw-headline" id="Byte_2">Byte 2</span></h3>
<p>Attributes
</p>
<pre>76543210
||||||||
||||||++- Palette (4 to 7) of sprite
|||+++--- Unimplemented
||+------ Priority (0: in front of background; 1: behind background)
|+------- Flip sprite horizontally
+-------- Flip sprite vertically
</pre>
<p>Flipping does not change the position of the sprite's bounding box, just the position of pixels within the sprite.
If, for example, a sprite covers (120, 130) through (127, 137), it'll still cover the same area when flipped.
In 8x16 mode, vertical flip flips each of the subtiles and also exchanges their position; the odd-numbered tile of a vertically flipped sprite is drawn on top.
This behavior differs from the behavior of the <a class="external text" href="http://wiki.superfamicom.org/snes/show/Registers#obsel__object_size_and_character_address_8" rel="nofollow">unofficial 16x32 and 32x64 pixel sprite sizes on the Super NES</a>, which <a class="external text" href="http://wiki.superfamicom.org/snes/show/Sprites" rel="nofollow">will only vertically flip each square sub-region</a>.
</p><p>The three unimplemented bits of each sprite's byte 2 do not exist in the PPU and always read back as 0 on PPU revisions that allow reading PPU OAM through <a class="mw-redirect" href="PPU_registers.xhtml" title="OAMDATA">OAMDATA</a> ($2004). This can be emulated by ANDing byte 2 with $E3 either when writing to or when reading from OAM. It has not been determined whether the PPU actually drives these bits low or whether this is the effect of data bus capacitance from reading the last byte of the instruction (LDA $2004, which assembles to AD 04 20).
</p>
<h3><span class="mw-headline" id="Byte_3">Byte 3</span></h3>
<p>X position of left side of sprite.
</p><p>X-scroll values of $F9-FF results in parts of the sprite to be past the right edge of the screen, thus invisible. It is not possible to have a sprite partially visible on the left edge. Instead, left-clipping through <a class="mw-redirect" href="PPU_registers.xhtml" title="PPUMASK"> PPUMASK ($2001)</a> can be used to simulate this effect.
</p>
<h3><span class="mw-headline" id="DMA">DMA</span></h3>
<p>Most programs write to a copy of OAM somewhere in CPU addressable RAM (often $0200-$02FF) and then copy it to OAM each frame using the <a class="mw-redirect" href="PPU_registers.xhtml" title="OAMDMA">OAMDMA</a> ($4014) register. Writing N to this register causes the DMA circuitry inside the 2A03/07 to fully initialize the OAM by writing <a class="mw-redirect" href="PPU_registers.xhtml" title="OAMDATA">OAMDATA</a> 256 times using successive bytes from starting at address $100*N). The CPU is suspended while the transfer is taking place.
</p><p>The address range to copy from could lie outside RAM, though this is only useful for static screens with no animation.
</p><p>Not counting the <a class="mw-redirect" href="PPU_registers.xhtml" title="OAMDMA">OAMDMA</a> write tick, the above procedure takes 513 CPU cycles (+1 on odd CPU cycles): first one (or two) idle cycles, and then 256 pairs of alternating read/write cycles. (For comparison, an unrolled LDA/STA loop would usually take four times as long.)
</p>
<h3><span class="mw-headline" id="Sprite_zero_hits">Sprite zero hits</span></h3>
<p>Sprites are conventionally numbered 0 to 63.
Sprite 0 is the sprite controlled by OAM addresses $00-$03, sprite 1 is controlled by $04-$07, ..., and sprite 63 is controlled by $FC-$FF.
</p><p>While the PPU is drawing the picture, when an opaque pixel of sprite 0 overlaps an opaque pixel of the background, this is a <b>sprite zero hit</b>.
The PPU detects this condition and sets bit 6 of <a class="mw-redirect" href="PPU_registers.xhtml" title="PPUSTATUS">PPUSTATUS</a> ($2002) to 1 starting at this pixel, letting the CPU know how far along the PPU is in drawing the picture.
</p><p>Sprite 0 hit does not happen:
</p>
<ul><li> If background or sprite rendering is disabled in <a class="mw-redirect" href="PPU_registers.xhtml" title="PPUMASK">PPUMASK</a> ($2001)</li>
<li> At x=0 to x=7 if the left-side clipping window is enabled (if bit 2 or bit 1 of PPUMASK is 0).</li>
<li> At x=255, for an obscure reason related to the pixel pipeline.</li>
<li> At any pixel where the background or sprite pixel is transparent (2-bit color index from the CHR pattern is %00).</li>
<li> If sprite 0 hit has already occurred this frame. Bit 6 of PPUSTATUS ($2002) is cleared to 0 at dot 1 of the pre-render line. This means only the first sprite 0 hit in a frame can be detected.</li></ul>
<p>Sprite 0 hit happens regardless of the following:
</p>
<ul><li> Sprite priority. Sprite 0 can still hit the background from behind.</li>
<li> The pixel colors. Only the CHR pattern bits are relevant, not the actual rendered colors, and <i>any</i> CHR color index except %00 is considered opaque.</li>
<li> The palette. The contents of the palette are irrelevant to sprite 0 hits. For example: a black ($0F) sprite pixel can hit a black ($0F) background as long as neither is the transparent color index %00.</li>
<li> The PAL PPU blanking on the left and right edges at x=0, x=1, and x=254 (see <a href="Overscan.xhtml#PAL" title="Overscan">Overscan</a>).</li></ul>
<h3><span class="mw-headline" id="Sprite_overlapping">Sprite overlapping</span></h3>
<p><a href="PPU_sprite_priority.xhtml" title="PPU sprite priority">Priority between sprites</a> is determined by their address inside OAM.
So to have a sprite displayed in front of another sprite in a scanline, the sprite data that occurs first will overlap any other sprites after it.
For example, when sprites at OAM $0C and $28 overlap, the sprite at $0C will appear in front.
</p>
<h3><span class="mw-headline" id="Internal_operation">Internal operation</span></h3>
<p>In addition to the primary OAM memory, the PPU contains 32 bytes (enough for 8 sprites) of secondary OAM memory that is not directly accessible by the program. During each visible scanline this secondary OAM is first cleared, and then a linear search of the entire primary OAM is carried out to find sprites that are within y range for the <b>next</b> scanline (the <i>sprite evaluation</i> phase). The OAM data for each sprite found to be within range is copied into the secondary OAM, which is then used to initialize eight internal sprite output units.
</p><p>See <a href="PPU_rendering.xhtml" title="PPU rendering">PPU rendering</a> for information on precise timing.
</p><p>The reason sprites at lower addresses in OAM overlap sprites at higher addresses is that sprites at lower addresses also get assigned a lower address in the secondary OAM, and hence get assigned a lower-numbered sprite output unit during the loading phase. Output from lower-numbered sprite output units is wired inside the PPU to take priority over output from higher-numbered sprite output units.
</p><p>Sprite zero hit detection relies on the fact that sprite zero, when it is within y range for the next scanline, always gets assigned the first sprite output unit. The hit condition is basically <i>sprite zero is in range</i> <b>AND</b> <i>the first sprite output unit is outputting a non-zero pixel</i> <b>AND</b> <i>the background drawing unit is outputting a non-zero pixel</i>. (Internally the PPU actually uses <b>two</b> flags: one to keep track of whether sprite zero occurs on the <i>next</i> scanline, and another one—initialized from the first—to keep track of whether sprite zero occurs on the <i>current</i> scanline. This is to avoid sprite evaluation, which takes place concurrently with potential sprite zero hits, trampling on the second flag.)
</p>
<h3><span class="mw-headline" id="See_also">See also</span></h3>
<ul><li> <a href="PPU_sprite_evaluation.xhtml" title="PPU sprite evaluation">PPU sprite evaluation</a></li>
<li> <a href="Sprite_overflow_games.xhtml" title="Sprite overflow games">Sprite overflow games</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.045 seconds
Real time usage: 0.047 seconds
Preprocessor visited node count: 35/1000000
Preprocessor generated node count: 40/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:21-1!*!0!!en!*!* and timestamp 20160208222631 and revision id 10883
 -->
</div></body></html>
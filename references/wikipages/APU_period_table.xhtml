<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>APU period table</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>APU period table</h1><div class="article">
<p><a href="APU_Pulse.xhtml" title="APU Pulse">APU Pulse</a> and <a href="APU_Triangle.xhtml" title="APU Triangle">APU Triangle</a> use &quot;period&quot; values to set the pitch of the note.
But some people might not know the <a class="extiw" href="http://en.wikipedia.org/wiki/piano_key_frequencies" title="wikipedia:piano key frequencies">piano key frequencies</a> or how to convert them to periods for the NES.
Fortunately, this has been done for you.
</p>
<h2><span class="mw-headline" id="Lookup_table">Lookup table</span></h2>
<p>Here's a lookup table from note numbers to the values to write to the pulse and triangle period registers.
For the triangle channel, the first value corresponds to the lowest key on a standard piano (an A).
The pulse waves sound one octave higher.
</p>
<pre>
; NTSC period table generated by mktables.py
.export periodTableLo, periodTableHi
.segment &quot;RODATA&quot;
periodTableLo:
  .byt $f1,$7f,$13,$ad,$4d,$f3,$9d,$4c,$00,$b8,$74,$34
  .byt $f8,$bf,$89,$56,$26,$f9,$ce,$a6,$80,$5c,$3a,$1a
  .byt $fb,$df,$c4,$ab,$93,$7c,$67,$52,$3f,$2d,$1c,$0c
  .byt $fd,$ef,$e1,$d5,$c9,$bd,$b3,$a9,$9f,$96,$8e,$86
  .byt $7e,$77,$70,$6a,$64,$5e,$59,$54,$4f,$4b,$46,$42
  .byt $3f,$3b,$38,$34,$31,$2f,$2c,$29,$27,$25,$23,$21
  .byt $1f,$1d,$1b,$1a,$18,$17,$15,$14
periodTableHi:
  .byt $07,$07,$07,$06,$06,$05,$05,$05,$05,$04,$04,$04
  .byt $03,$03,$03,$03,$03,$02,$02,$02,$02,$02,$02,$02
  .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
  .byt $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byt $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byt $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  .byt $00,$00,$00,$00,$00,$00,$00,$00
</pre>
<h2><span class="mw-headline" id="Table_generator">Table generator</span></h2>
<p>This Python program generated the above lookup table.
You can use it to make a table for a PAL NES, which has a different CPU <a href="Clock_rate.xhtml" title="Clock rate">clock rate</a>.
</p>
<pre>
#!/usr/bin/env python
#
# Lookup table generator for note periods
# Copyright 2010 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
from __future__ import with_statement, division, print_function
import sys

lowestFreq = 55.0
ntscOctaveBase = 39375000.0/(22 * 16 * lowestFreq)
palOctaveBase = 266017125.0/(10 * 16 * 16 * lowestFreq)
maxNote = 80

def makePeriodTable(filename, pal=False):
    semitone = 2.0**(1./12)
    octaveBase = palOctaveBase if pal else ntscOctaveBase
    relFreqs = [(1 &lt;&lt; (i // 12)) * semitone**(i % 12)
                for i in xrange(maxNote)]
    periods = [int(round(octaveBase / freq)) - 1 for freq in relFreqs]
    systemName = &quot;PAL&quot; if pal else &quot;NTSC&quot;
    with open(filename, 'wt') as outfp:
        outfp.write(&quot;&quot;&quot;; %s period table generated by mktables.py
.export periodTableLo, periodTableHi
.segment &quot;RODATA&quot;
periodTableLo:\n&quot;&quot;&quot;
                    % systemName)
        for i in range(0, maxNote, 12):
            outfp.write('  .byt '
                        + ','.join('$%02x' % (i % 256)
                                   for i in periods[i:i + 12])
                        + '\n')
        outfp.write('periodTableHi:\n')
        for i in range(0, maxNote, 12):
            outfp.write('  .byt '
                        + ','.join('$%02x' % (i &gt;&gt; 8)
                                   for i in periods[i:i + 12])
                        + '\n')

def makePALPeriodTable(filename):
    return makePeriodTable(filename, pal=True)

tableNames = {
    'period': makePeriodTable,
    'palperiod': makePALPeriodTable
}

def main(argv):
    if len(argv) &gt;= 2 and argv[1] in ('/?', '-?', '-h', '--help'):
        print(&quot;usage: %s TABLENAME FILENAME&quot; % argv[0])
        print(&quot;known tables:&quot;, ' '.join(sorted(tableNames)))
    elif len(argv) &lt; 3:
        print(&quot;mktables: too few arguments; try %s --help&quot; % argv[0])
    elif argv[1] in tableNames:
        tableNames[argv[1]](argv[2])
    else:
        print(&quot;mktables: no such table %s; try %s --help&quot; % (argv[1], argv[0]))

if __name__=='__main__':
    main(sys.argv)
</pre>
<p>The following are exercises for the reader:
</p>
<ul><li> Adapt to <a href="FDS_audio.xhtml" title="FDS audio">FDS audio</a> and other mapper sound chips by changing <code>ntscOctaveBase</code> and the formula for <code>periods</code>
<ul><li> Hint: <code>fdsOctaveBase = lowestFreq * 65536 * 64 * 22.0 / 39375000.0</code> and <code>octaveBase * freq</code></li></ul></li>
<li> Adapt to other <a class="extiw" href="http://en.wikipedia.org/wiki/musical_tuning" title="wikipedia:musical tuning">musical tuning</a> systems by changing the formula for <code>relFreqs</code></li>
<li> Adapt to assemblers other than ca65</li></ul>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a href="Celius_NTSC_table.xhtml" title="Celius NTSC table">Celius' NTSC table</a></li>
<li><a href="Celius_PAL_table.xhtml" title="Celius PAL table"> Celius' PAL table</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.031 seconds
Real time usage: 0.033 seconds
Preprocessor visited node count: 29/1000000
Preprocessor generated node count: 56/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:424-1!*!0!!*!*!* and timestamp 20160208224736 and revision id 11881
 -->
<p class="categories">Categories: <a href="Category_APU.xhtml">APU</a></p></div></body></html>
<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>PPU frame timing</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>PPU frame timing</h1><div class="article">
<p>The following behavior is tested by the <a class="mw-redirect" href="Emulator_tests.xhtml" title="Emulator Tests">ppu_vbl_nmi_timing test ROMs</a>. Only the NTSC PPU is covered, though most probably applies to the PAL PPU.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Even.2FOdd_Frames"><span class="tocnumber">1</span> <span class="toctext">Even/Odd Frames</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#CPU-PPU_Clock_Alignment"><span class="tocnumber">2</span> <span class="toctext">CPU-PPU Clock Alignment</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Synchronizing_the_CPU_and_PPU_clocks"><span class="tocnumber">2.1</span> <span class="toctext">Synchronizing the CPU and PPU clocks</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#VBL_Flag_Timing"><span class="tocnumber">3</span> <span class="toctext">VBL Flag Timing</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Even.2FOdd_Frames">Even/Odd Frames</span></h2>
<ul><li> The PPU has an even/odd flag that is toggled every frame, regardless of whether rendering is enabled or disabled.</li>
<li> With rendering disabled (background and sprites disabled in <a href="PPU_registers.xhtml" title="PPU registers">PPUMASK ($2001)</a>), each PPU frame is 341*262=89342 PPU clocks long. There is no skipped clock every other frame.</li>
<li> With rendering enabled, each odd PPU frame is one PPU clock shorter than normal. This is done by skipping the first idle tick on the first visible scanline (by jumping directly from (339,261) on the pre-render scanline to (0,0) on the first visible scanline and doing the last cycle of the last dummy nametable fetch there instead; see <a href="File_Ntsc_timing_png.xhtml" title="File:Ntsc timing.png">this diagram</a>).</li>
<li> By keeping rendering disabled until after the time when the clock is skipped on odd frames, you can get a different color dot crawl pattern than normal (it looks more like that of interlace, where colors flicker between two states rather than the normal three). Presumably Battletoads (and others) encounter this, since it keeps the BG disabled until well after this time each frame.</li></ul>
<h2><span class="mw-headline" id="CPU-PPU_Clock_Alignment">CPU-PPU Clock Alignment</span></h2>
<p>The NTSC PPU runs at 3 times the CPU <a href="Clock_rate.xhtml" title="Clock rate">clock rate</a>, so <i>for a given power-up</i> PPU events can occur on one of three relative alignments with the CPU clock they fall within. Since the PPU divides the master clock by four, there are actually more than just three alignments possible: The beginning of a CPU tick could be offset by 0-3 master clock ticks from the nearest following PPU tick. The results below only cover one particular set of alignments, namely the one which gives the fewest number of special cases, where a read will see a change to a flag if and only if it starts at or after the PPU tick where the flag changes. (Other alignments might cause the change to be visible 1 PPU tick earlier or later; see <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=62253" rel="nofollow">this thread</a>.)
</p>
<h3><span class="mw-headline" id="Synchronizing_the_CPU_and_PPU_clocks">Synchronizing the CPU and PPU clocks</span></h3>
<p>If rendering is off, each frame will be 341*262/3 = 29780 2/3 CPU clocks long. If the CPU checks the VBL flag in a loop every 29781 clocks, the read will occur one PPU tick later relative to the start of the frame each frame, until at some point the CPU &quot;catches up&quot; to the location where the flag gets set. At this point, the CPU and PPU synchronization is known down the PPU tick.
</p>
<pre>
During frame 5 below, the CPU will read the VBL flag as set, and the loop will stop.

Frame 1: ...-C---V-...
Frame 2: ...--C--V-...
Frame 3: ...---C-V-...
Frame 4: ...----CV-...
Frame 5: ...-----*-...

-: PPU tick
C: Location where the CPU starts reading $2002
V: Location where the VBL flag is set in $2002
*: Beginning of $2002 read synched with VBL flag setting

(This assumes the alignment with the fewest number of special cases as mentioned above.)
</pre>
<h2><span class="mw-headline" id="VBL_Flag_Timing">VBL Flag Timing</span></h2>
<dl><dd><i>See also: <a href="NMI.xhtml" title="NMI">NMI</a></i></dd></dl>
<ul><li> Reading $2002 within a few PPU clocks of when VBL is set results in special-case behavior. Reading one PPU clock before reads it as clear and never sets the flag or generates NMI for that frame. Reading on the same PPU clock or one later reads it as set, clears it, and suppresses the NMI for that frame. Reading two or more PPU clocks before/after it's set behaves normally (reads flag's value, clears it, and doesn't affect NMI operation). This suppression behavior is due to the $2002 read pulling the NMI line back up too quickly after it drops (NMI is active low) for the CPU to see it. (CPU inputs like NMI are sampled each clock.)</li>
<li> On an NTSC machine, the VBL flag is cleared 6820 PPU clocks, or exactly 20 scanlines, after it is set. In other words, it's cleared at the start of the pre-render scanline. (<i>TO DO: confirmation on <a href="Clock_rate.xhtml" title="Clock rate">PAL NES and common PAL famiclone</a></i>)</li></ul>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li> <a href="PPU_rendering.xhtml" title="PPU rendering">PPU rendering</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.078 seconds
Real time usage: 0.082 seconds
Preprocessor visited node count: 34/1000000
Preprocessor generated node count: 68/1000000
Post‐expand include size: 22/2097152 bytes
Template argument size: 3/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:54-1!*!0!!en!*!* and timestamp 20160607010224 and revision id 12587
 -->
</div></body></html>
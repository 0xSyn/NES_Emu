<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Random number generator</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Random number generator</h1><div class="article">
<p>While truly random numbers are difficult to create with a deterministic computer, a <b>pseudorandom number generator</b>, or <b>PRNG</b>, may be used instead, which is technically deterministic, but designed so that the output should appear consistently uncorrelated. There are a wide variety of suitable algorithms.
</p><p>Typically a starting &quot;seed&quot; is supplied by the program to begin the sequence generated by a PRNG. By finding some way<sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup> of gathering a suitably unpredictable starting seed, (e.g. counting the time until the user presses a button) the program can start at a different part of the sequence each time it is run, ensuring the user does not have the same experience twice.
</p>
<h2><span class="mw-headline" id="Linear_feedback_shift_register">Linear feedback shift register</span></h2>
<p>The <a class="external text" href="https://en.wikipedia.org/wiki/Linear_feedback_shift_register" rel="nofollow">linear feedback shift register</a> is commonly used as a PRNG on systems like the 6502 which have no hardware multiply capabilities. This rotates a series of bits (the <i>shift register</i>), with the bit coming off the end of the series <i>feeding back</i> into the register as an exclusive-OR operation. By choosing the feedback bits carefully, this can create a sequence that fills the register with every possible value (except 0), allowing relatively long random number sequences using only bitwise operations.
</p><p>This example is only 16 bits wide, but the sequence length of an LSFR can be doubled with each bit. 24 and 32 bit LSFRs are very practical if extremely long sequences are needed.
</p>
<pre>
; prng
;
; Returns a random 8-bit number in A (0-255), clobbers X (0).
;
; Requires a 2-byte value on the zero page called &quot;seed&quot;.
; Initialize seed to any value except 0 before the first call to prng.
; (A seed value of 0 will cause prng to always return 0.)
;
; This is a 16-bit Galois linear feedback shift register with polynomial $002D.
; The sequence of numbers it generates will repeat after 65535 calls.
;
; Execution time is an average of 125 cycles (excluding jsr and rts)

.zeropage
seed: .res 2       ; initialize 16-bit seed to any value except 0

.code
prng:
	ldx #8     ; iteration count (generates 8 bits)
	lda seed+0
:
	asl        ; shift the register
	rol seed+1
	bcc :+
	eor #$2D   ; apply XOR feedback whenever a 1 bit is shifted out
:
	dex
	bne :--
	sta seed+0
	cmp #0     ; reload flags
	rts
</pre>
<p>See <a href="Random_number_generator_Linear_feedback_shift_register__advanced_.xhtml" title="Random number generator/Linear feedback shift register (advanced)">Linear feedback shift register (advanced)</a> for further commentary on this code, and various alternatives with other desired properties (efficiency, quality, etc.).
</p>
<h2><span class="mw-headline" id="References">References</span></h2>
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><a href="#cite_ref-1">↑</a></span> <span class="reference-text"><a class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9796" rel="nofollow">Forum discussion of obscure methods of gathering seed entropy.</a></span>
</li>
</ol>
<ul><li> <a class="external text" href="http://codebase64.org/doku.php?id=base:6502_6510_maths#random_numbers" rel="nofollow">Codebase64.org PRNG code examples</a></li></ul>
<p>Past forum discussions of random number generators:
</p>
<ul><li> Forum: <a class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=14499" rel="nofollow">Quality of the CC65 randomizer</a> (a 23-bit LCG)</li>
<li> Forum: <a class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13172" rel="nofollow">Which randomizer to use?</a></li>
<li> Forum: <a class="external text" href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11241" rel="nofollow">need assistance with random number generator</a></li>
<li> Forum: <a class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9598" rel="nofollow">CRC routines as PRNGs</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.063 seconds
Real time usage: 0.067 seconds
Preprocessor visited node count: 40/1000000
Preprocessor generated node count: 122/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 3/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1584-1!*!0!!*!*!* and timestamp 20160712140217 and revision id 12713
 -->
</div></body></html>
<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Action 53 mapper/Reference implementations</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Action 53 mapper/Reference implementations</h1><div class="article">
<p>These reference implementations of the PRG ROM bank formula in the <a href="Action_53_mapper.xhtml" title="Action 53 mapper">Action 53 mapper</a> (<a href="INES_Mapper_028.xhtml" title="INES Mapper 028">mapper 28</a>) may be used to verify emulator or hardware implementations of this mapper.
</p>
<h2><span class="mw-headline" id="Python">Python</span></h2>
<pre>
#!/usr/bin/env python3
from __future__ import print_function

bank_size_masks = [(2&lt;&lt;i)-1 for i in range(4)]  # 0x01, 0x03, 0x07, 0x0F

def calc_prg_bank(address, bank_mode, outer_bank, current_bank):
    &quot;&quot;&quot;Calculate the 16K bank on A20-A14 for a given address.

address -- current address being accessed by the CPU,
    in range 0x8000-0xFFFF
bank_mode -- last value written to $80
outer_bank -- last value written to $81
current_bank -- last value written to $01

&quot;&quot;&quot;
    cpu_a14 = (address &gt;&gt; 14) &amp; 0x01
    outer_bank = outer_bank &lt;&lt; 1
    bank_mode &gt;&gt;= 2  # discard mirroring bits
    if (bank_mode ^ cpu_a14) &amp; 0x03 == 0x02:  # in UNROM fixed bank?
        bank_mode = 0  # if so, treat as NROM
    if (bank_mode &amp; 0x02) == 0:  # in 32K bank mode?
        current_bank = (current_bank &lt;&lt; 1) | cpu_a14
    bank_size_mask = bank_size_masks[(bank_mode &gt;&gt; 2) &amp; 3]
    return (current_bank &amp; bank_size_mask) | (outer_bank &amp; ~bank_size_mask)

def test_with_bank_mode_size(bank_mode, outer_bank):
    print(&quot;mode $%02x, outer bank $%02x&quot; % (bank_mode, outer_bank))
    out80 = [calc_prg_bank(0x8000, bank_mode, outer_bank, current_bank)
         for current_bank in range(16)]
    print(&quot;$8000 banks:&quot;, &quot; &quot;.join(&quot;%02x&quot; % i for i in out80))
    outC0 = [calc_prg_bank(0xC000, bank_mode, outer_bank, current_bank)
             for current_bank in range(16)]
    print(&quot;$C000 banks:&quot;, &quot; &quot;.join(&quot;%02x&quot; % i for i in outC0))

for outer_bank in (0x00, 0x3C, 0x3F):
    test_with_bank_mode_size(0x28, outer_bank)
for outer_bank in (0x00, 0x03, 0x3F):
    test_with_bank_mode_size(0x2C, outer_bank)
for bank_mode in (0x00, 0x08, 0x0C, 0x10, 0x18, 0x1C,
                  0x20, 0x28, 0x2C, 0x30, 0x38, 0x3C):
    test_with_bank_mode_size(bank_mode, 0x2A)
</pre>
<h2><span class="mw-headline" id="6502_assembly">6502 assembly</span></h2>
<p>This routine appears in the test ROMs &quot;test28&quot; and &quot;Holy Diver Batman&quot;.
</p>
<pre>
;;
; Determines what 16 KiB PRG ROM bank ought to be mapped into a given
; CPU address with a given set of $80, $81, $00 values.
; For use in a test ROM that verifies mapper 28.
; @param A $80 value
; @param X $01 value
; @param Y $81 value
; @param C CPU A14 value: clear for $8000-$BFFF, set for $C000-$FFFF
; @return PRG bank number in A
.proc calc_prg_bank
bank_mode = 0
outer_bank = 1
current_bank = 2
  stx current_bank
  sty outer_bank
  rol outer_bank
  lsr a  ; discard mirroring bits
  lsr a
  sta bank_mode

  ; If the mode is UxROM (10 = mapper 180, 11 = mapper 2), and bit 0
  ; of the mode matches CPU A14, then the read is within the fixed
  ; bank.  For such reads, the mapper acts in 32K (NROM) mode.
  and #$02
  beq not_unrom
  lda outer_bank
  eor bank_mode
  ; If bit 0 of the eor result is false, there is a match, so
  ; fall through to the not-UNROM code.
  and #$01
  bne have_current_bank
  sta bank_mode

not_unrom:
  ; In 32K switched modes (NROM, CNROM, BNROM, AOROM),
  ; shift CPU A14 into the current bank
  lda outer_bank
  lsr a
  rol current_bank
  
have_current_bank:
  lda bank_mode
  lsr a
  lsr a
  and #$03
  tax
  lda current_bank
  eor outer_bank
  and bank_size_masks,x
  eor outer_bank
  rts
.endproc

.segment &quot;RODATA&quot;
bank_size_masks: .byt $01, $03, $07, $0F
</pre>

<!-- 
NewPP limit report
CPU time usage: 0.025 seconds
Real time usage: 0.027 seconds
Preprocessor visited node count: 19/1000000
Preprocessor generated node count: 52/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:919-1!*!0!!*!*!* and timestamp 20160611171535 and revision id 12613
 -->
</div></body></html>
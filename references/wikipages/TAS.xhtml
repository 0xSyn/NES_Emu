<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>TAS</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>TAS</h1><div class="article">
<p>A <b>TAS</b> (short for <i>Tool-Assisted Speedrun</i>) is an input recording for a video game.
When the game is run in real time, the input is fed to the game, and the game reacts to the input as if the player was playing it.
However, the input has been crafted at the author's leisure, and may involve maneuvers that are way too difficult, or outright impossible, for a real human player to perform, by requiring abilities such as premonition or perfect accuracy.
This creates <a class="external text" href="http://tasvideos.org/WhyAndHow.html" rel="nofollow">entertainment that appeals to people for a number of reasons</a>. Personally, I take it as a form of art.
</p><p>For this to be possible, however, an emulator must pass <a class="external text" href="http://tasvideos.org/EmulatorResources/Requirements.html" rel="nofollow">certain requirements</a>.
Most importantly, the emulator must be completely deterministic.
The emulator must contain no random components, such as fluctuation in thread synchronization.
From the perspective of the game running in the emulator, the emulator must run identically on every single invokation, when the same input is provided.
For the most part, real consoles are also deterministic, and indeed, some TASes have been <a class="external text" href="http://tasvideos.org/ConsoleVerifiedMovies.html" rel="nofollow">replayed on an actual NES console</a>.
Then there are <a class="external text" href="http://tasvideos.org/EmulatorResources/Features.html" rel="nofollow">features which make the creation of TASes significantly easier</a>.
If you are an emulator author, please try to ensure your emulator fulfills most of these requirements.
</p><p>If your emulator is accurate enough, you can use TAS videos as a test material to automate your emulator testing with games. The TAS inputs go quickly through large amounts of the game's code and data, invoking bordercase behavior within the games, making very good testcases. To use, at the onset of each NMI, just read the next frame from the movie file, and use that input for the response whenever the game polls the input. Note that you may need to delete or add a few idle frames in the beginning of the movie before sync is achieved.
</p><p>Note that not all TAS videos have been created on an accurate emulator. For the movie to sync, you must replicate the same timings as the emulator the TAS was made on. Some games, such as Super Mario Bros., are not really picky, but most of them require fairly accurate emulation.
</p><p>As a general principle, the newer the TAS is, the more accurate the emulator it was played on. That is, if you aimed for accuracy, you should try to replay these newer TASes. However, the newer TASes also often push the edge, invoking an esoteric race condition within the game or timing-sensitive buffer overflow glitches, meaning that even a difference of a single cycle in sprite-0-hit flag may translate to the difference between a TAS that syncs and one that does not. The TASes that depend on such level of faithful reproduction of timing are very few, though. An example of a TAS with such glitch is <a class="external text" href="http://tasvideos.org/1686M.html" rel="nofollow">NES Mega Man (JPN) in 12:23.34 by Shinryuu &amp; FinalFighter</a> made with FCEUX with &quot;<i>old ppu</i>&quot; setting. Its predecessor, <a class="external text" href="http://tasvideos.org/1103M.html" rel="nofollow">NES Mega Man (JPN/USA) in 15:29.27 by Deign</a> is considerably more likely to sync on any fairly accurate emulator (though so far, attempts to sync it on <i>actual NES</i> have been unsuccessful).
</p>
<h2><span class="mw-headline" id="External_links">External links</span></h2>
<ul><li><a class="external text" href="http://tasvideos.org/" rel="nofollow">TASVideos - a website that collects, produces and publishes TAS videos.</a></li>
<li><a class="external text" href="http://tasvideos.org/EmulatorResources/Requirements.html" rel="nofollow">TASVideos: Emulator feature checklist: The minimums for emulator being TAS-production capable</a>
<ul><li><a class="external text" href="http://tasvideos.org/EmulatorResources/Features.html" rel="nofollow">TASVideos: Emulator feature wishlist: TAS authors wish for these features in any emulator they work with.</a></li></ul></li>
<li><a class="external text" href="http://tasvideos.org/ConsoleVerifiedMovies.html" rel="nofollow">TASVideos: List of console-verified movies. Your emulator should be accurate enough to run these TASes as well.</a></li>
<li><a class="external text" href="http://bisqwit.iki.fi/source/nesmock.html" rel="nofollow">NESmock: A tool for converting NES input recording files between different emulator formats.</a>
<ul><li><a class="external text" href="http://tasvideos.org/EmulatorResources.html" rel="nofollow">Links to pages with description of each known emulator's movie format.</a></li></ul></li></ul>
<h2><span class="mw-headline" id="Authors">Authors</span></h2>
<ul><li><a href="User_Bisqwit.xhtml" title="User:Bisqwit">Bisqwit</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.022 seconds
Real time usage: 0.024 seconds
Preprocessor visited node count: 7/1000000
Preprocessor generated node count: 12/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:735-1!*!0!!*!*!* and timestamp 20160208225906 and revision id 3177
 -->
</div></body></html>
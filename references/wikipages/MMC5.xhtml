<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>MMC5</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>MMC5</h1><div class="article">
<p><br/>
</p>
<div class="infobox">
<div style="text-align: center"><b>MMC5</b>
<br/><b>ExROM</b></div>
<table class="oddf0">

<tr>
<td> <b>Company</b>
</td>
<td> Nintendo, Koei, others
</td></tr>
<tr>
<td> <b>Games</b>
</td>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?ines=5&amp;group=groupid" rel="nofollow">14 in NesCartDB</a>
</td></tr>
<tr>
<td> <b>Complexity</b>
</td>
<td> ASIC
</td></tr>
<tr>
<td> <b>Boards</b>
</td>
<td> ETROM,<br/> others
</td></tr>
<tr>
<td> <b>PRG ROM capacity</b>
</td>
<td> 1024K
</td></tr>
<tr>
<td> <b>PRG ROM window</b>
</td>
<td> 8K, 16K, or 32K
</td></tr>
<tr>
<td> <b>PRG RAM capacity</b>
</td>
<td> 64K
</td></tr>
<tr>
<td> <b>PRG RAM window</b>
</td>
<td> 8K
</td></tr>
<tr>
<td> <b>CHR capacity</b>
</td>
<td> 1024K
</td></tr>
<tr>
<td> <b>CHR window</b>
</td>
<td> 1K, 2K, 4K, or 8K
</td></tr>
<tr>
<td> <b>Nametable <a href="Mirroring.xhtml" title="Mirroring">mirroring</a></b>
</td>
<td> arbitrary, up to 3 source<br/>nametables (plus fill mode)
</td></tr>
<tr>
<td> <b><a href="Bus_conflict.xhtml" title="Bus conflict">Bus conflicts</a></b>
</td>
<td> No
</td></tr>
<tr>
<td> <b>IRQ</b>
</td>
<td> Yes
</td></tr>
<tr>
<td> <b>Audio</b>
</td>
<td> <a href="MMC5_audio.xhtml" title="MMC5 audio">Yes</a>
</td></tr>
<tr>
<td> <b>iNES <a href="Mapper.xhtml" title="Mapper">mappers</a></b>
</td>
<td> <a class="mw-redirect" href="MMC5.xhtml" title="INES Mapper 005">005</a>
</td></tr></table>
</div>
<div class="infobox">
<div style="text-align: center"><b>NESCartDB</b></div>
<table class="oddf0">

<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?ines=5" rel="nofollow">iNES 005</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=-E%25ROM" rel="nofollow">ExROM</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=EKROM" rel="nofollow">EKROM</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=ELROM" rel="nofollow">ELROM</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=ETROM" rel="nofollow">ETROM</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=EWROM" rel="nofollow">EWROM</a>
</td></tr>











</table>
</div>
<p>The <b>Nintendo MMC5</b> is a <a class="mw-redirect" href="Mapper.xhtml" title="MMC">mapper</a> <a href="Category_ASIC_mappers.xhtml" title="Category:ASIC mappers">ASIC</a> used in Nintendo's <a href="ExROM.xhtml" title="ExROM">ExROM</a> Game Pak boards. All MMC5 boards are assigned to <b>mapper 5</b>.
</p><p>Example games:
</p>
<ul><li> <i>Castlevania 3</i></li>
<li> <i>Just Breed</i></li>
<li> <i>Uncharted Waters</i></li>
<li> <i>Romance of the 3 Kingdoms 2</i></li>
<li> <i>Laser Invasion</i></li>
<li> <i>Metal Slader Glory</i></li>
<li> <i>Uchuu Keibitai SDF</i></li>
<li> <i>Shin 4 Nin Uchi Mahjong - Yakuman Tengoku</i></li>
<li> <i>Bandit Kings of Ancient China</i></li></ul>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Banks"><span class="tocnumber">2</span> <span class="toctext">Banks</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#PRG_mode_0"><span class="tocnumber">2.1</span> <span class="toctext">PRG mode 0</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#PRG_mode_1"><span class="tocnumber">2.2</span> <span class="toctext">PRG mode 1</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#PRG_mode_2"><span class="tocnumber">2.3</span> <span class="toctext">PRG mode 2</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#PRG_mode_3"><span class="tocnumber">2.4</span> <span class="toctext">PRG mode 3</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#CHR_mode_0"><span class="tocnumber">2.5</span> <span class="toctext">CHR mode 0</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#CHR_mode_1"><span class="tocnumber">2.6</span> <span class="toctext">CHR mode 1</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#CHR_mode_2"><span class="tocnumber">2.7</span> <span class="toctext">CHR mode 2</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#CHR_mode_3"><span class="tocnumber">2.8</span> <span class="toctext">CHR mode 3</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#Registers"><span class="tocnumber">3</span> <span class="toctext">Registers</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#Sound"><span class="tocnumber">3.1</span> <span class="toctext">Sound</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Configuration"><span class="tocnumber">3.2</span> <span class="toctext">Configuration</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="#PRG_mode_.28.245100.29"><span class="tocnumber">3.2.1</span> <span class="toctext">PRG mode ($5100)</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#CHR_mode_.28.245101.29"><span class="tocnumber">3.2.2</span> <span class="toctext">CHR mode ($5101)</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#PRG_RAM_Protect_1_.28.245102.29"><span class="tocnumber">3.2.3</span> <span class="toctext">PRG RAM Protect 1 ($5102)</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#PRG_RAM_Protect_2_.28.245103.29"><span class="tocnumber">3.2.4</span> <span class="toctext">PRG RAM Protect 2 ($5103)</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="#Extended_RAM_mode_.28.245104.29"><span class="tocnumber">3.2.5</span> <span class="toctext">Extended RAM mode ($5104)</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="#Nametable_mapping_.28.245105.29"><span class="tocnumber">3.2.6</span> <span class="toctext">Nametable mapping ($5105)</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="#Fill-mode_tile_.28.245106.29"><span class="tocnumber">3.2.7</span> <span class="toctext">Fill-mode tile ($5106)</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="#Fill-mode_color_.28.245107.29"><span class="tocnumber">3.2.8</span> <span class="toctext">Fill-mode color ($5107)</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-22"><a href="#PRG_Bankswitching"><span class="tocnumber">3.3</span> <span class="toctext">PRG Bankswitching</span></a>
<ul>
<li class="toclevel-3 tocsection-23"><a href="#PRG_RAM_bank_.28.245113.29"><span class="tocnumber">3.3.1</span> <span class="toctext">PRG RAM bank ($5113)</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#PRG_bank_0_.28.245114.29"><span class="tocnumber">3.3.2</span> <span class="toctext">PRG bank 0 ($5114)</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#PRG_bank_1_.28.245115.29"><span class="tocnumber">3.3.3</span> <span class="toctext">PRG bank 1 ($5115)</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="#PRG_bank_2_.28.245116.29"><span class="tocnumber">3.3.4</span> <span class="toctext">PRG bank 2 ($5116)</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="#PRG_ROM_bank_3_.28.245117.29"><span class="tocnumber">3.3.5</span> <span class="toctext">PRG ROM bank 3 ($5117)</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-28"><a href="#CHR_Bankswitching_.28.245120-.245130.29"><span class="tocnumber">3.4</span> <span class="toctext">CHR Bankswitching ($5120-$5130)</span></a>
<ul>
<li class="toclevel-3 tocsection-29"><a href="#CHR_selects_0.E2.80.A611"><span class="tocnumber">3.4.1</span> <span class="toctext">CHR selects 0…11</span></a></li>
<li class="toclevel-3 tocsection-30"><a href="#Upper_CHR_Bank_bits_.28.245130.29"><span class="tocnumber">3.4.2</span> <span class="toctext">Upper CHR Bank bits ($5130)</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-31"><a href="#Other_Registers"><span class="tocnumber">3.5</span> <span class="toctext">Other Registers</span></a>
<ul>
<li class="toclevel-3 tocsection-32"><a href="#Vertical_Split_Mode_.28.245200.29"><span class="tocnumber">3.5.1</span> <span class="toctext">Vertical Split Mode ($5200)</span></a>
<ul>
<li class="toclevel-4 tocsection-33"><a href="#Operation_Notes"><span class="tocnumber">3.5.1.1</span> <span class="toctext">Operation Notes</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-34"><a href="#Vertical_Split_Scroll_.28.245201.29"><span class="tocnumber">3.5.2</span> <span class="toctext">Vertical Split Scroll ($5201)</span></a></li>
<li class="toclevel-3 tocsection-35"><a href="#Vertical_Split_Bank_.28.245202.29"><span class="tocnumber">3.5.3</span> <span class="toctext">Vertical Split Bank ($5202)</span></a></li>
<li class="toclevel-3 tocsection-36"><a href="#IRQ_Counter_.28.245203.29"><span class="tocnumber">3.5.4</span> <span class="toctext">IRQ Counter ($5203)</span></a></li>
<li class="toclevel-3 tocsection-37"><a href="#IRQ_Status_.28.245204.2C_read.2Fwrite.29"><span class="tocnumber">3.5.5</span> <span class="toctext">IRQ Status ($5204, read/write)</span></a>
<ul>
<li class="toclevel-4 tocsection-38"><a href="#Write"><span class="tocnumber">3.5.5.1</span> <span class="toctext">Write</span></a></li>
<li class="toclevel-4 tocsection-39"><a href="#Read"><span class="tocnumber">3.5.5.2</span> <span class="toctext">Read</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-40"><a href="#Multiplier_.28.245205.2C_read.2Fwrite.29"><span class="tocnumber">3.5.6</span> <span class="toctext">Multiplier ($5205, read/write)</span></a></li>
<li class="toclevel-3 tocsection-41"><a href="#Multiplier_.28.245206.2C_read.2Fwrite.29"><span class="tocnumber">3.5.7</span> <span class="toctext">Multiplier ($5206, read/write)</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-42"><a href="#Expansion_RAM_.28.245C00-.245FFF.2C_read.2Fwrite.29"><span class="tocnumber">3.6</span> <span class="toctext">Expansion RAM ($5C00-$5FFF, read/write)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-43"><a href="#IRQ_Counter_Operation"><span class="tocnumber">4</span> <span class="toctext">IRQ Counter Operation</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#Hardware"><span class="tocnumber">5</span> <span class="toctext">Hardware</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>The MMC5 is the most powerful mapper ASIC Nintendo made for the NES and Famicom.
</p><p>It supports many advanced features, including:
</p>
<ul><li> 4 PRG ROM switching modes</li>
<li> 4 CHR ROM switching modes</li>
<li> Up to 64KB of WRAM, mappable not only at $6000-$7FFF but also within $8000-$DFFF</li>
<li> An 8 bit by 8 bit multiplier with a 16 bit result for performing quick calculations</li>
<li> A scanline based IRQ counter</li>
<li> The ability to use different CHR banks for background and 8x16 sprites (allowing 256 unique 8x16 sprite tiles, independent of the background).</li>
<li> 1024 bytes of on-chip memory, which can be used for 4 different purposes:
<ul><li> An extra general-use nametable</li>
<li> Attribute and tile index expansion - address 16384 background tiles at once, and allow each individual 8x8 tile to have its own palette setting</li>
<li> Vertical split-screen</li>
<li> Extra RAM for storing program variables</li></ul></li>
<li> Three extra sound channels
<ul><li> Two pulse channels, identical to those in the NES APU (except lacking pitch sweeps).</li>
<li> An 8-bit RAW PCM channel</li></ul></li>
<li> A 'fill mode' nametable, which can be instantly set to contain a specific tile in a specific color (useful for screen transitions)</li></ul>
<h2><span class="mw-headline" id="Banks">Banks</span></h2>
<p>The MMC5 provides 4 distinct banking modes for both PRG ROM and CHR ROM.
</p>
<h3><span class="mw-headline" id="PRG_mode_0">PRG mode 0</span></h3>
<ul><li> CPU $6000-$7FFF: 8 KB switchable PRG RAM bank</li>
<li> CPU $8000-$FFFF: 32 KB switchable PRG ROM bank</li></ul>
<h3><span class="mw-headline" id="PRG_mode_1">PRG mode 1</span></h3>
<ul><li> CPU $6000-$7FFF: 8 KB switchable PRG RAM bank</li>
<li> CPU $8000-$BFFF: 16 KB switchable PRG ROM/RAM bank</li>
<li> CPU $C000-$FFFF: 16 KB switchable PRG ROM bank</li></ul>
<h3><span class="mw-headline" id="PRG_mode_2">PRG mode 2</span></h3>
<ul><li> CPU $6000-$7FFF: 8 KB switchable PRG RAM bank</li>
<li> CPU $8000-$BFFF: 16 KB switchable PRG ROM/RAM bank</li>
<li> CPU $C000-$DFFF: 8 KB switchable PRG ROM/RAM bank</li>
<li> CPU $E000-$FFFF: 8 KB switchable PRG ROM bank</li></ul>
<h3><span class="mw-headline" id="PRG_mode_3">PRG mode 3</span></h3>
<ul><li> CPU $6000-$7FFF: 8 KB switchable PRG RAM bank</li>
<li> CPU $8000-$9FFF: 8 KB switchable PRG ROM/RAM bank</li>
<li> CPU $A000-$BFFF: 8 KB switchable PRG ROM/RAM bank</li>
<li> CPU $C000-$DFFF: 8 KB switchable PRG ROM/RAM bank</li>
<li> CPU $E000-$FFFF: 8 KB switchable PRG ROM bank</li></ul>
<h3><span class="mw-headline" id="CHR_mode_0">CHR mode 0</span></h3>
<ul><li> PPU $0000-$1FFF: 8 KB switchable CHR bank</li></ul>
<h3><span class="mw-headline" id="CHR_mode_1">CHR mode 1</span></h3>
<ul><li> PPU $0000-$0FFF: 4 KB switchable CHR bank</li>
<li> PPU $1000-$1FFF: 4 KB switchable CHR bank</li></ul>
<h3><span class="mw-headline" id="CHR_mode_2">CHR mode 2</span></h3>
<ul><li> PPU $0000-$07FF: 2 KB switchable CHR bank</li>
<li> PPU $0800-$0FFF: 2 KB switchable CHR bank</li>
<li> PPU $1000-$17FF: 2 KB switchable CHR bank</li>
<li> PPU $1800-$1FFF: 2 KB switchable CHR bank</li></ul>
<h3><span class="mw-headline" id="CHR_mode_3">CHR mode 3</span></h3>
<ul><li> PPU $0000-$03FF: 1 KB switchable CHR bank</li>
<li> PPU $0400-$07FF: 1 KB switchable CHR bank</li>
<li> PPU $0800-$0BFF: 1 KB switchable CHR bank</li>
<li> PPU $0C00-$0FFF: 1 KB switchable CHR bank</li>
<li> PPU $1000-$13FF: 1 KB switchable CHR bank</li>
<li> PPU $1400-$17FF: 1 KB switchable CHR bank</li>
<li> PPU $1800-$1BFF: 1 KB switchable CHR bank</li>
<li> PPU $1C00-$1FFF: 1 KB switchable CHR bank</li></ul>
<h2><span class="mw-headline" id="Registers">Registers</span></h2>
<h3><span class="mw-headline" id="Sound">Sound</span></h3>
<p>For details on sound operation, see <a href="MMC5_audio.xhtml" title="MMC5 audio">MMC5 audio</a>
</p>
<h3><span class="mw-headline" id="Configuration">Configuration</span></h3>
<h4><span class="mw-headline" id="PRG_mode_.28.245100.29">PRG mode ($5100)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxPP
       ||
       ++- Select PRG banking mode
</pre>
<ul><li> 0 - One 32KB bank</li>
<li> 1 - Two 16KB banks</li>
<li> 2 - One 16KB bank ($8000-$BFFF) and two 8KB banks ($C000-$DFFF and $E000-$FFFF)</li>
<li> 3 - Four 8KB banks</li></ul>
<h4><span class="mw-headline" id="CHR_mode_.28.245101.29">CHR mode ($5101)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxCC
       ||
       ++- Select CHR banking mode
</pre>
<ul><li> 0 - 8KB CHR pages</li>
<li> 1 - 4KB CHR pages</li>
<li> 2 - 2KB CHR pages</li>
<li> 3 - 1KB CHR pages</li></ul>
<h4><span class="mw-headline" id="PRG_RAM_Protect_1_.28.245102.29">PRG RAM Protect 1 ($5102)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxWW
       ||
       ++- RAM protect 1
</pre>
<p>In order to enable writing to PRG RAM, this must be set to '10'.
</p>
<h4><span class="mw-headline" id="PRG_RAM_Protect_2_.28.245103.29">PRG RAM Protect 2 ($5103)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxWW
       ||
       ++- RAM protect 2
</pre>
<p>In order to enable writing to PRG RAM, this must be set to '01'.
</p>
<h4><span class="mw-headline" id="Extended_RAM_mode_.28.245104.29">Extended RAM mode ($5104)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxXX
       ||
       ++- Specify extended RAM usage
</pre>
<ul><li> 0 - Use as extra nametable (possibly for split mode)</li>
<li> 1 - Use as extended attribute data (can also be used as extended nametable)</li>
<li> 2 - Use as ordinary RAM</li>
<li> 3 - Use as ordinary RAM, write protected</li></ul>
<h4><span class="mw-headline" id="Nametable_mapping_.28.245105.29">Nametable mapping ($5105)</span></h4>
<pre>7  bit  0
---- ----
DDCC BBAA
|||| ||||
|||| ||++- Select nametable at PPU $2000-$23FF
|||| ++--- Select nametable at PPU $2400-$27FF
||++------ Select nametable at PPU $2800-$2BFF
++-------- Select nametable at PPU $2C00-$2FFF
</pre>
<p>Nametable values:
</p>
<ul><li> 0 - On-board VRAM page 0</li>
<li> 1 - On-board VRAM page 1</li>
<li> 2 - Internal Expansion RAM, only if the Extended RAM mode allows it ($5104 is 00/01); otherwise, the nametable will read as all zeros,</li>
<li> 3 - Fill-mode data</li></ul>
<p><a href="Mirroring.xhtml" title="Mirroring">Mirroring</a> examples:
</p>
<table class="wikitable">
<tr>
<th> Mode </th>
<th> Value </th>
<th> NTD </th>
<th> NTC </th>
<th> NTB </th>
<th> NTA
</th></tr>
<tr>
<td> Horizontal </td>
<td> $50 </td>
<td> %01 </td>
<td> %01 </td>
<td> %00 </td>
<td> %00
</td></tr>
<tr>
<td> Vertical   </td>
<td> $44 </td>
<td> %01 </td>
<td> %00 </td>
<td> %01 </td>
<td> %00
</td></tr>
<tr>
<td> 1-Screen CIRAM 0 </td>
<td> $00 </td>
<td> %00 </td>
<td> %00 </td>
<td> %00 </td>
<td> %00
</td></tr>
<tr>
<td> 1-Screen CIRAM 1 </td>
<td> $55 </td>
<td> %01 </td>
<td> %01 </td>
<td> %01 </td>
<td> %01
</td></tr>
<tr>
<td> 1-Screen ExRAM </td>
<td> $AA </td>
<td> %10 </td>
<td> %10 </td>
<td> %10 </td>
<td> %10
</td></tr>
<tr>
<td> 1-Screen Fill-mode </td>
<td> $FF </td>
<td> %11 </td>
<td> %11 </td>
<td> %11 </td>
<td> %11
</td></tr>
<tr>
<td> Diagonal   </td>
<td> $14 </td>
<td> %00 </td>
<td> %01 </td>
<td> %01 </td>
<td> %00
</td></tr>
<tr>
<td> L-Shaped   </td>
<td> $54 </td>
<td> %01 </td>
<td> %01 </td>
<td> %01 </td>
<td> %00
</td></tr>
<tr>
<td> 3-Screen Horizontal </td>
<td> $A4 </td>
<td> %10 </td>
<td> %10 </td>
<td> %01 </td>
<td> %00
</td></tr>
<tr>
<td> 3-Screen Vertical </td>
<td> $98 </td>
<td> %10 </td>
<td> %01 </td>
<td> %10 </td>
<td> %00
</td></tr>
<tr>
<td> 3-Screen Diagonal </td>
<td> $94 </td>
<td> %10 </td>
<td> %01 </td>
<td> %01 </td>
<td> %00
</td></tr>
<tr>
<td> Pseudo 4-Screen </td>
<td> $E4 </td>
<td> %11 </td>
<td> %10 </td>
<td> %01 </td>
<td> %00
</td></tr></table>
<h4><span class="mw-headline" id="Fill-mode_tile_.28.245106.29">Fill-mode tile ($5106)</span></h4>
<pre> All eight bits specify the tile number to use for fill-mode nametable
</pre>
<h4><span class="mw-headline" id="Fill-mode_color_.28.245107.29">Fill-mode color ($5107)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxAA
       ||
       ++- Specify attribute bits to use for fill-mode nametable
</pre>
<h3><span class="mw-headline" id="PRG_Bankswitching">PRG Bankswitching</span></h3>
<h4><span class="mw-headline" id="PRG_RAM_bank_.28.245113.29">PRG RAM bank ($5113)</span></h4>
<pre>7  bit  0
---- ----
xxxx xCBB
      |||
      |++- Select 8KB PRG RAM bank at $6000-$7FFF
      +--- Select PRG RAM chip
</pre>
<p>The MMC5 supports 2 PRG RAM chips, each up to 32KB in length. Either or both may be battery-backed; <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?ines=5&amp;battery=Yes&amp;group=groupid" rel="nofollow">11 of the 14 MMC5 games</a> include a battery. The following configurations of WRAM are known to exist in ExROM games:
</p>
<ul><li> 0KB: No chips</li>
<li> 8KB: 1x 8KB chip</li>
<li> 16KB: 2x 8KB chip</li>
<li> 32KB: 1x 32KB chip</li></ul>
<p>In <a href="INES.xhtml" title="INES">the original .NES format</a>, byte 8 of the file's header should indicate how many pages are present, but ROM images in the wild that use this mapper may not have byte 8 set correctly, nor do emulators necessarily honor this number.
Byte 10 of the <a href="NES_2_0.xhtml" title="NES 2.0">NES 2.0</a> header should be reliable.
</p><p>No ExROM game is known to write PRG RAM with one bank value and then attempt to read back the same data with a different bank value.  So lacking better information, mirroring can be ignored, 64KB of WRAM could be emulated at all times, and $5113 can be treated as a simple page offset into that 64KB.  Emulating 32KB won't work, even if no games used more than that; because 16KB games will expect to see their two distinct pages by toggling bit 2, not bit 0.
</p><p><i>Uncharted Waters</i> requires PRG-RAM banking.
</p>
<h4><span class="mw-headline" id="PRG_bank_0_.28.245114.29">PRG bank 0 ($5114)</span></h4>
<pre>7  bit  0
---- ----
RBBB BBBB
|||| ||||
|+++-++++- Bank number
+--------- RAM/ROM toggle (0: RAM; 1: ROM)
</pre>
<ul><li> Mode 0 - Ignored</li>
<li> Mode 1 - Ignored</li>
<li> Mode 2 - Ignored</li>
<li> Mode 3 - Select an 8KB PRG bank at $8000-$9FFF</li></ul>
<p>When selecting a RAM bank, treat bank bits as indicated for the PRG RAM bank register at $5113.
</p><p>Bandit Kings of Ancient China maps PRG-RAM to the CPU $8000+ area and expects to be able to write to it through there.  Failure to emulate this causes corruption when the background is restored on the world map.
</p>
<h4><span class="mw-headline" id="PRG_bank_1_.28.245115.29">PRG bank 1 ($5115)</span></h4>
<pre>7  bit  0
---- ----
RBBB BBBB
|||| ||||
|+++-++++- Bank number
+--------- RAM/ROM toggle (0: RAM; 1: ROM)
</pre>
<ul><li> Mode 0 - Ignored</li>
<li> Mode 1 - Select a 16KB PRG bank at $8000-$BFFF (ignore bottom bit)</li>
<li> Mode 2 - Select a 16KB PRG bank at $8000-$BFFF (ignore bottom bit)</li>
<li> Mode 3 - Select an 8KB PRG bank at $A000-$BFFF</li></ul>
<p>When selecting a RAM bank, treat bank bits as indicated for the PRG RAM bank register at $5113.
</p>
<h4><span class="mw-headline" id="PRG_bank_2_.28.245116.29">PRG bank 2 ($5116)</span></h4>
<pre>7  bit  0
---- ----
RBBB BBBB
|||| ||||
|+++-++++- Bank number
+--------- RAM/ROM toggle (0: RAM; 1: ROM)
</pre>
<ul><li> Mode 0 - Ignored</li>
<li> Mode 1 - Ignored</li>
<li> Mode 2 - Select an 8KB PRG bank at $C000-$DFFF</li>
<li> Mode 3 - Select an 8KB PRG bank at $C000-$DFFF</li></ul>
<p>When selecting a RAM bank, treat bank bits as indicated for the PRG RAM bank register at $5113.
</p>
<h4><span class="mw-headline" id="PRG_ROM_bank_3_.28.245117.29">PRG ROM bank 3 ($5117)</span></h4>
<pre>7  bit  0
---- ----
xBBB BBBB
 ||| ||||
 +++-++++- PRG ROM bank number
</pre>
<ul><li> Mode 0 - Select a 32KB PRG ROM bank at $8000-$FFFF (ignore bottom 2 bits)</li>
<li> Mode 1 - Select a 16KB PRG ROM bank at $C000-$FFFF (ignore bottom bit)</li>
<li> Mode 2 - Select an 8KB PRG ROM bank at $E000-$FFFF</li>
<li> Mode 3 - Select an 8KB PRG ROM bank at $E000-$FFFF</li></ul>
<p><br/>
</p>
<h3><span class="mw-headline" id="CHR_Bankswitching_.28.245120-.245130.29">CHR Bankswitching ($5120-$5130)</span></h3>
<p>Registers $5120-$5127 apply to sprite graphics and $5128-$512B for background graphics, but ONLY when 8x16 sprites are enabled.
</p><p>Otherwise, the last set of registers written to (either $5120-$5127 or $5128-$512B) will be used for all graphics.
</p>
<h4><span class="mw-headline" id="CHR_selects_0.E2.80.A611">CHR selects 0…11</span></h4>
<table class="wikitable">
<tr>
<th> </th>
<th colspan="4">PPU memory affected for each mode (see <a href="#CHR_mode_.28.245101.29">#CHR mode ($5101)</a>)
</th></tr>
<tr>
<th> Write to CPU address </th>
<th> 1 KiB </th>
<th> 2 KiB </th>
<th> 4 KiB </th>
<th> 8 KiB
</th></tr>
<tr>
<td> $5120 </td>
<td> $0000-$03FF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5121 </td>
<td> $0400-$07FF </td>
<td> $0000-$07FF </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5122 </td>
<td> $0800-$0BFF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5123 </td>
<td> $0C00-$0FFF </td>
<td> $0800-$0FFF </td>
<td> $0000-$0FFF </td>
<td> none
</td></tr>
<tr>
<td> $5124 </td>
<td> $1000-$13FF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5125 </td>
<td> $1400-$17FF </td>
<td> $1000-$17FF </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5126 </td>
<td> $1800-$1BFF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5127 </td>
<td> $1C00-$1FFF </td>
<td> $1800-$1FFF </td>
<td> $1000-$1FFF </td>
<td> $0000-$1FFF
</td></tr>
<tr>
<td> $5128 </td>
<td> $0000-$03FF and $1000-$13FF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $5129 </td>
<td> $0400-$07FF and $1400-$17FF </td>
<td> $0000-$07FF and $1000-$17FF </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $512A </td>
<td> $0800-$0BFF and $1800-$1BFF </td>
<td> none </td>
<td> none </td>
<td> none
</td></tr>
<tr>
<td> $512B </td>
<td> $0C00-$0FFF and $1C00-$1FFF </td>
<td> $0800-$0FFF and $1800-$1FFF </td>
<td> $0000-$0FFF and $1000-$1FFF </td>
<td> $0000-$1FFF
</td></tr></table>
<h4><span class="mw-headline" id="Upper_CHR_Bank_bits_.28.245130.29">Upper CHR Bank bits ($5130)</span></h4>
<pre>7  bit  0
---- ----
xxxx xxBB
       ||
       ++- Upper bits for subsequent CHR bank writes
</pre>
<p>When the MMC5 is using 2KB/1KB CHR banks, only 512KB/256KB of CHR ROM can be selected using the previous registers. To access all 1024KB in those modes, first write the upper bit(s) to register $5130 and then write the lower bits to $5120-$512B.
When the Extended RAM mode is set to 1, this selects which 256KB of CHR ROM is to be used for all background tiles on the screen.
</p>
<h3><span class="mw-headline" id="Other_Registers">Other Registers</span></h3>
<h4><span class="mw-headline" id="Vertical_Split_Mode_.28.245200.29">Vertical Split Mode ($5200)</span></h4>
<pre>7  bit  0
---- ----
ESxW WWWW
|| | ||||
|| +-++++- Specify vertical split start/stop tile
|+-------- Specify vertical split screen side (0:left; 1:right)
+--------- Enable vertical split mode
</pre>
<p>When vertical split mode is enabled, all VRAM fetches corresponding to the appropriate screen region will be redirected to Extended RAM (as long as its mode is set to 0 or 1).
</p><p><i>Uchuu Keibitai SDF</i> is the only known game to use split screen mode (during the intro, where it shows ship stats).
</p>
<h5><span class="mw-headline" id="Operation_Notes">Operation Notes</span></h5>
<p>34 BG tiles are fetched per scanline.  MMC5 performs the split by watching which BG tile is being fetched,
and if it is within the split region, replacing the normal NT data with the split screen data according to
the absolute screen position of the tile (i.e., ignoring the coarse horizontal and vertical scroll output
as part of the VRAM address for the fetch).  Since it operates on a per-tile basis... fine horizontal
scrolling &quot;carries into&quot; the split region.  Setting the horizontal scroll to 1-7 will result in the split
being moved to the left 1-7 pixels, however when you scroll to 8, the split will &quot;snap&quot; back to its normal
position.
</p><p>Left Split:
</p>
<ul><li> Tiles 0 to T-1 are the split.</li>
<li> Tiles T and on are rendered normally.</li></ul>
<p>Right Split:
</p>
<ul><li> Tiles 0 to T-1 are rendered normally.</li>
<li> Tiles T and on are the split.</li></ul>
<p>There is no coarse horizontal scrolling of any kind for the split.  Right-side splits will always show the
right-hand side of the nametable, and left-hand splits will always show the left-hand side of the nametable.
Coarse horizontal scrolling can still be used for the non-split region.
</p><p>ExRAM is always used as the nametable in split screen mode.
</p><p>Vertical scrolling for the split operates like normal vertical scrolling.  0-239 are valid scroll values,
whereas 240-255 will display Attribute table data as NT data for the first few scanlines.  The split nametable
will wrap so that the top of the nametable will appear below as you scroll (just as if vertical mirroring
were employed).
</p><p>$5202 selects (yet another) CHR page to use for the BG.  This page is used for the split region only.
</p>
<h4><span class="mw-headline" id="Vertical_Split_Scroll_.28.245201.29">Vertical Split Scroll ($5201)</span></h4>
<pre> All eight bits specify the vertical scroll value to use in split region
</pre>
<p>MMC5 boards wired in &quot;CL&quot; mode may only use vertical scroll values whose bottom 3 bits match the <a href="PPU.xhtml" title="PPU">Nes PPU</a>'s fine vertical scroll value. In &quot;SL&quot; mode, any values can be used.
</p><p>Horizontal scrolling is not allowed within the split region.
</p>
<h4><span class="mw-headline" id="Vertical_Split_Bank_.28.245202.29">Vertical Split Bank ($5202)</span></h4>
<pre> All eight bits select a 4 KB CHR bank at $0000-$0FFF and $1000-$1FFF while rendering the split region.
</pre>
<h4><span class="mw-headline" id="IRQ_Counter_.28.245203.29">IRQ Counter ($5203)</span></h4>
<pre> All eight bits specify the scanline number to generate IRQ at
</pre>
<h4><span class="mw-headline" id="IRQ_Status_.28.245204.2C_read.2Fwrite.29">IRQ Status ($5204, read/write)</span></h4>
<h5><span class="mw-headline" id="Write">Write</span></h5>
<pre>7  bit  0
---- ----
Exxx xxxx
|
+--------- IRQ Enable flag (1=IRQs enabled)
</pre>
<h5><span class="mw-headline" id="Read">Read</span></h5>
<pre>7  bit  0
---- ----
SVxx xxxx
||
|+-------- &quot;In Frame&quot; signal
+--------- IRQ Pending flag
</pre>
<p>When set, the &quot;In Frame&quot; signal specifies that the PPU is currently rendering a scanline.  It also plays a role in how IRQs are generated.
</p><p>The IRQ Pending flag may be raised even if IRQs are disabled.
</p><p>Any time this register is read, the IRQ Pending flag is cleared (acknowledging the IRQ).
</p><p>For details, see <a href="MMC5.xhtml#IRQ_Counter_Operation" title="MMC5">IRQ counter operation</a>.
</p>
<h4><span class="mw-headline" id="Multiplier_.28.245205.2C_read.2Fwrite.29">Multiplier ($5205, read/write)</span></h4>
<pre> Writes specify the eight-bit multiplicand; reads return the lower eight bits of the product
</pre>
<h4><span class="mw-headline" id="Multiplier_.28.245206.2C_read.2Fwrite.29">Multiplier ($5206, read/write)</span></h4>
<pre> Writes specify the eight-bit multiplier; reads return the upper eight bits of the product
</pre>
<h3><span class="mw-headline" id="Expansion_RAM_.28.245C00-.245FFF.2C_read.2Fwrite.29">Expansion RAM ($5C00-$5FFF, read/write)</span></h3>
<ul><li> Mode 0/1 - Not readable (returns <s>open bus</s>), can only be written while the PPU is rendering (otherwise, 0 is written)</li>
<li> Mode 2 - Readable and writable</li>
<li> Mode 3 - Read-only</li></ul>
<p>In Mode 1, nametable fetches are processed normally, and can come from CIRAM nametables, fill mode, or even Expansion RAM, but attribute fetches are replaced by data from Expansion RAM.
</p><p>Each byte of Expansion RAM is used to enhance the tile at the corresponding address in every nametable (so the extended attributes are 1-screen mirrored):
</p>
<pre>7  bit  0
---- ----
AACC CCCC
|||| ||||
||++-++++- Select 4 KB CHR bank to use with specified tile
++-------- Select palette to use with specified tile
</pre>
<p>The pattern fetches ignore the standard CHR banking bits, and instead use the top two bits of $5130 and the bottom 6 bits from Expansion RAM to choose a 4KB bank to select the tile from.
</p><p><i>Just Breed</i> uses extended attributes continuously.
</p>
<h2><span class="mw-headline" id="IRQ_Counter_Operation">IRQ Counter Operation</span></h2>
<p>The MMC5 has an 8-bit incrementing IRQ counter that watches the PPU as it renders, and counts each passing scanline.  When the counter reaches the desired IRQ scanline (specified by the $5203 register), it signals an IRQ.  It also uses an In Frame signal which can be read from $5204.6 in conjunction with the 8-bit counter.  Games can use this signal as an indication of whether or not the PPU is currently in rendering time.
</p><p>The game has no direct access to the internal IRQ counter.
</p><p>How the MMC5 actually detects scanlines is still unknown.  The best evidence now is that it watches for the two dummy nametable reads which occur at the end of each scanline, see <a class="external autonumber" href="http://forums.nesdev.com/viewtopic.php?t=7653" rel="nofollow">[1]</a>.  It appears that all 240 rendered scanlines as well as the pre-render scanline are all detected by the MMC5.  It also appears that scanlines are detected near their end (or near the start of the next scanline).  When a game sets the desired IRQ scanline to $04, the IRQ will occur near the start of the 5th rendered scanline.
</p><p>When the MMC5 detects a scanline, the following events occur:
</p>
<ul><li> if the In Frame signal is clear, set it, reset the IRQ counter to 0, and clear the IRQ Pending flag</li>
<li> otherwise, increment the IRQ counter.  If it now equals the IRQ scanline ($5203), raise IRQ Pending flag</li></ul>
<p>Note the above logic makes it impossible for an IRQ to occur when $5203 is set to $00
</p><p>The In Frame signal is cleared as soon as the MMC5 no longer detects PPU rendering.  This happens at the end of the last rendered scanline, and whenever the PPU is switched off (Sprite and BG rendering disabled).
</p><p>Note that there are side-effects to switching off the PPU mid frame.  Clearing the In Frame signal effectively resets the IRQ counter as can be seen in the logic given above.  Therefore, if the PPU is switched back on in the frame, the IRQ counter will begin counting from $00 again.
</p><p>The IRQ Pending flag is raised when the desired scanline is reached <i>regardless</i> of whether or not IRQs are enabled.  $5204.7 can still be read as set even when IRQ Enable flag is clear.  However, an actual IRQ is only sent to the CPU if both the IRQ Enable flag and IRQ Pending flag are raised.
</p>
<h2><span class="mw-headline" id="Hardware">Hardware</span></h2>
<p>The MMC5 exists in a 100-pin TQFP package, see <a href="MMC5_pinout.xhtml" title="MMC5 pinout">MMC5 pinout</a> for details.
</p><p>MMC5 cartridge PCBs can be configured to different modes, see <a href="ExROM.xhtml" title="ExROM">ExROM</a> for details.
</p><p>At least two different versions of the MMC5 are known to exist: MMC5, and MMC5B. Their differences are unknown.
</p><p>Games seem to expect $5117 to be $FF on powerup (last PRG page swapped in).  Additionally, <i>Romance of the 3 Kingdoms 2</i> seems to expect it to be in 8k PRG mode ($5100 = $03).
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li> NES Mapper list by Disch <a class="external autonumber" href="http://www.romhacking.net/documents/362/" rel="nofollow">[2]</a></li>
<li> Nintendo MMC5 by goroh, translated by Sgt. Bowhack <a class="external autonumber" href="http://nesdev.com/mmc5-e.txt" rel="nofollow">[3]</a></li>
<li> Nintendo MMC5 Bankswitching by Kevin Horton <a class="external autonumber" href="http://nesdev.com/mmc5_bank_switch.txt" rel="nofollow">[4]</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.296 seconds
Real time usage: 0.302 seconds
Preprocessor visited node count: 595/1000000
Preprocessor generated node count: 2201/1000000
Post‐expand include size: 3499/2097152 bytes
Template argument size: 662/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:91-1!*!0!!en!*!* and timestamp 20160208220129 and revision id 11323
 -->
<p class="categories">Categories: <a href="Category_Mappers_with_large_PRG_RAM.xhtml">Mappers with large PRG RAM</a>, <a href="Category_Mappers_using__4020__5FFF.xhtml">Mappers using $4020-$5FFF</a>, <a href="Category_Nintendo_licensed_mappers.xhtml">Nintendo licensed mappers</a>, <a href="Category_In_NesCartDB.xhtml">In NesCartDB</a>, <a href="Category_Mappers_with_scanline_IRQs.xhtml">Mappers with scanline IRQs</a>, <a href="Category_ASIC_mappers.xhtml">ASIC mappers</a></p></div></body></html>
<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Blargg SPC Upload</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Blargg SPC Upload</h1><div class="article">
<p>This covers the important points of uploading an SPC music file into the SNES SPC-700 sound module. See <a class="external text" href="http://blargg.8bitalley.com/misc/spc_loader.c" rel="nofollow">spc_loader.c</a> for tested code in C. Thanks to Anti Resonance for much of the original algorithm. I've mostly streamlined and tweaked it.
</p><p>The main tasks to play an SPC file are
</p>
<ul><li> Restore DSP registers</li>
<li> Restore 64K RAM</li>
<li> Restore CPU registers and other final values</li></ul>
<h2><span class="mw-headline" id="DSP_registers">DSP registers</span></h2>
<p>We can't just restore all the registers directly, because some have effects that depend on the others, or cause RAM to be overwritten. Those must be restored at the end. We make a copy of the DSP registers and modify as follows:
</p>
<table border="1" cellpadding="3" cellspacing="0">
<tr>
<th> Register
</th>
<th> Value
</th>
<th> Purpose
</th></tr>
<tr>
<td> KOFF
</td>
<td> $00
</td>
<td> There are no notes to stop, and if any bits were set, it would stop the first notes.
</td></tr>
<tr>
<td> KON
</td>
<td> $00
</td>
<td> We don't want notes to start before we've restored DSP registers and RAM.
</td></tr>
<tr>
<td> FLG
</td>
<td> $60
</td>
<td> Enables mute, and disables echo write. We can't have echo writing over memory while restoring.
</td></tr>
<tr>
<td> EDL
</td>
<td> $00
</td>
<td> Sets length of echo buffer, but not until <i>after</i> the current echo pointer reaches the end of the buffer. Since EDL might have been $0F previously, we must assume that this new EDL of $00 might take as long as 1/4 second to take effect. We write DSP registers first, then the 64K RAM, so during the time taken to write RAM, the echo pointer will have looped and taken on a new loop size of zero. To take less than 1/4 second uploading the 64K RAM, you'd have to upload each byte in less than 4 S-SMP cycles, an impossibility. After all this, with EDL <i>and</i> the internal echo position reliably at 0, we then restore the proper EDL from the SPC file, knowing exactly where it will first start writing echo samples.
</td></tr></table>
<p>With these modifications, we upload them to the DSP via a short SPC program:
</p>
<pre>       .org $0002
       mov x,#dsp_regs     ; pointer to table
       mov y,#0
next:  mov a,(x)+          ; copy to DSP
       mov $F2,y
       mov $F3,a
       inc y
       bpl next            ; stop when y &gt; 127
       jmp !$FFC0          ; rerun bootrom
dsp_regs:
       .res 128            ; modified values to load
</pre>
<h2><span class="mw-headline" id="64K_RAM">64K RAM</span></h2>
<p>Again, we can't restore every byte of RAM directly, because some of the I/O locations have effects that we can't have just yet. We make a copy of the 64K RAM and modify it as follows:
</p>
<table border="1" cellpadding="3" cellspacing="0">
<tr>
<th> Address
</th>
<th> Value
</th>
<th> Purpose
</th></tr>
<tr>
<td> $0000
</td>
<td> $00
</td>
<td rowspan="2">The bootloader uses these locations to store a pointer to the current destination page, so when we overwrite them, we must overwrite with the same values.
</td></tr>
<tr>
<td> $0001
</td>
<td> $00
</td></tr>
<tr>
<td> $00F0
</td>
<td> $0A
</td>
<td> Test register
</td></tr>
<tr>
<td> $00F1
</td>
<td> $80
</td>
<td> Enables IPL ROM and stops timers. The IPL ROM must be enabled, because the bootloader is there. Note that having it enabled doesn't prevent storing values into RAM at $FFC0-$FFFF, so we can load those just fine.
</td></tr>
<tr>
<td> $00F2
</td>
<td> $6C
</td>
<td> DSP address
</td></tr>
<tr>
<td> $00F3
</td>
<td> $60
</td>
<td> We just rewrite FLG with $60 again here, because we have to write something to the DSP.
</td></tr>
<tr>
<td> $00F4
</td>
<td> $F4
</td>
<td> This is critical. This is the value the loader would have written here normally. If we write a different value, it will disrupt communication and hang the loader, but only very rarely, because the window of opportunity is small.
</td></tr>
<tr>
<td> $00FD
</td>
<td> $00
</td>
<td rowspan="3">Not really necessary to be zero, since the timer out registers are only readable, but why not.
</td></tr>
<tr>
<td> $00FE
</td>
<td> $00
</td></tr>
<tr>
<td> $00FF
</td>
<td> $00
</td></tr></table>
<p>Some final patching is necessary before sending the RAM.
</p>
<h2><span class="mw-headline" id="Final_restoration">Final restoration</span></h2>
<p>With those values patched, we still need to insert some code to restore the final registers. We need to find some free space in RAM. Many have long stretches of $FF bytes, a good candidate. If the echo buffer is enabled, it could be used, though this will introduce a slight click. Some other SPC files have runs of the repeating pattern of 32 $FF bytes followed by 32 $00 bytes, aligned to a 32-byte boundary.
</p><p>Once we've found space, we can patch in the following code. The notation spc.ram [n] refers to the RAM in the unpatched SPC file, spc.dsp [reg] to the unpatched DSP value, and spc.&lt;register&gt; to the processor register value in the SPC file.
</p>
<pre>   ; Restore first two bytes of RAM
   mov $00,#spc.ram [0]
   mov $01,#spc.ram [1]
   
   ; Restore CPU registers
   mov x,#spc.sp - 1   ; See below for why the -1
   mov sp,X
   mov y,#spc.y
   mov x,#spc.x
   mov a,#spc.a
   
   ; Restore SMP/DSP registers
   mov $F1,#spc.ram [$F1] AND $CF    ; Control
</pre>
<p>Note that we clear bits 4 and 5, because we don't want the input ports being cleared.
</p>
<pre>   mov $F3,#spc.dsp [FLG]
</pre>
<p>Now we restore the original FLG value, which might enable echo writing. Note that we don't need to set the DSP address, as it's already been set during RAM restore. Since we know the echo pointer will now be at the beginning of the echo buffer, writing is safe. If we put this final loader in the echo buffer, we should NOT place it at the very beginning, otherwise we'll be chased by the echo overwriting as we execute here, and might lose the race. So we should be at a small offset like 1024 (small enough to fit in case EDL is only $01).
</p>
<pre>   mov $F2,#$7D    ; EDL
   mov $F3,#spd.dsp [EDL]
   mov $F2,#$4C    ; KON
   mov $F3,#spd.dsp [KON]
</pre>
<p>No need to restore the original KOFF.
</p>
<pre>   mov $F2,#spc.ram [$F2]   ; DSP Address
</pre>
<p>Don't forget this, as the code might be expecting the address to already be set to something in particular.
</p>
<pre>   ; Restore PSW and PC
   pop psw
   mov spc.sp,#saved byte from stack
</pre>
<p>We pop the saved PSW we push on the stack before executing this final restore code. That saved PSW has the P flag set. Then we restore that byte on the stack to whatever it originally was. The SPC file could have been depending on that byte, even though it's outside the current stack. The P flag is set, so we can use direct-page addressing here.
</p>
<pre>   setp or clrp    ; depending on what's set in PSW in SPC file
</pre>
<p>Now we restore the P flag to what it should be.
</p>
<pre>   jmp !spc.pc
</pre>
<p>And finally jump to wherever the SPC was executing when the SPC file was captured.
</p><p>The above code relies on the PSW being on the stack, so we must push that ourselves, saving the old byte so we can restore that too.
</p><p>With the 64K RAM patched, we upload that to the SPC and execute our patch inside it, and away it goes. Immediately after that, we must do one final restoration: write the final values to the input ports that were there when the SPC was captured.
</p>
<!-- 
NewPP limit report
CPU time usage: 0.034 seconds
Real time usage: 0.036 seconds
Preprocessor visited node count: 11/1000000
Preprocessor generated node count: 16/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:398-1!*!*!!*!*!* and timestamp 20160208224815 and revision id 5544
 -->
<p class="categories">Categories: <a href="Category_Super_NES.xhtml">Super NES</a>, <a href="Category_Audio.xhtml">Audio</a></p></div></body></html>
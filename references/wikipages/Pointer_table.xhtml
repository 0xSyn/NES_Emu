<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Pointer table</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Pointer table</h1><div class="article">
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Preface"><span class="tocnumber">1</span> <span class="toctext">Preface</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#The_problem"><span class="tocnumber">2</span> <span class="toctext">The problem</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Organization_of_the_data_file"><span class="tocnumber">3</span> <span class="toctext">Organization of the data file</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Using_the_pointer_table"><span class="tocnumber">4</span> <span class="toctext">Using the pointer table</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Code_pointer_tables"><span class="tocnumber">5</span> <span class="toctext">Code pointer tables</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Preface">Preface</span></h2>
<p>A pointer table is any area of memory that is filled with the addresses of other specific areas of memory. When we store the address of an area of memory this is referred to as a &quot;pointer&quot;, because it &quot;points to&quot; that area of memory. This article demonstrates how a pointer table can be used to access variable-length data.
</p>
<h2><span class="mw-headline" id="The_problem">The problem</span></h2>
<p>When we have multiple pieces of variable-length data, such as complex sprite meta-tile definitions, we need to be able to access those pieces of data using some index number. This allows us to uniquely identify each meta-tile compactly. This also allows us to go to the previous or next meta-tile without having to know anything about the underlying data.
</p>
<h2><span class="mw-headline" id="Organization_of_the_data_file">Organization of the data file</span></h2>
<p>Typically the pointer table and the data it points to is defined together within an assembly file. This allows us to easily change the data and re-arrange the pointer table as needed.
</p><p><i>Tip: If you prefer to keep this data in a external file format such as XML and process it with a custom tool, have the tool generate the assembly file described below rather than a binary format. This is often much easier to debug and address.</i>
</p><p>In our sprite meta-tile example we might have several sprite frame definitions at the bottom of the file. These definitions will use the assembler's BYTE directive (typically .db or .byte) to declare the data. Each frame's data will be preceded by a unique label that we will reference from within the pointer table.
</p><p>The pointer table usually comes at the top of the file. The pointer table will use the assembler's BYTE directive again to store the high and low bytes of our frame labels in two different tables.
</p><p>Finally the length of the data must be stored so we know how much data to copy. We use the assembler's ability to perform math on labels for this. Not all assemblers support this however.
</p>
<pre>
; Pointer table for our frames
frame_pointers_lo:
    .byte &lt;_frame01, &lt;_frame02, &lt;_frame03, &lt;_frame04
frame_pointers_hi:
    .byte &gt;_frame01, &gt;_frame02, &gt;_frame03, &gt;_frame04

; Data lengths
frame_data_lengths:
    .byte _frame02 - _frame01, _frame03 - _frame02
    .byte _frame04 - _frame03, _frame_end - _frame04

; Frame Data
_frame01:
    .byte &quot;Some random data&quot;
_frame02:
    .byte &quot;related to the frames&quot;
_frame03:
    .byte &quot;that is of variable&quot;
_frame04:
    .byte &quot;length&quot;, $00
_frame_end:
</pre>
<h2><span class="mw-headline" id="Using_the_pointer_table">Using the pointer table</span></h2>
<p>To use the pointer table to access our data we will need to use the frame index as an offset into the pointer table. We then load this pointer into a zero-page variable so we can use it to load data.
</p><p>Example:
</p>
<pre>
; Routine to load the sprite frame definition for a given frame.
; Y = The frame to load data for
.proc load_frame_data
    ; Local variables
    .segment &quot;zp&quot;
        frame_pointer: .word 0 ; Our zero-page pointer for the frame data.
    .segment &quot;ram&quot;
        frame_length: .byte 0 ; The number of bytes in our frame data

    ; Routine Start
    .segment &quot;prg&quot;

    ; Frame pointer low byte
    lda frame_pointers_lo,y
    sta frame_pointer

    ; Frame pointer high byte
    lda frame_pointers_hi,y
    sta frame_pointer

    ; Iterate over each byte
    lda frame_data_lengths,y
    sta frame_length
    ldy #0
data_loop:
    lda (frame_pointer),y
    ; Do something with the frame byte in A, like transform it into OAM data
    iny
    cpy frame_length
    bne data_loop

    rts
.endproc
</pre>
<h2><span class="mw-headline" id="Code_pointer_tables">Code pointer tables</span></h2>
<p>Code is another form of data, and subroutines can be accessed through pointer tables as well.
See <a href="Jump_table.xhtml" title="Jump table">Jump table</a>.
</p>
<!-- 
NewPP limit report
CPU time usage: 0.022 seconds
Real time usage: 0.024 seconds
Preprocessor visited node count: 36/1000000
Preprocessor generated node count: 64/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:560-1!*!0!!en!*!* and timestamp 20160208215500 and revision id 9035
 -->
</div></body></html>
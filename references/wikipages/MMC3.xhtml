<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>MMC3</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>MMC3</h1><div class="article">
<p><br/>
</p>
<div class="infobox">
<div style="text-align: center"><b>MMC3</b>
<br/><b>TxROM</b></div>
<table class="oddf0">

<tr>
<td> <b>Company</b>
</td>
<td> Nintendo, others
</td></tr>
<tr>
<td> <b>Games</b>
</td>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?ines=4&amp;group=groupid" rel="nofollow">300 in NesCartDB</a>
</td></tr>
<tr>
<td> <b>Complexity</b>
</td>
<td> ASIC
</td></tr>
<tr>
<td> <b>Boards</b>
</td>
<td> TSROM, others
</td></tr>
<tr>
<td> <b>PRG ROM capacity</b>
</td>
<td> 512K
</td></tr>
<tr>
<td> <b>PRG ROM window</b>
</td>
<td> 8K + 8K + 16K fixed
</td></tr>
<tr>
<td> <b>PRG RAM capacity</b>
</td>
<td> 8K
</td></tr>
<tr>
<td> <b>PRG RAM window</b>
</td>
<td> 8K
</td></tr>
<tr>
<td> <b>CHR capacity</b>
</td>
<td> 256K
</td></tr>
<tr>
<td> <b>CHR window</b>
</td>
<td> 2Kx2 + 1Kx4
</td></tr>
<tr>
<td> <b>Nametable <a href="Mirroring.xhtml" title="Mirroring">mirroring</a></b>
</td>
<td> H or V, switchable, or 4 fixed
</td></tr>
<tr>
<td> <b><a href="Bus_conflict.xhtml" title="Bus conflict">Bus conflicts</a></b>
</td>
<td> No
</td></tr>
<tr>
<td> <b>IRQ</b>
</td>
<td> Yes
</td></tr>
<tr>
<td> <b>Audio</b>
</td>
<td> No
</td></tr>
<tr>
<td> <b>iNES <a href="Mapper.xhtml" title="Mapper">mappers</a></b>
</td>
<td> <a class="mw-redirect" href="MMC3.xhtml" title="INES Mapper 004">004</a>, <a href="INES_Mapper_118.xhtml" title="INES Mapper 118">118</a>, <a href="INES_Mapper_119.xhtml" title="INES Mapper 119">119</a>
</td></tr></table>
</div>
<div class="infobox">
<div style="text-align: center"><b>NESCartDB</b></div>
<table class="oddf0">

<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?ines=4" rel="nofollow">iNES 004</a>
</td></tr>
<tr>
<td> <a class="external text" href="http://bootgod.dyndns.org:7777/search.php?unif_op=LIKE+`%25%40%25`&amp;unif=-T%25ROM" rel="nofollow">TxROM</a>
</td></tr>















</table>
</div>
<p>The <b>Nintendo MMC3</b> is a <a class="mw-redirect" href="Mapper.xhtml" title="MMC">mapper</a> <a href="Category_ASIC_mappers.xhtml" title="Category:ASIC mappers">ASIC</a> used in Nintendo's <a href="TxROM.xhtml" title="TxROM">TxROM</a> Game Pak boards. Most common TxROM boards, along with the <b>NES-HKROM</b> board (which uses the Nintendo <a href="MMC6.xhtml" title="MMC6">MMC6</a>) are assigned to <a class="mw-redirect" href="MMC3.xhtml" title="INES Mapper 004">iNES Mapper 004</a>.
</p><p>Some less common MMC3 boards required alternative iNES mapper implementations:
</p>
<ul><li> <a href="INES_Mapper_118.xhtml" title="INES Mapper 118">iNES Mapper 118</a> - TKSROM and TLSROM</li>
<li> <a href="INES_Mapper_119.xhtml" title="INES Mapper 119">iNES Mapper 119</a> - TQROM</li></ul>
<p>This chip first appeared in the fourth quarter of 1988.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Banks"><span class="tocnumber">1</span> <span class="toctext">Banks</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Registers"><span class="tocnumber">2</span> <span class="toctext">Registers</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Bank_select_.28.248000-.249FFE.2C_even.29"><span class="tocnumber">2.1</span> <span class="toctext">Bank select ($8000-$9FFE, even)</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#CHR_Banks"><span class="tocnumber">2.1.1</span> <span class="toctext">CHR Banks</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#PRG_Banks"><span class="tocnumber">2.1.2</span> <span class="toctext">PRG Banks</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="#Bank_data_.28.248001-.249FFF.2C_odd.29"><span class="tocnumber">2.2</span> <span class="toctext">Bank data ($8001-$9FFF, odd)</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Mirroring_.28.24A000-.24BFFE.2C_even.29"><span class="tocnumber">2.3</span> <span class="toctext">Mirroring ($A000-$BFFE, even)</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#PRG_RAM_protect_.28.24A001-.24BFFF.2C_odd.29"><span class="tocnumber">2.4</span> <span class="toctext">PRG RAM protect ($A001-$BFFF, odd)</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#IRQ_latch_.28.24C000-.24DFFE.2C_even.29"><span class="tocnumber">2.5</span> <span class="toctext">IRQ latch ($C000-$DFFE, even)</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#IRQ_reload_.28.24C001-.24DFFF.2C_odd.29"><span class="tocnumber">2.6</span> <span class="toctext">IRQ reload ($C001-$DFFF, odd)</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#IRQ_disable_.28.24E000-.24FFFE.2C_even.29"><span class="tocnumber">2.7</span> <span class="toctext">IRQ disable ($E000-$FFFE, even)</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#IRQ_enable_.28.24E001-.24FFFF.2C_odd.29"><span class="tocnumber">2.8</span> <span class="toctext">IRQ enable ($E001-$FFFF, odd)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Hardware"><span class="tocnumber">3</span> <span class="toctext">Hardware</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#iNES_Mapper_004_and_MMC6"><span class="tocnumber">4</span> <span class="toctext">iNES Mapper 004 and MMC6</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#Variants"><span class="tocnumber">5</span> <span class="toctext">Variants</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#Pirate_variants"><span class="tocnumber">6</span> <span class="toctext">Pirate variants</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Banks">Banks</span></h2>
<ul><li> CPU $6000-$7FFF: 8 KB PRG RAM bank</li>
<li> CPU $8000-$9FFF (or $C000-$DFFF): 8 KB switchable PRG ROM bank</li>
<li> CPU $A000-$BFFF: 8 KB switchable PRG ROM bank</li>
<li> CPU $C000-$DFFF (or $8000-$9FFF): 8 KB PRG ROM bank, fixed to the second-last bank</li>
<li> CPU $E000-$FFFF: 8 KB PRG ROM bank, fixed to the last bank</li>
<li> PPU $0000-$07FF (or $1000-$17FF): 2 KB switchable CHR bank</li>
<li> PPU $0800-$0FFF (or $1800-$1FFF): 2 KB switchable CHR bank</li>
<li> PPU $1000-$13FF (or $0000-$03FF): 1 KB switchable CHR bank</li>
<li> PPU $1400-$17FF (or $0400-$07FF): 1 KB switchable CHR bank</li>
<li> PPU $1800-$1BFF (or $0800-$0BFF): 1 KB switchable CHR bank</li>
<li> PPU $1C00-$1FFF (or $0C00-$0FFF): 1 KB switchable CHR bank</li></ul>
<h2><span class="mw-headline" id="Registers">Registers</span></h2>
<p>The MMC3 has 4 pairs of registers at $8000-$9FFF, $A000-$BFFF, $C000-$DFFF, and $E000-$FFFF - even addresses ($8000, $8002, etc.) select the low register and odd addresses ($8001, $8003, etc.) select the high register in each pair.
These can be broken into two independent functional units: memory mapping ($8000, $8001, $A000, $A001) and scanline counting ($C000, $C001, $E000, $E001).
</p>
<h3><span class="mw-headline" id="Bank_select_.28.248000-.249FFE.2C_even.29">Bank select ($8000-$9FFE, even)</span></h3>
<pre>7  bit  0
---- ----
CPMx xRRR
|||   |||
|||   +++- Specify which bank register to update on next write to Bank Data register
|||        0: Select 2 KB CHR bank at PPU $0000-$07FF (or $1000-$17FF);
|||        1: Select 2 KB CHR bank at PPU $0800-$0FFF (or $1800-$1FFF);
|||        2: Select 1 KB CHR bank at PPU $1000-$13FF (or $0000-$03FF);
|||        3: Select 1 KB CHR bank at PPU $1400-$17FF (or $0400-$07FF);
|||        4: Select 1 KB CHR bank at PPU $1800-$1BFF (or $0800-$0BFF);
|||        5: Select 1 KB CHR bank at PPU $1C00-$1FFF (or $0C00-$0FFF);
|||        6: Select 8 KB PRG ROM bank at $8000-$9FFF (or $C000-$DFFF);
|||        7: Select 8 KB PRG ROM bank at $A000-$BFFF
||+------- Nothing on the MMC3, see <a href="MMC6.xhtml" title="MMC6">MMC6</a>
|+-------- PRG ROM bank mode (0: $8000-$9FFF swappable,
|                                $C000-$DFFF fixed to second-last bank;
|                             1: $C000-$DFFF swappable,
|                                $8000-$9FFF fixed to second-last bank)
+--------- CHR A12 inversion (0: two 2 KB banks at $0000-$0FFF,
                                 four 1 KB banks at $1000-$1FFF;
                              1: two 2 KB banks at $1000-$1FFF,
                                 four 1 KB banks at $0000-$0FFF)
</pre>
<h4><span class="mw-headline" id="CHR_Banks">CHR Banks</span></h4>
<table class="wikitable">
<tr>
<th> When $8000 &amp; #$80 </th>
<th> is 0 </th>
<th> is #$80
</th></tr>
<tr>
<th> PPU Bank </th>
<th colspan="2">Value of MMC3 register
</th></tr>
<tr>
<td> $0000-$03FF </td>
<td> R0 AND $FE </td>
<td> R2
</td></tr>
<tr>
<td> $0400-$07FF </td>
<td> R0 OR 1 </td>
<td> R3
</td></tr>
<tr>
<td> $0800-$0BFF </td>
<td> R1 AND $FE </td>
<td> R4
</td></tr>
<tr>
<td> $0C00-$0FFF </td>
<td> R1 OR 1 </td>
<td> R5
</td></tr>
<tr>
<td> $1000-$13FF </td>
<td> R2 </td>
<td> R0 AND $FE
</td></tr>
<tr>
<td> $1400-$17FF </td>
<td> R3 </td>
<td> R0 OR 1
</td></tr>
<tr>
<td> $1800-$1BFF </td>
<td> R4 </td>
<td> R1 AND $FE
</td></tr>
<tr>
<td> $1C00-$1FFF </td>
<td> R5 </td>
<td> R1 OR 1
</td></tr></table>
<h4><span class="mw-headline" id="PRG_Banks">PRG Banks</span></h4>
<p>Because the values in R6, R7, and $8000 are unspecified at power on, the reset vector must point into $E000-$FFFF, and code must initialize these before jumping out of $E000-$FFFF.
</p>
<table class="wikitable">
<tr>
<th> When $8000 &amp; #$40 </th>
<th> is 0 </th>
<th> is #$40
</th></tr>
<tr>
<th> CPU Bank </th>
<th colspan="2">Value of MMC3 register
</th></tr>
<tr>
<td> $8000-$9FFF </td>
<td> R6 </td>
<td> (-2)
</td></tr>
<tr>
<td> $A000-$BFFF </td>
<td> R7 </td>
<td> R7
</td></tr>
<tr>
<td> $C000-$DFFF </td>
<td> (-2) </td>
<td> R6
</td></tr>
<tr>
<td> $E000-$FFFF </td>
<td> (-1) </td>
<td> (-1)
</td></tr></table>
<ul><li> (-1) : the last bank, in a proper MMC3, the 63rd</li>
<li> (-2) : the penultimate bank; properly the 62nd</li></ul>
<h3><span class="mw-headline" id="Bank_data_.28.248001-.249FFF.2C_odd.29">Bank data ($8001-$9FFF, odd)</span></h3>
<pre>7  bit  0
---- ----
DDDD DDDD
|||| ||||
++++-++++- New bank value, based on last value written to Bank select register (mentioned above)
</pre>
<p>The PRG banks are 8192 bytes in size, half the size of an <a href="INES.xhtml" title="INES">iNES</a> PRG bank.
If your emulator or copier handles PRG data in 16384 byte chunks, you can think of the lower bit as selecting the first or second half of the bank:<a class="external autonumber" href="http://forums.nesdev.com/viewtopic.php?p=38182#p38182" rel="nofollow">[1]</a>
</p>
<pre>7  bit  0  When $8000 AND #$06 == #$06
---- ----
xxBB BBBH
  || ||||
  || |||+- 0: Select first half of this bank;
  || |||   1: Select second half of this bank
  ++-+++-- Select 16 KB PRG bank at $8000-$9FFF, $A000-$BFFF, or $C000-$DFFF
</pre>
<p>Writes to registers 6 and 7 always ignore bits 6 and 7, as the MMC3 has only 6 PRG ROM address output lines.
</p><p>Writes to registers 0 and 1 always ignore bit 0, loading the value AND #$FE into the first half and the value OR #$01 into the second half of the 2 KiB bank.
</p><p>Some romhacks rely on an 8-bit extension of registers 6 and 7 for oversized PRG-ROM, but this is deliberately not supported by many emulators. See <a href="#iNES_Mapper_004_and_MMC6">iNES Mapper 004</a> below.
</p>
<h3><span class="mw-headline" id="Mirroring_.28.24A000-.24BFFE.2C_even.29">Mirroring ($A000-$BFFE, even)</span></h3>
<pre>7  bit  0
---- ----
xxxx xxxM
        |
        +- Nametable <a href="Mirroring.xhtml" title="Mirroring">mirroring</a> (0: vertical; 1: horizontal)
</pre>
<p>This bit has no effect on <i><a class="external text" href="http://bootgod.dyndns.org:7777/profile.php?id=137" rel="nofollow">Rad Racer II</a></i>, which uses the TVROM board, because TVROM is hardwired to 4-screen VRAM.
In the iNES and NES 2.0 formats, TVROM can be identified through <a href="INES.xhtml#Flags_6" title="INES">bit 3 of byte $06 of the header</a>.
</p>
<h3><span class="mw-headline" id="PRG_RAM_protect_.28.24A001-.24BFFF.2C_odd.29">PRG RAM protect ($A001-$BFFF, odd)</span></h3>
<pre>7  bit  0
---- ----
RWXX xxxx
||||
||++------ Nothing on the MMC3, see <a href="MMC6.xhtml" title="MMC6">MMC6</a>
|+-------- Write protection (0: allow writes; 1: deny writes)
+--------- PRG RAM chip enable (0: disable; 1: enable)
</pre>
<p>Disabling PRG RAM through bit 7 causes reads from the PRG RAM region to return open bus.
</p><p>Though these bits are functional on the MMC3, their main purpose is to write-protect save RAM during power-off. Many emulators choose not to implement them as part of iNES Mapper 4 to avoid an incompatibility with the MMC6.
</p><p>See <a href="#iNES_Mapper_004_and_MMC6">iNES Mapper 004 and MMC6</a> below.
</p>
<h3><span class="mw-headline" id="IRQ_latch_.28.24C000-.24DFFE.2C_even.29">IRQ latch ($C000-$DFFE, even)</span></h3>
<p><span id="IRQ"/>
</p>
<pre>7  bit  0
---- ----
DDDD DDDD
|||| ||||
++++-++++- IRQ latch value
</pre>
<p>This register specifies the IRQ counter reload value. When the IRQ counter is zero (or a reload is requested through $C001), this value will be copied to the IRQ counter at the NEXT rising edge of the PPU address, presumably at PPU cycle 260 of the current scanline.
</p>
<h3><span class="mw-headline" id="IRQ_reload_.28.24C001-.24DFFF.2C_odd.29">IRQ reload ($C001-$DFFF, odd)</span></h3>
<pre>7  bit  0
---- ----
xxxx xxxx
</pre>
<p>Writing any value to this register reloads the MMC3 IRQ counter at the NEXT rising edge of the PPU address, presumably at PPU cycle 260 of the current scanline.
</p>
<h3><span class="mw-headline" id="IRQ_disable_.28.24E000-.24FFFE.2C_even.29">IRQ disable ($E000-$FFFE, even)</span></h3>
<pre>7  bit  0
---- ----
xxxx xxxx
</pre>
<p>Writing any value to this register will disable MMC3 interrupts AND acknowledge any pending interrupts.
</p>
<h3><span class="mw-headline" id="IRQ_enable_.28.24E001-.24FFFF.2C_odd.29">IRQ enable ($E001-$FFFF, odd)</span></h3>
<pre>7  bit  0
---- ----
xxxx xxxx
</pre>
<p>Writing any value to this register will enable MMC3 interrupts.
</p>
<h2><span class="mw-headline" id="Hardware">Hardware</span></h2>
<p>The MMC3 most commonly exists in a <a href="MMC3_pinout.xhtml" title="MMC3 pinout">44-pin TQFP package</a>.
Three revisions are known to exist - MMC3A, MMC3B, and MMC3C. No major behavioral differences are known, except for the IRQ counter.
</p><p>The MMC3 scanline counter is based entirely on PPU A12, triggered on rising edges (after the line remains low for two rising edges of M2).
</p><p>The counter is based on the following trick: whenever rendering is turned on in the <a href="PPU.xhtml" title="PPU">PPU</a>, it fetches nametable and BG pattern tiles from dots 0-255 and 320-340 of a scanline and fetches sprite patterns from dots 256-319, even if no sprites are visible.
Because of this, if BG uses the left pattern table ($0000), and if sprites always use the right pattern table ($1000), A12 will remain low during all nametable and BG pattern fetches, and high during all sprite pattern fetches, causing it to oscillate exactly one time per scanline and 241 times per frame. It may oscillate more if the program uses registers $2006 and $2007 to access PPU $1000-$1FFF during vblank, but this is rare because very few games have MMC3 and CHR RAM (two on TQROM and three on TGROM among NES games, and a couple more Famicom-only games). The scanline counter will also work when the BG uses the right pattern table ($1000) and the sprites use the left pattern table ($0000), but this is less common. The MMC3 IRQ has two revisions that work slightly different <a class="external autonumber" href="http://forums.nesdev.com/viewtopic.php?p=62546#p62546" rel="nofollow">[2]</a>.
</p><p>Counter operation:
</p>
<ul><li> When the IRQ is clocked (PPU A12 0-&gt;1), the counter value is checked - if zero <b>or</b> the <i>reload flag</i> is true, it's reloaded with the IRQ latched value at $C000; otherwise, it decrements.</li>
<li> If the IRQ counter is zero <i>and</i> IRQs are enabled ($E001), an IRQ is triggered. The &quot;alternate revision&quot; checks the IRQ counter transition 1-&gt;0, whether from decrementing or reloading.</li></ul>
<p>Regarding PPU A12:
</p>
<ul><li> If the BG uses $0000, and the sprites use $1000, the IRQ counter should decrement on PPU cycle 260,268,276... <i>or</i> 315 (as in, a little after the visible part of the target scanline has ended).</li>
<li> If the BG uses $1000, and the sprites use $0000, the IRQ counter should decrement on PPU cycle 324 <i>or</i> 332 of the <i>previous</i> scanline (as in, <i>right before</i> the target scanline is about to be drawn).</li>
<li> For 8x16 sprites: if there are less than 8 sprites on a scanline, the PPU makes a dummy fetch to tile $FF (right pattern table $1000) for each leftover sprite. So, games with background and sprites from PPU $0000 watches the sprite tile pattern selection.</li></ul>
<p>Important points:
</p>
<ul><li> The scanline counter cannot be stopped. It will continue to decrement and reload as long as PPU A12 on the PPU bus toggles.</li>
<li> There is no direct access to the counter! The best you can do is update the reload value and immediately request a reload.</li>
<li> Writing to $E000 will only prevent the MMC3 from generating IRQs - the counter will continue to run.</li>
<li> Writing to $E001 will simply allow the MMC3 to generate IRQs - the counter remains unaffected.</li>
<li> Writing to $C001 will cause the counter to be cleared, and set <i>reload flag</i> to <b>true</b>. It will be reloaded on the NEXT rising edge of the PPU A12.</li>
<li> Writing to $C000 does not immediately affect the value within the counter - this value is only used when the counter is reloaded, whether from reaching 0 or from writing to $C001.</li>
<li> The exact number of scanlines between IRQs is N+1, where N is the value written to $C000. 1 (Sharp MMC3B, MMC3C) or 2 (MMC3A, Non-Sharp MMC3B) to 256 scanlines are supported.</li>
<li> The counter will not work properly unless you use different pattern tables for background and sprite data. The standard configuration is to use PPU $0000-$0FFF for background tiles and $1000-$1FFF for sprite tiles, whether 8x8 or 8x16.</li>
<li> The counter is clocked on each rising edge of PPU A12, no matter what caused it, so it is possible to (intentionally or not) clock the counter by writing to $2006, regardless of whether PPU is/is not rendering.</li></ul>
<p>There's a slight discrepancy with what happens when you set $C000 to $00, and so far, two behaviors are known to exist:
</p>
<ul><li> All MMC3A's and non-Sharp MMC3B's will generate only a single IRQ when $C000 is $00. This is because this version of the MMC3 generates IRQs when the scanline counter is <i>decremented</i> to 0. In addition, writing to $C001 with $C000 still at $00 will result in another single IRQ being generated. In the community, this is known as the &quot;alternate&quot; or &quot;old&quot; behavior.</li>
<li> All MMC3C's and Sharp MMC3B's will generate an IRQ on each scanline while $C000 is $00. This is because this version of the MMC3 generates IRQs when the scanline counter is <i>equal</i> to 0. In the community, this is known as the &quot;normal&quot; or &quot;new&quot; behavior.</li></ul>
<p>Acclaim's MC-ACC chip is their own variant of the MMC3, that they used for their own boards (for industrial money-saving purposes). It comes in a standard 600 mil 40-pin DIP package. It is not known if it has SRAM support. The only known difference is that the scanline counter triggers on <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=116691#p116691" rel="nofollow"><i>falling</i> edges</a> instead of rising edges.
</p>
<h2><span class="mw-headline" id="iNES_Mapper_004_and_MMC6">iNES Mapper 004 and MMC6</span></h2>
<p>The unfortunate conflation of MMC3 and <a href="MMC6.xhtml" title="MMC6">MMC6</a> into the same iNES mapper can be resolved by the use of an <a href="NES_2_0.xhtml" title="NES 2.0">NES 2.0</a> header, but since the new header is not yet well adopted among emulators or ROM sets, an approach that supports both MMC3 and MMC6 may be desired when an NES 2.0 header is not used.
</p><p>The MMC6 has a smaller PRG-RAM, and a different register scheme for write protecting it.
</p><p>Because write protection is generally only used to guard against corruption during power off, many implementations of iNES Mapper 004 simply omit the write protection. Leaving PRG-RAM always write-enabled removes most of the incompatibility between MMC3 and MMC6, and is sufficient to support the popular MMC6 games StarTropics and StarTropics II. These games do not rely on the smaller PRG-RAM size of the MMC6, so the larger 8k RAM addressed by the MMC3 is not a problem.
</p><p>The less well known game <i>Low G Man</i> is problematic. It used an MMC3 board with no PRG-RAM. Because of a bug in its music code, it relies on open-bus behaviour in the RAM's address range to function correctly. The game does use the MMC3 mechanism to disable RAM, so it may function on an MMC3 board with PRG-RAM, but implementing the MMC3 RAM disable may conflict with the effort to support MMC6 games. Alternatively, NES 2.0 could be used to specify a PRG-RAM size of 0, or the problem can be resolved by patching the Low G Man ROM to work around the conflict: <a class="external text" href="http://www.romhacking.net/hacks/2512/" rel="nofollow">patch</a>.
</p><p>Some romhacks attempt to increase the available PRG-ROM size beyond the MMC3's hard 512k limit (e.g. <a class="external text" href="http://www.romhacking.net/translations/1590/" rel="nofollow">Translation of Final Fantasy III</a>). Full 8-bit banking registers could theoretically support up to 2048K PRG-ROM, but very few emulators implement this extension.
</p>
<h2><span class="mw-headline" id="Variants">Variants</span></h2>
<p>The TKSROM and TLSROM boards, assigned to <a href="INES_Mapper_118.xhtml" title="INES Mapper 118">INES Mapper 118</a>, connect the upper bank select line directly to VRAM A10, allowing more flexible control over nametable mirroring.
</p><p>The TQROM board, assigned to <a href="INES_Mapper_119.xhtml" title="INES Mapper 119">INES Mapper 119</a>, uses both CHR ROM and CHR RAM simultaneously, using the 2nd-highest CHR bank select line to choose between them (on a per-bank basis).
</p><p>The <a href="DxROM.xhtml" title="DxROM">DxROM</a> board, assigned to <a href="INES_Mapper_206.xhtml" title="INES Mapper 206">iNES Mapper 206</a> has a custom mapper developed by Namco before the MMC3 existed. It has no IRQ or mirroring control.
Tengen used it for some of their games under the name MIMIC-1.
It exists both in a <a href="Namcot_108_family_pinout.xhtml" title="Namcot 108 family pinout">400 mil 28-pin Shrink-DIP</a> (found in licensed <a href="DxROM.xhtml" title="DxROM">DxROM</a> boards) and in a larger 600 mil 28-pin DIP (found in unlicensed Tengen cartridges).
</p><p>The Namco 108/MIMIC-1 does the basic ROM banking exactly like the MMC3, but it only implements the low 3 bits of $8000 and the low 6 bits of $8001. Compared to the MMC3, it lacks mirroring control, SRAM support and an IRQ counter. The TEROM and TFROM boards have been developed with backward compability with <a href="DxROM.xhtml" title="DxROM">DxROM</a> in mind, featuring solder pads to have hardwired H/V mirroring instead of MMC3 controlled mirroring, and allow the hardware to disable IRQs.
</p><p>IRQ behavior when reload is set to 0 differs among different MMC3 chips.
MMC3 chips with the &quot;new behavior&quot; generate an IRQ every scanline.
(These include at least MMC3B chips bearing a bold S before the date code.)
MMC3 chips with the &quot;old behavior&quot; cease to generate IRQs.
(These include MMC3B chips lacking the S and having a date code of the form nnnnPKnnn, and an MMC3A 8940EP chip.)
Some games have been manufactured with both versions, and during the transition, relying on old or new behavior might at first have been one of the things that caused Nintendo lot check to reject a program.
A few later games developed after Nintendo had run out of the old chips, such as <i><a class="external text" href="http://bootgod.dyndns.org:7777/profile.php?id=249" rel="nofollow">Star Trek: 25th Anniversary</a></i>, are reported to rely on the new behavior (source: Nestopia 1.30 changelog).
</p><p>There's an anecdotal report that <a class="external text" href="http://forums.nesdev.com/viewtopic.php?p=124478#p124478" rel="nofollow"><i>Felix the Cat</i> needs MMC3A</a>, but it's necessarily not related to the IRQ behavior since the game works correctly in emulators that only implement the MMC3C behavior.
</p><p>Nintendo made at least two MMC3-based multicart mappers: mappers <a href="INES_Mapper_037.xhtml" title="INES Mapper 037">37</a> and <a href="INES_Mapper_047.xhtml" title="INES Mapper 047">47</a>.
</p>
<h2><span class="mw-headline" id="Pirate_variants">Pirate variants</span></h2>
<ul><li> <a href="INES_Mapper_245.xhtml" title="INES Mapper 245">Mapper 245</a> increases PRG to 1024K by losing CHR ROM.</li></ul>
<ul><li> Mappers <a href="INES_Mapper_205.xhtml" title="INES Mapper 205">205</a>, <a href="INES_Mapper_052.xhtml" title="INES Mapper 052">52</a>, <a href="INES_Mapper_049.xhtml" title="INES Mapper 049">49</a>, <a href="INES_Mapper_045.xhtml" title="INES Mapper 045">45</a>, and <a href="INES_Mapper_044.xhtml" title="INES Mapper 044">44</a> force unmodified games together in a multicart. </li></ul>
<ul><li> <a href="INES_Mapper_189.xhtml" title="INES Mapper 189">Mapper 189</a> loses the MMC3's 8+8+16F banking scheme in exchange for 32k-at-a-time banking like <a href="AxROM.xhtml" title="AxROM">AxROM</a>, <a class="mw-redirect" href="BNROM.xhtml" title="BxROM">BxROM</a>, or <a href="GxROM.xhtml" title="GxROM">GxROM</a></li></ul>
<ul><li> <a href="INES_Mapper_182.xhtml" title="INES Mapper 182">Mapper 182</a>'s registers are only in a different order.</li></ul>
<ul><li> <a href="INES_Mapper_115.xhtml" title="INES Mapper 115">Mapper 115</a> increases CHR to 512K by losing PRG RAM and contains an <a href="UxROM.xhtml" title="UxROM">UxROM</a> emulation mode.</li></ul>
<ul><li> Mappers <a href="INES_Mapper_194.xhtml" title="INES Mapper 194">194</a>, <a href="INES_Mapper_192.xhtml" title="INES Mapper 192">192</a>, <a href="INES_Mapper_191.xhtml" title="INES Mapper 191">191</a>, and <a href="INES_Mapper_074.xhtml" title="INES Mapper 074">74</a>, are like TQROM in that they combine CHR ROM and CHR RAM by replacing some CHR pages with CHR RAM.</li></ul>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li> <a href="Category_MMC3_like_mappers.xhtml" title="Category:MMC3-like mappers">MMC3-like mappers</a></li>
<li> <a class="external text" href="http://www.romhacking.net/documents/362/" rel="nofollow">NES Mapper list</a> by Disch.</li>
<li> <a class="external text" href="http://nesdev.com/mmc3.txt" rel="nofollow">Nintendo MMC3</a> by goroh.</li>
<li> <a class="external text" href="http://nesdev.com/mappers.zip" rel="nofollow">Comprehensive NES Mapper Document</a> by \Firebug\. Information on mapper's initial state is innacurate.</li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.404 seconds
Real time usage: 0.748 seconds
Preprocessor visited node count: 321/1000000
Preprocessor generated node count: 1969/1000000
Post‐expand include size: 1995/2097152 bytes
Template argument size: 412/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:89-1!*!0!!en!*!* and timestamp 20160427020329 and revision id 12214
 -->
<p class="categories">Categories: <a href="Category_Mappers_with_scanline_IRQs.xhtml">Mappers with scanline IRQs</a>, <a href="Category_Nintendo_licensed_mappers.xhtml">Nintendo licensed mappers</a>, <a href="Category_In_NesCartDB.xhtml">In NesCartDB</a>, <a href="Category_ASIC_mappers.xhtml">ASIC mappers</a>, <a href="Category_MMC3_like_mappers.xhtml">MMC3-like mappers</a></p></div></body></html>
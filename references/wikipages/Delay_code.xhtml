<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Delay code</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Delay code</h1><div class="article">
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Delay_code"><span class="tocnumber">1</span> <span class="toctext">Delay code</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Inline_code"><span class="tocnumber">1.1</span> <span class="toctext">Inline code</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="#2.E2.80.943_cycles_of_delay:_delay.3Dr.2B2.3B_0_.E2.89.A4_r_.E2.89.A4_1.2C_r.E2.8A.A2Z.2C_.CE.94r_.3D_0.29"><span class="tocnumber">1.1.1</span> <span class="toctext">2—3 cycles of delay: delay=r+2; 0 ≤ r ≤ 1, r⊢Z, Δr = 0)</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="#4.E2.80.945_cycles_of_delay:_delay.3Dr.2B4.3B_0_.E2.89.A4_r_.E2.89.A4_1.2C_.CE.94r_.3D_0.29"><span class="tocnumber">1.1.2</span> <span class="toctext">4—5 cycles of delay: delay=r+4; 0 ≤ r ≤ 1, Δr = 0)</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#4.E2.80.945_cycles_of_delay:_delay.3DX.2B4.3B_0_.E2.89.A4_X_.E2.89.A4_1.29"><span class="tocnumber">1.1.3</span> <span class="toctext">4—5 cycles of delay: delay=X+4; 0 ≤ X ≤ 1)</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#5.E2.80.947_cycles_of_delay:_delay.3DA.2B5.3B_0_.E2.89.A4_A_.E2.89.A4_2.2C_A.E2.8A.A2Z.29"><span class="tocnumber">1.1.4</span> <span class="toctext">5—7 cycles of delay: delay=A+5; 0 ≤ A ≤ 2, A⊢Z)</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#5.E2.80.947_cycles_of_delay:_delay.3Dr.2B5.3B_0_.E2.89.A4_r_.E2.89.A4_2.2C_.CE.94r_.3D_0.29"><span class="tocnumber">1.1.5</span> <span class="toctext">5—7 cycles of delay: delay=r+5; 0 ≤ r ≤ 2, Δr = 0)</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#5.E2.80.947_cycles_of_delay:_delay.3DX.2B5.3B_0_.E2.89.A4_X_.E2.89.A4_2.29"><span class="tocnumber">1.1.6</span> <span class="toctext">5—7 cycles of delay: delay=X+5; 0 ≤ X ≤ 2)</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#6.E2.80.949_cycles_of_delay:_delay.3DA.2B6.3B_0_.E2.89.A4_A_.E2.89.A4_3.2C_A.E2.8A.A2Z.29"><span class="tocnumber">1.1.7</span> <span class="toctext">6—9 cycles of delay: delay=A+6; 0 ≤ A ≤ 3, A⊢Z)</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="#7.E2.80.9410_cycles_of_delay:_delay.3DA.2B7.3B_0_.E2.89.A4_A_.E2.89.A4_3.29"><span class="tocnumber">1.1.8</span> <span class="toctext">7—10 cycles of delay: delay=A+7; 0 ≤ A ≤ 3)</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#8.E2.80.9411_cycles_of_delay:_delay.3DX.2B8.3B_0_.E2.89.A4_X_.E2.89.A4_3.29"><span class="tocnumber">1.1.9</span> <span class="toctext">8—11 cycles of delay: delay=X+8; 0 ≤ X ≤ 3)</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#9.E2.80.9414_cycles_of_delay:_delay.3DA.E2.88.92242.3B_251_.E2.89.A4_A_.E2.89.A4_255.3B_C_.3D_0.29"><span class="tocnumber">1.1.10</span> <span class="toctext">9—14 cycles of delay: delay=A−242; 251 ≤ A ≤ 255; C = 0)</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#10.E2.80.9414_cycles_of_delay:_delay.3DX.2B10.3B_0_.E2.89.A4_X_.E2.89.A4_4.29"><span class="tocnumber">1.1.11</span> <span class="toctext">10—14 cycles of delay: delay=X+10; 0 ≤ X ≤ 4)</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#9.E2.80.9414_cycles_of_delay:_delay.3DA.2B9.3B_0_.E2.89.A4_A_.E2.89.A4_5.29"><span class="tocnumber">1.1.12</span> <span class="toctext">9—14 cycles of delay: delay=A+9; 0 ≤ A ≤ 5)</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#9.E2.80.9416_cycles_of_delay:_delay.3DA.2B9.3B_0_.E2.89.A4_A_.E2.89.A4_7.29"><span class="tocnumber">1.1.13</span> <span class="toctext">9—16 cycles of delay: delay=A+9; 0 ≤ A ≤ 7)</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#11.E2.80.9419_cycles_of_delay:_delay.3DA.2B11.3B_0_.E2.89.A4_A_.E2.89.A4_8.29"><span class="tocnumber">1.1.14</span> <span class="toctext">11—19 cycles of delay: delay=A+11; 0 ≤ A ≤ 8)</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#12.E2.80.9423_cycles_of_delay:_delay.3DA.2B12.3B_0_.E2.89.A4_A_.E2.89.A4_11.29"><span class="tocnumber">1.1.15</span> <span class="toctext">12—23 cycles of delay: delay=A+12; 0 ≤ A ≤ 11)</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="#15.E2.80.94270_cycles_of_delay:_delay.3DA.2B15.3B_0_.E2.89.A4_A_.E2.89.A4_255.29"><span class="tocnumber">1.1.16</span> <span class="toctext">15—270 cycles of delay: delay=A+15; 0 ≤ A ≤ 255)</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="#16.E2.80.94271_cycles_of_delay:_delay.3DA.2B16.3B_0_.E2.89.A4_A_.E2.89.A4_255.29"><span class="tocnumber">1.1.17</span> <span class="toctext">16—271 cycles of delay: delay=A+16; 0 ≤ A ≤ 255)</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="#5.E2.80.9465285_cycles_of_delay:_delay_.3D_256.C3.97X_.2B_5"><span class="tocnumber">1.1.18</span> <span class="toctext">5—65285 cycles of delay: delay = 256×X + 5</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="#18.E2.80.94218103813_cycles_of_delay:_delay_.3D_13.C3.97.2865536.C3.97Y_.2B_256.C3.97A_.2B_X.29_.2B_18"><span class="tocnumber">1.1.19</span> <span class="toctext">18—218103813 cycles of delay: delay = 13×(65536×Y + 256×A + X) + 18</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-22"><a href="#Callable_functions"><span class="tocnumber">1.2</span> <span class="toctext">Callable functions</span></a>
<ul>
<li class="toclevel-3 tocsection-23"><a href="#A_.2B_25_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.1</span> <span class="toctext">A + 25 cycles of delay, clobbers A, Z&amp;N, C, V</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#A_.2B_27_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.2</span> <span class="toctext">A + 27 cycles of delay, clobbers A, Z&amp;N, C, V</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#256.C3.97A_.2B_X_.2B_33_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.3</span> <span class="toctext">256×A + X + 33 cycles of delay, clobbers A, Z&amp;N, C, V</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="#256.C3.97A_.2B_16_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.4</span> <span class="toctext">256×A + 16 cycles of delay, clobbers A, Z&amp;N, C, V</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="#256.C3.97X_.2B_16_cycles_of_delay.2C_clobbers_X.2C_Z.26N"><span class="tocnumber">1.2.5</span> <span class="toctext">256×X + 16 cycles of delay, clobbers X, Z&amp;N</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#256.C3.97X_.2B_A_.2B_30_cycles_of_delay.2C_clobbers_A.2C_X.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.6</span> <span class="toctext">256×X + A + 30 cycles of delay, clobbers A, X, Z&amp;N, C, V</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#851968.C3.97Y_.2B_3328.C3.97A_.2B_13.C3.97X_.2B_30_cycles_of_delay.2C_clobbers_A.2C_X.2C_Y.2C_Z.26N.2C_C.2C_V"><span class="tocnumber">1.2.7</span> <span class="toctext">851968×Y + 3328×A + 13×X + 30 cycles of delay, clobbers A, X, Y, Z&amp;N, C, V</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-30"><a href="#See_also"><span class="tocnumber">2</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Delay_code">Delay code</span></h2>
<p>Code that causes a parametrised number of cycles of delay.
</p><p>Note that all branch instructions are written assuming that no page wrap occurs.
If you want to ensure this condition at compile time, use the bccnw/beqnw/etc. macros that are listed at <a href="Fixed_cycle_delay.xhtml" title="Fixed cycle delay">Fixed cycle delay</a>.
</p>
<h3><span class="mw-headline" id="Inline_code">Inline code</span></h3>
<h4><span class="mw-headline" id="2.E2.80.943_cycles_of_delay:_delay.3Dr.2B2.3B_0_.E2.89.A4_r_.E2.89.A4_1.2C_r.E2.8A.A2Z.2C_.CE.94r_.3D_0.29">2—3 cycles of delay: delay=r+2; 0 ≤ r ≤ 1, r⊢Z, Δr = 0)</span></h4>
<pre>        bne @1
@1:</pre>
<h4><span class="mw-headline" id="4.E2.80.945_cycles_of_delay:_delay.3Dr.2B4.3B_0_.E2.89.A4_r_.E2.89.A4_1.2C_.CE.94r_.3D_0.29">4—5 cycles of delay: delay=r+4; 0 ≤ r ≤ 1, Δr = 0)</span></h4>
<pre>        ora #0 ; use ora=A, cpx=X, cpy=Y
        bne @1
@1:</pre>
<h4><span class="mw-headline" id="4.E2.80.945_cycles_of_delay:_delay.3DX.2B4.3B_0_.E2.89.A4_X_.E2.89.A4_1.29">4—5 cycles of delay: delay=X+4; 0 ≤ X ≤ 1)</span></h4>
<pre>        dex
        bpl @1
@1:</pre>
<h4><span class="mw-headline" id="5.E2.80.947_cycles_of_delay:_delay.3DA.2B5.3B_0_.E2.89.A4_A_.E2.89.A4_2.2C_A.E2.8A.A2Z.29">5—7 cycles of delay: delay=A+5; 0 ≤ A ≤ 2, A⊢Z)</span></h4>
<pre>        beq @2
        lsr
@2:     bne @3
@3:</pre>
<h4><span class="mw-headline" id="5.E2.80.947_cycles_of_delay:_delay.3Dr.2B5.3B_0_.E2.89.A4_r_.E2.89.A4_2.2C_.CE.94r_.3D_0.29">5—7 cycles of delay: delay=r+5; 0 ≤ r ≤ 2, Δr = 0)</span></h4>
<pre>        cmp #1 ; use cmp=A, cpx=X, cpy=Y
        bcc @3
        bne @3
@3:</pre>
<h4><span class="mw-headline" id="5.E2.80.947_cycles_of_delay:_delay.3DX.2B5.3B_0_.E2.89.A4_X_.E2.89.A4_2.29">5—7 cycles of delay: delay=X+5; 0 ≤ X ≤ 2)</span></h4>
<pre>        dex
        bmi @3
        bne @3
@3:</pre>
<h4><span class="mw-headline" id="6.E2.80.949_cycles_of_delay:_delay.3DA.2B6.3B_0_.E2.89.A4_A_.E2.89.A4_3.2C_A.E2.8A.A2Z.29">6—9 cycles of delay: delay=A+6; 0 ≤ A ≤ 3, A⊢Z)</span></h4>
<pre>        beq @2
        lsr
@2:     beq @4
        bcs @4
@4:</pre>
<h4><span class="mw-headline" id="7.E2.80.9410_cycles_of_delay:_delay.3DA.2B7.3B_0_.E2.89.A4_A_.E2.89.A4_3.29">7—10 cycles of delay: delay=A+7; 0 ≤ A ≤ 3)</span></h4>
<pre>        lsr
        beq @3
        bpl @3
@3:     bcs @4
@4:</pre>
<h4><span class="mw-headline" id="8.E2.80.9411_cycles_of_delay:_delay.3DX.2B8.3B_0_.E2.89.A4_X_.E2.89.A4_3.29">8—11 cycles of delay: delay=X+8; 0 ≤ X ≤ 3)</span></h4>
<pre>        dex
        bmi @4
        dex
        bmi @5
@4:     bne @5
@5:</pre>
<h4><span class="mw-headline" id="9.E2.80.9414_cycles_of_delay:_delay.3DA.E2.88.92242.3B_251_.E2.89.A4_A_.E2.89.A4_255.3B_C_.3D_0.29">9—14 cycles of delay: delay=A−242; 251 ≤ A ≤ 255; C = 0)</span></h4>
<pre>        adc #3  ;  2 2 2 2 2  FE FF 00 01 02
        bcc @4  ;  3 3 2 2 2  FE FF 00 01 02 ;bmi works too
        lsr     ;  - - 2 2 2  -- -- 00 00 01
        beq @5  ;  - - 3 3 2  -- -- 00 00 01
@4:     lsr     ;  2 2 - - 2  7F 7F -- -- 00
@5:     bcs @6  ;  2 3 2 3 2  7F 7F 00 00 00
@6:</pre>
<h4><span class="mw-headline" id="10.E2.80.9414_cycles_of_delay:_delay.3DX.2B10.3B_0_.E2.89.A4_X_.E2.89.A4_4.29">10—14 cycles of delay: delay=X+10; 0 ≤ X ≤ 4)</span></h4>
<pre>        cpx #3
        bcc @3
        bne @3
@3:     dex
        bmi @6
        bne @6
@6:</pre>
<h4><span class="mw-headline" id="9.E2.80.9414_cycles_of_delay:_delay.3DA.2B9.3B_0_.E2.89.A4_A_.E2.89.A4_5.29">9—14 cycles of delay: delay=A+9; 0 ≤ A ≤ 5)</span></h4>
<pre>        lsr
        bcs @2
@2:     beq @5
        lsr
        bcs @6 ;beq works too
@5:     bne @6
@6:</pre>
<h4><span class="mw-headline" id="9.E2.80.9416_cycles_of_delay:_delay.3DA.2B9.3B_0_.E2.89.A4_A_.E2.89.A4_7.29">9—16 cycles of delay: delay=A+9; 0 ≤ A ≤ 7)</span></h4>
<pre>        lsr
        bcs @2
@2:     beq @6
        lsr
        beq @7
        bcc @7
@6:     bne @7
@7:</pre>
<h4><span class="mw-headline" id="11.E2.80.9419_cycles_of_delay:_delay.3DA.2B11.3B_0_.E2.89.A4_A_.E2.89.A4_8.29">11—19 cycles of delay: delay=A+11; 0 ≤ A ≤ 8)</span></h4>
<pre>;      Cycles | A | 0  0  0  0  0  0  0  0  0  | 0  1  2  3  4  5  6  7  8
        lsr       ; 2  2  2  2  2  2  2  2  2  | 0  0  1  1  2  2  3  3  4
        bcs @3    ; 2  3  2  3  2  3  2  3  2  | 0 c0  1 c1  2 c2  3 c3  4
        adc #255  ; 2  -  2  -  2  -  2  -  2  |-1  - c0  - c1  - c2  - c3
@3:     beq @7    ; 2  3  3  2  2  2  2  2  2  |-1 c0 c0 c1 c1 c2 c2 c3 c3
        bcc @9    ; 3  -  -  2  2  2  2  2  2  |-1  -  - c1 c1 c2 c2 c3 c3 ;bmi works too
        lsr       ; -  -  -  2  2  2  2  2  2  | -  -  - c0 c0  1  1 c1 c1
        beq @9    ; -  -  -  3  3  2  2  2  2  | -  -  - c0 c0  1  1 c1 c1
@7:     bcc @9    ; -  2  2  -  -  3  3  2  2  | - c0 c0  -  -  1  1 c1 c1
        bne @9    ; -  2  2  -  -  -  -  3  3  | - c0 c0  -  -  -  - c1 c1
@9:       ;Total:  11 12 13 14 15 16 17 18 19
</pre>
<h4><span class="mw-headline" id="12.E2.80.9423_cycles_of_delay:_delay.3DA.2B12.3B_0_.E2.89.A4_A_.E2.89.A4_11.29">12—23 cycles of delay: delay=A+12; 0 ≤ A ≤ 11)</span></h4>
<pre>;      Cycles | A | 0  0  0  0  0  0  0  0  0  0  0  0  | 0  1  2  3  4  5  6  7  8  9 10 11
        lsr       ; 2  2  2  2  2  2  2  2  2  2  2  2  | 0  0  1  1  2  2  3  3  4  4  5  5
        bcs @2    ; 2  3  2  3  2  3  2  3  2  3  2  3  | 0  0  1  1  2  2  3  3  4  4  5  5
@2:     lsr       ; 2  2  2  2  2  2  2  2  2  2  2  2  | 0  0  0  0  1  1  1  1  2  2  2  2
        bcc @5    ; 3  3  2  2  3  3  2  2  3  3  2  2  | 0  0  0  0  1  1  1  1  2  2  2  2
        bcs @5    ; -  -  3  3  -  -  3  3  -  -  3  3  | -  -  0  0  -  -  1  1  -  -  2  2 ;bpl works too
@5:     beq @10   ; 3  3  3  3  2  2  2  2  2  2  2  2  | 0  0  0  0  1  1  1  1  2  2  2  2
        lsr       ; -  -  -  -  2  2  2  2  2  2  2  2  | -  -  -  -  0  0  0  0  1  1  1  1
        bcs @10   ; -  -  -  -  3  3  3  3  2  2  2  2  | -  -  -  -  0  0  0  0  1  1  1  1 ;beq works too
        delay_n 5 ; -  -  -  -  -  -  -  -  5  5  5  5  | -  -  -  -  -  -  -  -  1  1  1  1
@10:      ;Total:  12 13 14 15 16 17 18 19 20 21 22 23
</pre>
<p>For delay_n 5, anything that causes 5 cycles of delay works. Examples: <tt>inc $00</tt>, <tt>nop</tt> + <tt>cmp $C5</tt>
</p>
<h4><span class="mw-headline" id="15.E2.80.94270_cycles_of_delay:_delay.3DA.2B15.3B_0_.E2.89.A4_A_.E2.89.A4_255.29">15—270 cycles of delay: delay=A+15; 0 ≤ A ≤ 255)</span></h4>
<p>This code peels slices of 5 cycles with a SBC-BCS loop, and then executes the delay code for A=251—255. The same code will appear later as a function version (which adds 12 cycles overhead due to JSR+RTS cost).
</p>
<pre>        sec     
@L:     sbc #5  
        bcs @L  ;  6 6 6 6 6  FB FC FD FE FF
        adc #3  ;  2 2 2 2 2  FE FF 00 01 02
        bcc @4  ;  3 3 2 2 2  FE FF 00 01 02
        lsr     ;  - - 2 2 2  -- -- 00 00 01
        beq @5  ;  - - 3 3 2  -- -- 00 00 01
@4:     lsr     ;  2 2 - - 2  7F 7F -- -- 00
@5:     bcs @6  ;  2 3 2 3 2  7F 7F 00 00 00
@6:</pre>
<h4><span class="mw-headline" id="16.E2.80.94271_cycles_of_delay:_delay.3DA.2B16.3B_0_.E2.89.A4_A_.E2.89.A4_255.29">16—271 cycles of delay: delay=A+16; 0 ≤ A ≤ 255)</span></h4>
<p>This code peels slices of 9 cycles with a CMP-BCC-SBC-BCS loop, and then executes the delay code for A=0—8.
</p>
<pre>@L:     cmp #9          ;2
        bcc @0          ;2 (+1)
        sbc #9          ;2
        bcs @L          ;3
;      Cycles | A | 5  5  5  5  5  5  5  5  5  | 0  1  2  3  4  5  6  7  8
@0:     lsr       ; 2  2  2  2  2  2  2  2  2  | 0  0  1  1  2  2  3  3  4
        bcs @3    ; 2  3  2  3  2  3  2  3  2  | 0 c0  1 c1  2 c2  3 c3  4
        adc #255  ; 2  -  2  -  2  -  2  -  2  |-1  - c0  - c1  - c2  - c3
@3:     beq @7    ; 2  3  3  2  2  2  2  2  2  |-1 c0 c0 c1 c1 c2 c2 c3 c3
        bcc @9    ; 3  -  -  2  2  2  2  2  2  |-1  -  - c1 c1 c2 c2 c3 c3
        lsr       ; -  -  -  2  2  2  2  2  2  | -  -  - c0 c0  1  1 c1 c1
        beq @9    ; -  -  -  3  3  2  2  2  2  | -  -  - c0 c0  1  1 c1 c1
@7:     bcc @9    ; -  2  2  -  -  3  3  2  2  | - c0 c0  -  -  1  1 c1 c1
        bne @9    ; -  2  2  -  -  -  -  3  3  | - c0 c0  -  -  -  - c1 c1
@9:       ;Total:  16 17 18 19 20 21 22 23 24</pre>
<h4><span class="mw-headline" id="5.E2.80.9465285_cycles_of_delay:_delay_.3D_256.C3.97X_.2B_5">5—65285 cycles of delay: delay = 256×X + 5</span></h4>
<p>Clobbers A:
</p>
<pre>@0:     txa       ;2
        beq @10   ;3
        nop       ;2
        tya       ;2
         ldy #48  ;2
@l:      dey      ;2×48
         bne @l   ;3×48
        tay       ;2−1
        dex       ;2
        jmp @0    ;3
@10:</pre>
<p>Doesn’t clobber A (2 bytes longer):
</p>
<pre>@0:     cpx #0    ;2
        beq @10   ;3
        pha       ;3
        tya       ;2
         ldy #47  ;2
@l:      dey      ;2×47
         bne @l   ;3×47
        tay       ;2−1
        pla       ;4
        jmp @0    ;3
@10:</pre>
<h4><span class="mw-headline" id="18.E2.80.94218103813_cycles_of_delay:_delay_.3D_13.C3.97.2865536.C3.97Y_.2B_256.C3.97A_.2B_X.29_.2B_18">18—218103813 cycles of delay: delay = 13×(65536×Y + 256×A + X) + 18</span></h4>
<pre>        iny
@l1:    nop
        nop
@l2:    cpx #1
        dex
        sbc #0
        bcs @l1
        dey
        bne @l2
        rts</pre>
<h3><span class="mw-headline" id="Callable_functions">Callable functions</span></h3>
<h4><span class="mw-headline" id="A_.2B_25_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V">A + 25 cycles of delay, clobbers A, Z&amp;N, C, V</span></h4>
<p>This code peels slices of 7 cycles with a CMP-BCS-SBC loop, and then executes the delay code for 9—16 cycles with A = 0—6. The reason its overhead is smaller than in the version that peels 5 cycles is because the case for A&lt;7 executes only two instructions instead of three. This comes at the cost that the entry point is not the first instruction. Therefore the code can only exist as a callable function and not inline code.
</p>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays A clocks + overhead
; Clobbers A. Preserves X,Y.
; Time: A+25 clocks (including JSR)
;;;;;;;;;;;;;;;;;;;;;;;;
                  ;       Cycles              Accumulator         Carry flag
                  ; 0  1  2  3  4  5  6          (hex)           0 1 2 3 4 5 6
                  ;
                  ; 6  6  6  6  6  6  6   00 01 02 03 04 05 06
:      sbc #7     ; carry set by CMP
delay_a_25_clocks:
       cmp #7     ; 2  2  2  2  2  2  2   00 01 02 03 04 05 06   0 0 0 0 0 0 0
       bcs :-     ; 2  2  2  2  2  2  2   00 01 02 03 04 05 06   0 0 0 0 0 0 0
       lsr        ; 2  2  2  2  2  2  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
       bcs *+2    ; 2  3  2  3  2  3  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
       beq :+     ; 3  3  2  2  2  2  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
       lsr        ;       2  2  2  2  2         00 00 01 01 01       1 1 0 0 1
       beq @rts   ;       3  3  2  2  2         00 00 01 01 01       1 1 0 0 1
       bcc @rts   ;             3  3  2               01 01 01           0 0 1
:      bne @rts   ; 2  2              3   00 00             01   0 1         0
@rts:  rts        ; 6  6  6  6  6  6  6   00 00 00 00 01 01 01   0 1 1 1 0 0 1
; Total cycles:    25 26 27 28 29 30 31</pre>
<h4><span class="mw-headline" id="A_.2B_27_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V">A + 27 cycles of delay, clobbers A, Z&amp;N, C, V</span></h4>
<p>This function has longer overhead than delay_a_25_clocks,
but it can be appended into other functions,
as the execution begins from the first instruction.
</p>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays A clocks + overhead
; Clobbers A. Preserves X,Y.
; Time: A+27 clocks (including JSR)
;;;;;;;;;;;;;;;;;;;;;;;;
delay_a_27_clocks:
        sec     
@L:     sbc #5  
        bcs @L  ;  6 6 6 6 6  FB FC FD FE FF
        adc #3  ;  2 2 2 2 2  FE FF 00 01 02
        bcc @4  ;  3 3 2 2 2  FE FF 00 01 02
        lsr     ;  - - 2 2 2  -- -- 00 00 01
        beq @5  ;  - - 3 3 2  -- -- 00 00 01
@4:     lsr     ;  2 2 - - 2  7F 7F -- -- 00
@5:     bcs @6  ;  2 3 2 3 2  7F 7F 00 00 00
@6:     rts     ;</pre>
<p>It is created by wrapping the code for 15—270 cycles of delay into a function.
The JSR+RTS instructions adds 12 cycles of overhead.
</p>
<h4><span class="mw-headline" id="256.C3.97A_.2B_X_.2B_33_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V">256×A + X + 33 cycles of delay, clobbers A, Z&amp;N, C, V</span></h4>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays A:X clocks+overhead
; Time: 256*A+X+33 clocks (including JSR)
; Clobbers A. Preserves X,Y. Has relocations.
;;;;;;;;;;;;;;;;;;;;;;;;
:	; 5 cycles done, do 256-5 more.
	sbc #1			; 2 cycles - Carry was set from cmp
	pha                     ; 3
	 lda #(256-27 - 16)     ; 2
	 jsr delay_a_27_clocks  ; 240
	pla                     ; 4
delay_256a_x_33_clocks:
	cmp #1			; +2
	bcs :-			; +3 
	; 0-255 cycles remain, overhead = 4
	txa 			; -1+2; 6; +27 = 33
	;passthru
&lt;&lt;Place the function delay_a_27_clocks immediately following here&gt;&gt;</pre>
<p>Can be trivially changed to swap X, Y.
</p><p>If you can clobber Y, change the part that begins with &quot;pha&quot;
and ends with &quot;pla&quot; into this, for 1 byte shorter code:
</p>
<pre>	ldy #49  ; 2
@l:     dey      ; 49*2
        bne @l   ; 49*3
        ldy $A4  ; 3-1</pre>
<h4><span class="mw-headline" id="256.C3.97A_.2B_16_cycles_of_delay.2C_clobbers_A.2C_Z.26N.2C_C.2C_V">256×A + 16 cycles of delay, clobbers A, Z&amp;N, C, V</span></h4>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays A*256 clocks + overhead
; Clobbers A. Preserves X,Y.
; Time: A*256+16 clocks (including JSR)
;;;;;;;;;;;;;;;;;;;;;;;;
delay_256a_16_clocks:
	cmp #0
	bne delay_256a_11_clocks_
	rts
delay_256a_11_clocks_:
	;5 cycles done. Must consume 256 cycles; 251 cycles remain.
        pha                      ;3
         tya                     ;2
         ldy #46                 ;2
@l:      dey                     ;2*46
         bne @l                  ;3*46
         nop                     ;2-1
        tay                      ;2
	sec                       ;2
	sbc #1                    ;2
	jmp delay_256a_16_clocks  ;3</pre>
<p>If you can clobber Y, change the part that begins with pha and ends in pla, into this, for shorter code:
</p>
<pre>	ldy #48  ; 2
@l:     dey      ; 49*2
        bne @l   ; 49*3
        ldy $A4  ; 3-1</pre>
<h4><span class="mw-headline" id="256.C3.97X_.2B_16_cycles_of_delay.2C_clobbers_X.2C_Z.26N">256×X + 16 cycles of delay, clobbers X, Z&amp;N</span></h4>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays X*256 clocks + overhead
; Clobbers X,Y. Preserves A. Relocatable.
; Time: X*256+16 clocks (including JSR)
;;;;;;;;;;;;;;;;;;;;;;;;
delay_256x_16_clocks:
	cpx #0
	bne delay_256x_11_clocks_
	rts
delay_256x_11_clocks_:
	;5 cycles done. Must consume 256 cycles; 251 cycles remain.
        pha                      ;3
         tya                     ;2
         ldy #46                 ;2
@l:      dey                     ;2*46
         bne @l                  ;3*46
         nop                     ;2-1
         nop                     ;2
        tay                      ;2
        pla                      ;4
	dex                      ;2
	jmp delay_256x_16_clocks ;3</pre>
<p>Can be trivially changed to swap X, Y.
</p><p>If you can clobber Y, change the part that begins with pha and ends in pla, into this, for shorter code:
</p>
<pre>        ldy #50                  ;2-1
@l:	dey                      ;2*50
	bne @l                   ;3*50</pre>
<h4><span class="mw-headline" id="256.C3.97X_.2B_A_.2B_30_cycles_of_delay.2C_clobbers_A.2C_X.2C_Z.26N.2C_C.2C_V">256×X + A + 30 cycles of delay, clobbers A, X, Z&amp;N, C, V</span></h4>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays X*256+A clocks + overhead
; Clobbers A,X. Preserves Y.
; Depends on delay_a_25_clocks within short branch distance
; Time: X*256+A+30 clocks (including JSR)
;;;;;;;;;;;;;;;;;;;;;;;;
delay_256x_a_30_clocks:
        cpx #0                  ;2
        beq delay_a_25_clocks   ;3
        ;4 cycles done. Must consume 256 cycles; 252 cycles remain.
        pha                             ;3
         lda #(256-4-(3+2+4+2+3))-25    ;2
         jsr delay_a_25_clocks          ;238
        pla                             ;4
        dex                             ;2
        jmp delay_256x_a_30_clocks      ;3</pre>
<p>Can be trivially changed to swap X, Y.
</p><p>Alternative version that does not depend on other delay functions,
but has otherwise the same implications:
</p>
<pre>:      sbc #7    ; carry set by CMP
delay_256x_a_30_clocks_b:
       cmp #7    ; 2  2  2  2  2  2  2   00 01 02 03 04 05 06   0 0 0 0 0 0 0
       bcs :-    ; 2  2  2  2  2  2  2   00 01 02 03 04 05 06   0 0 0 0 0 0 0
       lsr       ; 2  2  2  2  2  2  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
       bcs @2    ; 2  3  2  3  2  3  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
@2:    beq @6    ; 3  3  2  2  2  2  2   00 00 01 01 02 02 03   0 1 0 1 0 1 0
       lsr       ;       2  2  2  2  2         00 00 01 01 01       1 1 0 0 1
       beq @do_x ;       3  3  2  2  2         00 00 01 01 01       1 1 0 0 1
       bcc @do_x ;             3  3  2               01 01 01           0 0 1
@6:    bne @do_x ; 2  2              3   00 00             01   0 1         0
@do_x: txa       ;2
       beq @rts  ;3
       ;4 cycles done. Must consume 256 cycles; 252 cycles remain.
       nop       ;2
       tya       ;2
        ldy #48  ;2
@l:     dey      ;2*48
        bne @l   ;3*48
       tay       ;2-1
       dex       ;2
       jmp @do_x ;3
@rts:  rts</pre>
<p>This function is constructed by concatenating delay_a_25_clocks and the inline delay code for 5—65285 cycles.
</p>
<h4><span class="mw-headline" id="851968.C3.97Y_.2B_3328.C3.97A_.2B_13.C3.97X_.2B_30_cycles_of_delay.2C_clobbers_A.2C_X.2C_Y.2C_Z.26N.2C_C.2C_V">851968×Y + 3328×A + 13×X + 30 cycles of delay, clobbers A, X, Y, Z&amp;N, C, V</span></h4>
<pre>;;;;;;;;;;;;;;;;;;;;;;;;
; Delays 30+13*(65536*Y+256*A+X) cycles including JSR.
; Clobbers A,X,Y.
delay_851968y_3328a_13x_30_clocks:
        iny
@l1:    nop
        nop
@l2:    cpx #1
        dex
        sbc #0
        bcs @l1
        dey
        bne @l2
        rts</pre>
<p>This is constructed by wrapping the 18—218103813 cycles inline delay code in a function.
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li> <a href="Fixed_cycle_delay.xhtml" title="Fixed cycle delay">Fixed cycle delay</a></li></ul>

<!-- 
NewPP limit report
CPU time usage: 0.179 seconds
Real time usage: 0.247 seconds
Preprocessor visited node count: 397/1000000
Preprocessor generated node count: 744/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:1622-1!*!0!!en!*!* and timestamp 20160509131729 and revision id 12356
 -->
</div></body></html>
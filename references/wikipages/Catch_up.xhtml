<?xml version="1.0" ?><!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Catch-up</title>
<meta content="width=display-width" name="viewport"/>
<link href="w.css" rel="stylesheet" type="text/css"/>
<script src="w.js" type="text/javascript"/>
</head><body><h1>Catch-up</h1><div class="article">
<p>The NES <a href="CPU.xhtml" title="CPU">CPU</a>, <a href="PPU.xhtml" title="PPU">PPU</a>, <a href="APU.xhtml" title="APU">APU</a>, and <a class="mw-redirect" href="Mapper.xhtml" title="MMC">mapper</a> run in parallel (that is, at the same time), and NES games are designed with this in mind.
Many of them modify the PPU registers and CHR bank numbers multiple times to produce scroll splits, curved roads, and other raster effects, though not nearly to the same extent as the Atari 2600 games featured in <i>Racing the Beam</i> by Nick Montfort and Ian Bogost (<s>ISBN 9780262012577</s>).
But most emulators are programmed for a <a class="extiw" href="http://en.wikipedia.org/wiki/Von_Neumann_architecture" title="wikipedia:Von Neumann architecture">Von Neumann architecture</a> that does only one thing at a time.
So in some sense, an emulator must switch among emulating the CPU, PPU, APU, and mapper one at a time.
But this switching must be fairly fine-grained: if an emulator runs the CPU for a whole frame and then runs the PPU for a whole frame, for example, the raster effects won't be visible.
</p><p>The design philosophy of the emulator <a href="Nintendulator.xhtml" title="Nintendulator">Nintendulator</a> takes clarity and accuracy over speed; it emulates each component for one CPU cycle before switching to the next.
Most other emulators optimized for run-time efficiency do some level of <b>catch-up</b>, involving running the emulated CPU for several dozen cycles and then running the PPU and APU until they are synchronized.
Keeping one component in the host CPU for a longer time speeds things up because the relevant data stays in the host CPU's fast registers and cache, not (slower) main memory,
as long as the end result is <a class="external text" href="http://docs.oracle.com/cd/E19205-01/819-5265/bjalr/index.html" rel="nofollow">as if</a> the emulator ran all components cycle-by-cycle.
</p><p>The basic technique looks like this:
</p>
<ol><li>Find the next time that one component could affect another, such as the CPU writing to a PPU register or the PPU asserting an interrupt to the CPU.</li>
<li>Run the least predictable component up to that time. In the NES's case, the CPU is least predictable, so you usually want to run that first.</li>
<li>Run the other components up to that time.</li></ol>
<p>At the end of each frame (for example, the start of scanline 0 or scanline 240), the emulator catches up everything and hands off the completed video surface and audio stream to the operating system.
</p>
<div class="toc" id="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Prediction"><span class="tocnumber">1</span> <span class="toctext">Prediction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Timestamping"><span class="tocnumber">2</span> <span class="toctext">Timestamping</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Scanline-based_emulation"><span class="tocnumber">3</span> <span class="toctext">Scanline-based emulation</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Rewind_to_checkpoint"><span class="tocnumber">4</span> <span class="toctext">Rewind to checkpoint</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Prediction">Prediction</span></h2>
<p>One basic technique involves predicting when each component will do something &quot;important&quot;, like asserting an interrupt or changing a status register, and then running one component ahead until that time.
</p><p>Some things can be predicted:
</p>
<ul><li>Vertical blanking <a href="NMI.xhtml" title="NMI">NMI</a></li>
<li>Scanlines containing sprite 0 that might trigger sprite 0 hit</li>
<li>Scanlines containing at least 8 sprites that might trigger the overflow flag</li>
<li>IRQs from <a href="APU_Frame_Counter.xhtml" title="APU Frame Counter">APU Frame Counter</a> and <a href="APU_DMC.xhtml" title="APU DMC">APU DMC</a> completion</li>
<li>APU length counter status</li>
<li>Mapper IRQ, in many cases</li></ul>
<p>An emulator might make a rough prediction that slightly underestimates the time until that component sees the change, run that component for that amount of time, and then fall back to I/O catch-up or cycle-by-cycle emulation until the &quot;important&quot; event has happened.
</p>
<h2><span class="mw-headline" id="Timestamping">Timestamping</span></h2>
<p>Another technique involves remembering at what time (that is, what cycle) the CPU has written to each register, and then having the other component process the write as if it had occurred at that cycle.
</p><p>But if a timestamp changes a prediction, you'll want to catch-up the other components instead of timestamping the write:
</p>
<ul><li> Writes to <a href="PPU_registers.xhtml" title="PPU registers">PPU registers</a> (especially $2004) might change the sprite 0 prediction.</li>
<li> Writes to mapper or PPU registers might change the mapper IRQ prediction.</li>
<li> Writes to APU registers might change the Frame IRQ prediction and the length counter predictions.</li></ul>
<h2><span class="mw-headline" id="Scanline-based_emulation">Scanline-based emulation</span></h2>
<p>A <b>scanline-based emulator</b> is an emulator that uses a crude form of prediction and timestamping:
something &quot;important&quot; might happen on each scanline, and timestamps are rounded to a scanline boundary.
They run the CPU for one scanline's worth of cycles and then run the PPU and mapper for one scanline (341 dots), and after all scanlines are finished, run the APU for one frame.
This isn't perfect, but it can run &quot;well-behaved&quot; games efficiently on emulators designed for old PCs or handheld devices.
Most mappers that generate interrupts do so at some predictable point in the scanline, and few games use the APU interrupt or write to the same APU register multiple times in a frame, except possibly to write raw sample values to <a href="APU_DMC.xhtml" title="APU DMC">$4011</a>.
</p>
<h2><span class="mw-headline" id="Rewind_to_checkpoint">Rewind to checkpoint</span></h2>
<p>This isn't as important for the NES, but in systems with multiple CPUs that can interrupt each other (like the Super NES with an SA-1 coprocessor), prediction is far more difficult. So an emulator can set a checkpoint on CPU A, predict that CPU B will <i>not</i> assert an interrupt, and run CPU A for that time. If it turns out that CPU B asserted an interrupt, the emulator can rewind CPU A to the checkpoint and run it until the time the interrupt occurred.
</p>
<!-- 
NewPP limit report
CPU time usage: 0.040 seconds
Real time usage: 0.042 seconds
Preprocessor visited node count: 15/1000000
Preprocessor generated node count: 20/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:291-1!*!0!!en!*!* and timestamp 20160208224851 and revision id 7662
 -->
</div></body></html>